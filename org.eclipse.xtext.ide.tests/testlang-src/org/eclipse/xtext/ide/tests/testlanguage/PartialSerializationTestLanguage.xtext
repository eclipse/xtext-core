/*
 * Copyright (c) 2016, 2017 TypeFox GmbH (http://www.typefox.io) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 */
grammar org.eclipse.xtext.ide.tests.testlanguage.PartialSerializationTestLanguage
with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/ide/tests/testlanguage/mm/withtransient" as withtransient

generate partialSerializationTestLanguage
"http://www.eclipse.org/xtext/ide/tests/testlanguage/PartialSerializationTestLanguage"

Model:
	"#1" Node | 
	"#2" MandatoryValue | 
	"#3" OptionalValue |
	"#4" MandatoryChild |
	"#5" OptionalChild |
	"#10" ManyOptionalValues |
	"#11" ManyMandatoryValues |
	"#12" MandatoryChildList |
	"#13" OptionalChildList |
//	"#14" Imports |
	"#20" clazz+=EClassDecl+ |
	"#21" EClassRef |
	"#22" TwoChildLists |
	"#23" ChildWithSubChilds |
	"#24" TwoChilds |
	"#30" WithTransientContainer
;

MandatoryValue:
	name=ID;

OptionalValue:
	{OptionalValue} "kw1"? name=ID? "kw2"?;

ManyOptionalValues:
	{ManyValues} name+=ID*;

ManyMandatoryValues:
	name+=ID+;

MandatoryChild:
	child=MandatoryValue;

OptionalChild:
	{OptionalChild} child=MandatoryValue?;

TwoChildLists:
	"{"
		directChildren += MandatoryValue+
		
		"children1" "{"
			childsList = MandatoryChildList
		"}"
	"}"
	;
	
TwoChilds:
	{TwoChilds}
		"direct" ":" directChild = MandatoryValue?
		
		"child" ":" optChild = OptionalChild
	;

ChildWithSubChilds:
	{ChildWithSubChilds}
	children+=ChildWithSubChild*
;

ChildWithSubChild:
	{ChildWithSubChild}"subs"
	subChilds+=SubChild*
;

SubChild: name=ID;

MandatoryChildList:
	children+=MandatoryValue+;

OptionalChildList:
	{OptionalChildList} children+=MandatoryValue*;
	
Import:
	"import" importedNamespace=QualifiedName;
	
//Imports:
//	{ManyReferences} imports+=Import* "refs" refs+=[ecore::EObject|QualifiedName]*;

Node:
	{Node} imports+=Import*
	name=ID? ("refs" refs+=[Node|QualifiedName]*)?
	("{" children+=Node* ("ref" ref=[Node|QualifiedName])? "}" | ";");

QualifiedName:
	ID ("." ID)*;
	
EClassDecl returns ecore::EClass:
	name=ID;
	
EClassRef:
	ref=[ecore::EClass|QualifiedName];

WithTransientContainer:
	child=WithTransient
;	
WithTransient returns withtransient::WithTransient:
	name=ID
;
