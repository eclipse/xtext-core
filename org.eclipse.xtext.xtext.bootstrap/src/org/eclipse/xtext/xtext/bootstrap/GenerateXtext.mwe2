/*******************************************************************************
 * Copyright (c) 2010, 2017 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
module org.eclipse.xtext.xtext.bootstrap.GenerateXtext

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.parser.antlr.*
import org.eclipse.xtext.resource.XtextResourceSet 

var rootPath = ".."
var baseName = "org.eclipse.xtext"
var runtimeProjectName = baseName
var ideProjectName = "${baseName}.xtext.ide"
var eclipseProjectName = "${baseName}.xtext.ui"
var eclipseProjectPath = "${rootPath}/../xtext-eclipse/${eclipseProjectName}"

var fileHeader = "/*\n * generated by Xtext 2.11\n */" //\${version}\n */"

var file.extensions = "xtext,xtext2"

Workflow {
	component = XtextGenerator {
		configuration = DefaultGeneratorModule {
			project = StandardProjectConfig {
				baseName = baseName
				rootPath = rootPath
				
				runtime = {
					name = runtimeProjectName
				}
			}
			code = {
				encoding = "ISO-8859-1"
				lineDelimiter = "\n"
				fileHeader = fileHeader
				preferXtendStubs = false
			}
		}
		
		language = {
			name = "org.eclipse.xtext.common.Terminals"

			fragment = grammarAccess.GrammarAccessFragment2 {}

			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}
		}
	}
	
	component = XtextGenerator {
		configuration = XtextLangGeneratorModule {
			project = StandardProjectConfig {
				baseName = baseName
				rootPath = rootPath
				
				runtime = {
					name = runtimeProjectName
				}
				genericIde = {
					enabled = true
					name = ideProjectName
				}
				eclipsePlugin = {
					enabled = true
					name = eclipseProjectName
					root = eclipseProjectPath
				}
				// createEclipseMetaData = true
			}
			code = {
				encoding = "ISO-8859-1"
				lineDelimiter = "\n"
				fileHeader = fileHeader
				preferXtendStubs = false
			}
		}
		
		cleaner = {
			// for the sake of keeping the artifacts generated above exclude everything in
			//  'org.eclipse.xtext.common'; unfortunately the cleaner expects simple names so...
			exclude = "common" 
		}
		
		language = {
			name = "org.eclipse.xtext.Xtext"
			fileExtensions = file.extensions

			referencedResource = "platform:/resource/org.eclipse.xtext/org/eclipse/xtext/Xtext.genmodel"
			referencedResource = "platform:/resource/org.eclipse.xtext/org/eclipse/xtext/Xtext.ecore"

			fragment = grammarAccess.GrammarAccessFragment2 {}
			
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
				options = {
					classSplitting = true
				}
			}
			
			fragment = ui.contentAssist.ContentAssistFragment2 {}

			fragment = ui.labeling.LabelProviderFragment2 {}

			fragment = resourceFactory.ResourceFactoryFragment2 {}

			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			fragment = ui.compare.CompareFragment2 {}

			fragment = ui.refactoring.RefactorElementNameFragment2 {}

			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
		}
	}
}
