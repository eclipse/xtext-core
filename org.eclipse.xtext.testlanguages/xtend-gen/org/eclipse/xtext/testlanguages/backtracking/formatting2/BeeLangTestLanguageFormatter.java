/**
 * generated by Xtext
 */
package org.eclipse.xtext.testlanguages.backtracking.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AliasedRequiredCapability;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AndExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AssignmentExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.AtExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.BinaryOpExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CachedExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CallFeature;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CallFunction;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CallNamedFunction;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ChainedExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ClosureParameter;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.CreateExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.DefValue;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Expression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.FeatureExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Function;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.GuardExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Model;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.OrExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Parameter;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ParameterDeclaration;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ParameterList;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.ProvidedCapability;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.RequiredCapability;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.SimpleTypeRef;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.TypeRef;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.UnaryOpExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.UnaryPostOpExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.UnaryPreOpExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.Unit;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.WithContextExpression;
import org.eclipse.xtext.testlanguages.backtracking.beeLangTestLanguage.WithExpression;
import org.eclipse.xtext.testlanguages.backtracking.services.BeeLangTestLanguageGrammarAccess;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class BeeLangTestLanguageFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BeeLangTestLanguageGrammarAccess _beeLangTestLanguageGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Unit> _units = model.getUnits();
    for (final Unit units : _units) {
      this.format(units, document);
    }
    EList<Function> _functions = model.getFunctions();
    for (final Function functions : _functions) {
      this.format(functions, document);
    }
  }
  
  protected void _format(final Unit unit, @Extension final IFormattableDocument document) {
    EList<SimpleTypeRef> _implements = unit.getImplements();
    for (final SimpleTypeRef _implements_1 : _implements) {
      this.format(_implements_1, document);
    }
    EList<ProvidedCapability> _providedCapabilities = unit.getProvidedCapabilities();
    for (final ProvidedCapability providedCapabilities : _providedCapabilities) {
      this.format(providedCapabilities, document);
    }
    EList<AliasedRequiredCapability> _requiredCapabilities = unit.getRequiredCapabilities();
    for (final AliasedRequiredCapability requiredCapabilities : _requiredCapabilities) {
      this.format(requiredCapabilities, document);
    }
    EList<RequiredCapability> _metaRequiredCapabilities = unit.getMetaRequiredCapabilities();
    for (final RequiredCapability metaRequiredCapabilities : _metaRequiredCapabilities) {
      this.format(metaRequiredCapabilities, document);
    }
    EList<Function> _functions = unit.getFunctions();
    for (final Function functions : _functions) {
      this.format(functions, document);
    }
  }
  
  protected void _format(final ProvidedCapability providedCapability, @Extension final IFormattableDocument document) {
    Expression _condExpr = providedCapability.getCondExpr();
    this.format(_condExpr, document);
  }
  
  protected void _format(final AliasedRequiredCapability aliasedRequiredCapability, @Extension final IFormattableDocument document) {
    Expression _condExpr = aliasedRequiredCapability.getCondExpr();
    this.format(_condExpr, document);
  }
  
  protected void _format(final RequiredCapability requiredCapability, @Extension final IFormattableDocument document) {
    Expression _condExpr = requiredCapability.getCondExpr();
    this.format(_condExpr, document);
  }
  
  protected void _format(final ParameterList parameterList, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = parameterList.getParameters();
    for (final Parameter parameters : _parameters) {
      this.format(parameters, document);
    }
  }
  
  protected void _format(final Parameter parameter, @Extension final IFormattableDocument document) {
    Expression _expr = parameter.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final ClosureParameter closureParameter, @Extension final IFormattableDocument document) {
    Expression _expr = closureParameter.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final ParameterDeclaration parameterDeclaration, @Extension final IFormattableDocument document) {
    TypeRef _type = parameterDeclaration.getType();
    this.format(_type, document);
  }
  
  protected void _format(final Function function, @Extension final IFormattableDocument document) {
    TypeRef _returnType = function.getReturnType();
    this.format(_returnType, document);
    EList<ParameterDeclaration> _parameters = function.getParameters();
    for (final ParameterDeclaration parameters : _parameters) {
      this.format(parameters, document);
    }
    GuardExpression _guard = function.getGuard();
    this.format(_guard, document);
    Expression _funcExpr = function.getFuncExpr();
    this.format(_funcExpr, document);
  }
  
  protected void _format(final GuardExpression guardExpression, @Extension final IFormattableDocument document) {
    Expression _guardExpr = guardExpression.getGuardExpr();
    this.format(_guardExpr, document);
  }
  
  protected void _format(final AssignmentExpression assignmentExpression, @Extension final IFormattableDocument document) {
    Expression _rightExpr = assignmentExpression.getRightExpr();
    this.format(_rightExpr, document);
    Expression _leftExpr = assignmentExpression.getLeftExpr();
    this.format(_leftExpr, document);
  }
  
  protected void _format(final DefValue defValue, @Extension final IFormattableDocument document) {
    TypeRef _type = defValue.getType();
    this.format(_type, document);
    Expression _valueExpr = defValue.getValueExpr();
    this.format(_valueExpr, document);
  }
  
  protected void _format(final CachedExpression cachedExpression, @Extension final IFormattableDocument document) {
    Expression _expr = cachedExpression.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final OrExpression orExpression, @Extension final IFormattableDocument document) {
    Expression _rightExpr = orExpression.getRightExpr();
    this.format(_rightExpr, document);
    Expression _leftExpr = orExpression.getLeftExpr();
    this.format(_leftExpr, document);
  }
  
  protected void _format(final AndExpression andExpression, @Extension final IFormattableDocument document) {
    Expression _rightExpr = andExpression.getRightExpr();
    this.format(_rightExpr, document);
    Expression _leftExpr = andExpression.getLeftExpr();
    this.format(_leftExpr, document);
  }
  
  protected void _format(final BinaryOpExpression binaryOpExpression, @Extension final IFormattableDocument document) {
    Expression _rightExpr = binaryOpExpression.getRightExpr();
    this.format(_rightExpr, document);
    Expression _leftExpr = binaryOpExpression.getLeftExpr();
    this.format(_leftExpr, document);
  }
  
  protected void _format(final UnaryOpExpression unaryOpExpression, @Extension final IFormattableDocument document) {
    Expression _expr = unaryOpExpression.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final UnaryPreOpExpression unaryPreOpExpression, @Extension final IFormattableDocument document) {
    Expression _expr = unaryPreOpExpression.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final CallFeature callFeature, @Extension final IFormattableDocument document) {
    ParameterList _parameterList = callFeature.getParameterList();
    this.format(_parameterList, document);
    Expression _funcExpr = callFeature.getFuncExpr();
    this.format(_funcExpr, document);
  }
  
  protected void _format(final AtExpression atExpression, @Extension final IFormattableDocument document) {
    Expression _indexExpr = atExpression.getIndexExpr();
    this.format(_indexExpr, document);
    Expression _objExpr = atExpression.getObjExpr();
    this.format(_objExpr, document);
  }
  
  protected void _format(final CallFunction callFunction, @Extension final IFormattableDocument document) {
    ParameterList _parameterList = callFunction.getParameterList();
    this.format(_parameterList, document);
    Expression _funcExpr = callFunction.getFuncExpr();
    this.format(_funcExpr, document);
  }
  
  protected void _format(final WithExpression withExpression, @Extension final IFormattableDocument document) {
    Expression _funcExpr = withExpression.getFuncExpr();
    this.format(_funcExpr, document);
  }
  
  protected void _format(final WithContextExpression withContextExpression, @Extension final IFormattableDocument document) {
    Expression _expr = withContextExpression.getExpr();
    this.format(_expr, document);
    Expression _contextBlock = withContextExpression.getContextBlock();
    this.format(_contextBlock, document);
  }
  
  protected void _format(final ChainedExpression chainedExpression, @Extension final IFormattableDocument document) {
    EList<Expression> _expressions = chainedExpression.getExpressions();
    for (final Expression expressions : _expressions) {
      this.format(expressions, document);
    }
  }
  
  protected void _format(final CallNamedFunction callNamedFunction, @Extension final IFormattableDocument document) {
    ParameterList _parameterList = callNamedFunction.getParameterList();
    this.format(_parameterList, document);
  }
  
  protected void _format(final CreateExpression createExpression, @Extension final IFormattableDocument document) {
    ParameterList _parameterList = createExpression.getParameterList();
    this.format(_parameterList, document);
    Expression _contextBlock = createExpression.getContextBlock();
    this.format(_contextBlock, document);
  }
  
  protected void _format(final UnaryPostOpExpression unaryPostOpExpression, @Extension final IFormattableDocument document) {
    Expression _expr = unaryPostOpExpression.getExpr();
    this.format(_expr, document);
  }
  
  protected void _format(final FeatureExpression featureExpression, @Extension final IFormattableDocument document) {
    Expression _objExpr = featureExpression.getObjExpr();
    this.format(_objExpr, document);
  }
  
  public void format(final Object callNamedFunction, final IFormattableDocument document) {
    if (callNamedFunction instanceof XtextResource) {
      _format((XtextResource)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof CallNamedFunction) {
      _format((CallNamedFunction)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof AndExpression) {
      _format((AndExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof AssignmentExpression) {
      _format((AssignmentExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof AtExpression) {
      _format((AtExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof BinaryOpExpression) {
      _format((BinaryOpExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof CachedExpression) {
      _format((CachedExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof CallFeature) {
      _format((CallFeature)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof CallFunction) {
      _format((CallFunction)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof ChainedExpression) {
      _format((ChainedExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof ClosureParameter) {
      _format((ClosureParameter)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof CreateExpression) {
      _format((CreateExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof DefValue) {
      _format((DefValue)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof FeatureExpression) {
      _format((FeatureExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof Function) {
      _format((Function)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof OrExpression) {
      _format((OrExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof UnaryOpExpression) {
      _format((UnaryOpExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof UnaryPostOpExpression) {
      _format((UnaryPostOpExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof UnaryPreOpExpression) {
      _format((UnaryPreOpExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof WithContextExpression) {
      _format((WithContextExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof WithExpression) {
      _format((WithExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof AliasedRequiredCapability) {
      _format((AliasedRequiredCapability)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof GuardExpression) {
      _format((GuardExpression)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof Model) {
      _format((Model)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof Parameter) {
      _format((Parameter)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof ParameterDeclaration) {
      _format((ParameterDeclaration)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof ParameterList) {
      _format((ParameterList)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof ProvidedCapability) {
      _format((ProvidedCapability)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof RequiredCapability) {
      _format((RequiredCapability)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof Unit) {
      _format((Unit)callNamedFunction, document);
      return;
    } else if (callNamedFunction instanceof EObject) {
      _format((EObject)callNamedFunction, document);
      return;
    } else if (callNamedFunction == null) {
      _format((Void)null, document);
      return;
    } else if (callNamedFunction != null) {
      _format(callNamedFunction, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(callNamedFunction, document).toString());
    }
  }
}
