/**
 * generated by Xtext
 */
package org.eclipse.xtext.testlanguages.noJdt.formatting2;

import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.testlanguages.noJdt.noJdt.Greeting;
import org.eclipse.xtext.testlanguages.noJdt.noJdt.Model;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class NoJdtTestLanguageFormatter extends AbstractFormatter2 {
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Greeting> _greetings = model.getGreetings();
    for (final Greeting greeting : _greetings) {
      document.<Greeting>format(greeting);
    }
  }
  
  protected void _format(final Greeting greeting, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 1, 2);
    };
    document.<Greeting>append(greeting, _function);
  }
  
  public void format(final Object greeting, final IFormattableDocument document) {
    if (greeting instanceof XtextResource) {
      _format((XtextResource)greeting, document);
      return;
    } else if (greeting instanceof Greeting) {
      _format((Greeting)greeting, document);
      return;
    } else if (greeting instanceof Model) {
      _format((Model)greeting, document);
      return;
    } else if (greeting instanceof EObject) {
      _format((EObject)greeting, document);
      return;
    } else if (greeting == null) {
      _format((Void)null, document);
      return;
    } else if (greeting != null) {
      _format(greeting, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(greeting, document).toString());
    }
  }
}
