/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 *******************************************************************************/
grammar org.eclipse.xtext.serializer.SequencerTestLanguage with org.eclipse.xtext.common.Terminals

generate sequencertest "http://www.eclipse.org/2009/tmf/xtext/sequencertestlanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	x1=SimpleGroup | x2=SimpleAlternative | x3=SimpleMultiplicities | x4=GroupMultiplicities |
	x5=AlternativeMultiplicities | x6=List1 | x7=List2 | x8=AltList1 | x9=AltList2 |
	x10=SingleKeywords | x11=SingleKeywordsOrID | x12=SingleTerminals |
	x10=MultiKeywords | x11=MultiKeywordsOrID | x12=MultiTerminals |
	x13=SingleEnum | x14=SingleCrossReference | x15=SingleContainmentReference |
	x19=DependentAlternative1 | x20=DependentAlternative2 | x21=Optional | x22=Float |
	x23=UnorderedAlternative | x24=UnorderedGroup | x25=UnorderedGroupOptional |
	x26=UnorderedGroupBoolean | x27=Complex1 | x28=OptionalDouble | 
	x29=NullValueGenerated | x30=NullValueInterpreted | x31=NullCrossRefGenerated | x32=NullCrossRefInterpreted |
	x33=FragmentCaller | x34=ParameterCaller | x35=ParameterDelegation;

SimpleGroup:
	"#1" val1=ID val2=ID;

SimpleAlternative:
	"#2" ("kw1" val1=ID | "kw2" val2=ID);

SimpleMultiplicities:
	"#3" val1=ID "kw1" val2=ID? "kw2" val3+=ID+ "kw3" val4+=ID*;

GroupMultiplicities:
	"#4" val1=ID "kw1" (val2=ID val3=ID)? "kw2" (val4+=ID val5+=ID)+ "kw3" (val6+=ID val7+=ID)*;

AlternativeMultiplicities:
	"#5" (val2=ID | "kw1" val3=ID)? "kw2" (val4+=ID | "kw3" val5+=ID)+ "kw4" (val6+=ID | ("kw5" val7+=ID))*;

List1:
	"#6" val1+=ID ("," val1+=ID)*;

List2:
	"#7" {List2} (val1+=ID ("," val1+=ID)*)?;

AltList1:
	"#8" (val1=ID val2=ID | "kw1" val1=ID val3=ID | "kw2" val1=ID val4=ID?);

AltList2:
	"#9" (val1+=ID val2=ID | "kw" val1+=ID ("," val1+=ID)* val3=ID);

SingleKeywords:
	"#10" val=("kw1" | "kw2" | "kw3");

SingleKeywordsOrID:
	"#11" val=("kw1" | "kw2" | "kw3" | ID);

SingleTerminals:
	"#12" val=(ID1 | ID2);

terminal ID1:
	'$1' ID;

terminal ID2:
	'$2' ID;

terminal ID3:
	'$3' ID;

SingleEnum:
	"#13" val=(DefEnum1 | DefEnum2 | DefEnum3);

enum DefEnum1 returns DefEnum:
	kw1;

enum DefEnum2 returns DefEnum:
	kw2;

enum DefEnum3 returns DefEnum:
	kw3;

SingleCrossReference:
	"#14" name=(ID1 | ID2 | ID3) (ref=[SingleCrossReference|ID1] | ref=[SingleCrossReference|ID2] |
	ref=[SingleCrossReference|ID3]);

SingleContainmentReference:
	"#15" child=(SingleContainmentReferenceChild1 | SingleContainmentReferenceChild2 | SingleContainmentReferenceChild3);

SingleContainmentReferenceChild1:
	val='kw1';

SingleContainmentReferenceChild2:
	val='kw2';

SingleContainmentReferenceChild3:
	val='kw3';

MultiKeywords:
	"#16" val+=("kw1" | "kw2" | "kw3");

MultiKeywordsOrID:
	"#17" val+=("kw1" | "kw2" | "kw3" | ID);

MultiTerminals:
	"#18" val+=(ID1 | ID2);
	
DependentAlternative1:
	"#19" (val=ID | val=ID flag?="kw1");
	
DependentAlternative2:
	"#20" (val+=ID val+=ID+| val+=ID+ flag?="kw1");
	
Optional:
	"#21" int0=INT (int1=INT int2=INT)?;
	
Float:
    "#22" {Float} 'Bye';
	
UnorderedAlternative:
	"#23" {UnorderedAlternative} (val1+=ID | val2+=INT | val3+=UnorderedAlternativeVal | val4+=UnorderedAlternativeValDelegate)*;
	
UnorderedAlternativeVal: 
	"kw1" val=ID;
	
UnorderedAlternativeValDelegate:
	UnorderedAlternativeVal2;
	
UnorderedAlternativeVal2: 
	"kw2" val=ID;
	
UnorderedGroup:
	"#24" (val1=ID & val2=INT & val3=UnorderedGroupVal & val4=UnorderedGroupValDelegate);
	
UnorderedGroupVal: 
	"kw1" val=ID;
	
UnorderedGroupValDelegate:
	UnorderedGroupVal2;
	
UnorderedGroupVal2: 
	"kw2" val=ID;

UnorderedGroupOptional:
	"#25" {UnorderedGroupOptional} (("kw1" val1=ID)? & ("kw2" va2=ID)? & ("kw3" val3=ID)?);

UnorderedGroupBoolean:
	'#26' {UnorderedGroupBoolean} (val1?='kw1'?  & val2?='kw2'? & val3?='kw3'?);
	
Complex1:
	'#27' {Complex1} ("kw1" val1=ID)? ("kw2" val2=ID)? (("kw3" val3+=ID) | ("kw4" val4+=ID) | ("kw5" val5+=ID) | ("kw6" val6+=ID))*;	
	
OptionalDouble:
	"#28" double0=DOUBLE (double1=DOUBLE double2=DOUBLE)?;
	
DOUBLE returns ecore::EDouble:
	INT ("." INT)?;
	
NullValueGenerated returns NullValue:
	"#29" value=NULL_STRING;
	
NullValueInterpreted returns NullValue:
	"#30" value=NULL_STRING foo=ID?;
	
NULL_STRING: 
	STRING;
	
NullCrossRefGenerated returns NullCrossRef:
	"#31" ref=[ecore::EObject|ID];
	
NullCrossRefInterpreted returns NullCrossRef:
	"#32" ref=[ecore::EObject|ID] foo=ID?;
	
FragmentCaller returns FragmentCallerType:
	"#33" val1=ID Fragment1 val=ID;
	
fragment Fragment1 returns FragmentCallerType:
	fragVal=ID;
	
ParameterCaller:
	"#34" ("kw1" p=Parameterized<true, true> | "kw2" p=Parameterized<true, false> | "kw3" p=Parameterized<false, true> | "kw4" p=Parameterized<false, false>);

Parameterized<P, Q>:
	 <P> "kwp1" v1=ID | <!P> "kwp2" v2=ID (<Q> "kwp3" v3=ID)?;
	 
ParameterDelegation:
	"#35" ("kw1" p=Delegation<true, true> | "kw2" p=Delegation<true, false>);

Delegation<D, P>:
	<!D> (<P> p=ID | <!P> np=INT) | <D> "kwd" Delegation<false, P> ({DelegationA.left=current} rc2=Delegation<false, P>)?;	
	