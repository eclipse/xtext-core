/*******************************************************************************
 * Copyright (c) 2008 itemis AG and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
grammar org.eclipse.xtext.XtextGrammarTestLanguage with org.eclipse.xtext.common.Terminals

generate xtextTest "http://www.eclipse.org/2008/Test/XtextTest"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Grammar:
    'grammar' name=GrammarID ('with' usedGrammars+=[Grammar|GrammarID] (',' usedGrammars+=[Grammar|GrammarID])*)?
	HiddenClause?
	metamodelDeclarations+=AbstractMetamodelDeclaration* 
    (rules+=AbstractRule)+
;

fragment HiddenClause *:
	(definesHiddenTokens?='hidden' '(' (hiddenTokens+=[AbstractRule] (',' hiddenTokens+=[AbstractRule])*)? ')')
;

GrammarID returns ecore::EString:
  ID ('.' ID)*;
  
AbstractRule : ParserRule | TerminalRule | EnumRule;

AbstractMetamodelDeclaration :
	GeneratedMetamodel | ReferencedMetamodel;
	
// constraint: typeSelect(GeneratedMetamodel).size() == typeSelect(GeneratedMetamodel).alias.size()
// generated metamodels have to have different aliases
GeneratedMetamodel :
	'generate' name=ID ePackage=[ecore::EPackage|STRING] ('as' alias=ID)?;

// referenced metamodels may share aliases with other referenced metamodels
// and with generated metamodels
ReferencedMetamodel :
	'import' ePackage=[ecore::EPackage|STRING] ('as' alias=ID)?;

ParserRule :
	(
	  ^fragment?='fragment' RuleNameAndParams (wildcard?='*' | ReturnsClause?) 
	| RuleNameAndParams ReturnsClause?
	)
	HiddenClause? ':'
    	alternatives=Alternatives   
    ';'
;

fragment RuleNameAndParams returns ParserRule:
	name=ID ('[' (parameters+=Parameter (',' parameters+=Parameter)*)? ']')?
;

fragment ReturnsClause returns AbstractRule:
	'returns' type=TypeRef
;

Parameter:
	name=ID
;

TypeRef :
	(metamodel=[AbstractMetamodelDeclaration] '::')? classifier=[ecore::EClassifier]
;

Alternatives returns AbstractElement:
      ConditionalBranch ({Alternatives.elements+=current} ('|' elements+=ConditionalBranch)+)?
;

ConditionalBranch returns AbstractElement:
	  UnorderedGroup
	| {ConditionalBranch} '[' filtered=InverseLiteralValue parameter=[Parameter|ID] ']' guardedElement=UnorderedGroup
;

UnorderedGroup returns AbstractElement:
	Group ({UnorderedGroup.elements+=current} ('&' elements+=Group)+)?
;

Group returns AbstractElement:
    AbstractToken ({Group.elements+=current} (elements+=AbstractToken)+)?
;

AbstractToken returns AbstractElement:
	AbstractTokenWithCardinality |
	Action
;

/* SuppressWarnings[potentialOverride]: Handled in CardinalityAwareEcoreFactory */
AbstractTokenWithCardinality returns AbstractElement:
	(Assignment | AbstractTerminal) Cardinalities?
;

fragment Cardinalities returns AbstractElement:
	cardinality=('?'|'*'|'+')
;

Action returns Action:
	'{' type=TypeRef ('.' feature=ID operator=('='|'+=') 'current')? '}'
;

AbstractTerminal returns AbstractElement: 
   Keyword | 
   RuleCall | 
   ParenthesizedElement |
   // Keyword and RuleCall are used inside of Assignable terminal
   // As we do not want to be able to write name==>ID
   // the rules for Keyword and RuleCall have been copied
   PredicatedKeyword | 
   PredicatedRuleCall |
   // We have to make this one explicit since the ParenthesizedElement does not
   // create an object but we have to set the predicated flag
   PredicatedGroup
;

Keyword : 
   value=STRING 
;

RuleCall :
   {RuleCall}
   rule=[AbstractRule|RuleID] ('[' arguments+=NamedArgument (',' arguments+=NamedArgument)* ']')?
   
;

LiteralValue returns ecore::EBoolean:
	'!'|'+'
;

InverseLiteralValue returns ecore::EBoolean:
	LiteralValue
;

NamedArgument:
	{NamedArgument} 
	( literalValue=LiteralValue? parameter=[Parameter|ID]
	| parameter=[Parameter|ID] '=' value=[Parameter|ID]
	)
;

TerminalRuleCall returns RuleCall:
   rule=[AbstractRule|RuleID]
;

RuleID returns ecore::EString:
  ID ('::' ID)*
;

PredicatedKeyword returns Keyword:
	Predicate value=STRING  
;

PredicatedRuleCall returns RuleCall:
	Predicate rule=[AbstractRule]
;

Assignment returns Assignment:
   Predicate? feature=ID operator=('+='|'='|'?=') ^terminal=AssignableTerminal
;

fragment Predicate returns AbstractElement:
	(predicated?='=>' | firstSetPredicated?='->')
;

AssignableTerminal returns AbstractElement:
   Keyword | RuleCall | ParenthesizedAssignableElement | CrossReference
;

ParenthesizedAssignableElement returns AbstractElement:
   '(' AssignableAlternatives ')'
;

AssignableAlternatives returns AbstractElement:
    AssignableTerminal ({Alternatives.elements+=current} ('|' elements+=AssignableTerminal)+)?
;

CrossReference :
	'[' type=TypeRef ('|' ^terminal=CrossReferenceableTerminal )? ']'
;

CrossReferenceableTerminal returns AbstractElement:
   Keyword | RuleCall
;

ParenthesizedElement returns AbstractElement:
   '(' Alternatives ')'
;

PredicatedGroup returns Group:
	Predicate '(' elements+=Alternatives ')' 
;

TerminalRule :
	'terminal' (^fragment?='fragment' name=ID | name=ID ReturnsClause?) ':'
		alternatives=TerminalAlternatives
	';'
;

TerminalAlternatives returns AbstractElement:
	TerminalGroup ({Alternatives.elements+=current} ('|' elements+=TerminalGroup)+)?
;

TerminalGroup returns AbstractElement:
	TerminalToken ({Group.elements+=current} (elements+=TerminalToken)+)?
;

/* SuppressWarnings[potentialOverride]: Handled in CardinalityAwareEcoreFactory */
TerminalToken returns AbstractElement:
	TerminalTokenElement Cardinalities?
;

TerminalTokenElement returns AbstractElement: 
   CharacterRange | TerminalRuleCall | ParenthesizedTerminalElement | AbstractNegatedToken | Wildcard | ^EOF
;

ParenthesizedTerminalElement returns AbstractElement:
   '(' TerminalAlternatives ')'
;

AbstractNegatedToken:
   NegatedToken | UntilToken
;

NegatedToken:
	'!' ^terminal=TerminalTokenElement
;

UntilToken:
	'->' ^terminal=TerminalTokenElement
;

Wildcard:
	{Wildcard} '.'
;

^EOF:
	{^EOF} 'EOF'
;

CharacterRange returns AbstractElement:
	Keyword ( {CharacterRange.left=current} '..' right=Keyword)?
;

EnumRule:
    'enum' name=ID ReturnsClause? ':' 
    	alternatives=EnumLiterals   
    ';'
;

EnumLiterals returns AbstractElement:
	EnumLiteralDeclaration ({Alternatives.elements+=current} ('|' elements+=EnumLiteralDeclaration)+)?
; 

EnumLiteralDeclaration:
    enumLiteral=[ecore::EEnumLiteral] ('=' literal=Keyword)?
;
