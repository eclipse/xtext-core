/*******************************************************************************
 * Copyright (c) 2010, 2017 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
module org.eclipse.xtext.GenerateAllTestLanguages

import org.eclipse.emf.mwe2.runtime.workflow.Workflow
import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*

var projectName = "org.eclipse.xtext.tests"
var runtimeProject = "../${projectName}"
var lineDelimiter = '\n'

Workflow {
	bean = StandaloneSetup {
		ignoreBrokenProjectFiles = true
		platformUri = "${runtimeProject}/.."
		scanClassPath = true
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		}
		registerGenModelFile = "platform:/resource/${projectName}/src/org/eclipse/xtext/grammarinheritance/ametamodel.genmodel"
		registerGenModelFile = "platform:/resource/${projectName}/src/org/eclipse/xtext/generator/ecore/GenModelAccessTest.genmodel" 
		registerGenModelFile = "platform:/resource/${projectName}/src/org/eclipse/xtext/generator/ecore/Genmodel.genmodel"
		registerGenModelFile = "platform:/resource/${projectName}/src/org/eclipse/xtext/generator/grammarAccess/ametamodel.genmodel"
		registerGenModelFile = "platform:/resource/${projectName}/src/org/eclipse/xtext/enumrules/enums.genmodel"
		registerGenModelFile = "platform:/resource/${projectName}/src/org/eclipse/xtext/metamodelreferencing/tests/EcoreReferences.genmodel"
		registerGenModelFile = "platform:/resource/${projectName}/src/org/eclipse/xtext/linking/lazy/LazyLinkingTestLanguage.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext/org/eclipse/xtext/Xtext.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		
		registerGeneratedEPackage = "org.eclipse.xtext.grammarinheritance.ametamodel.AmetamodelPackage"
		registerGeneratedEPackage = "org.eclipse.xtext.linking.lazy.lazyLinking.LazyLinkingPackage"
		registerGeneratedEPackage = "org.eclipse.xtext.XtextPackage"
		registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"
	}
	
	bean = org.eclipse.xtext.testlanguages.ecore.EcoreSupport {}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/org.eclipse.xtext.tests/src/org/eclipse/xtext/generator/ecore/GenModelAccessTest.genmodel"
		srcPath = "foo"
		lineDelimiter = lineDelimiter
	}
	
	component = XtextGenerator {
		cleaner = {
			enabled = false
		}
		configuration = {
			project = model.project.StandardProjectConfig {
				baseName = projectName
				rootPath = ".."
				runtime = {
					manifest = {
						merge = false
					}
				}
				runtimeTest = {
					enabled = true
					manifest = {
						merge = false
					}
					root = runtimeProject
					src = "${runtimeProject}/src"
					srcGen = "${runtimeProject}/src-gen"
				}
			}
			code = {
				encoding = 'ISO-8859-1'
				lineDelimiter = lineDelimiter
				preferXtendStubs = false
			}
		}
		
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/generator/ecore/SuperTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				generateStub = true
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/generator/ecore/SubTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/XtextGrammarTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/lexer/BacktrackingLexerTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
				backtrackLexer = true
				memoize = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/lexer/IgnoreCaseLexerTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				ignoreCase = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/linking/lazy/LazyLinkingTestLanguage.xtext"
			fragment = junit.JUnitFragment {
				generateStub = false
			}
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/linking/Bug287988TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/linking/Bug289059TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/linking/Bug313089TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/linking/ImportUriTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/linking/LangATestLanguage.xtext"
			fragment = CompositeGeneratorFragment2 {
				fragment = @TestLanguagesFragments {
				}
				fragment = scoping.ImportNamespacesScopingFragment2 {
				}
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/linking/Bug362902.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/linking/AbstractIgnoreCaseLinkingTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
			fragment = xtext.generator.scoping.ImportNamespacesScopingFragment2 {
				ignoreCase = true
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/linking/IgnoreCaseNamespacesTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
			fragment = xtext.generator.scoping.ImportNamespacesScopingFragment2 {
				ignoreCase = true
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/linking/IgnoreCaseImportsTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
			fragment = tests.ImportURIScopingFragment2 {
				ignoreCase = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/linking/lazy/Bug311337TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/dummy/DummyTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/enumrules/EnumRulesTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/enumrules/EnumAndReferenceTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/enumrules/MultiRuleEnumTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}

		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/generator/ecore/EcoreFragmentTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				genModel = "/${projectName}/src/org/eclipse/xtext/generator/ecore/Genmodel.genmodel"
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/generator/grammarAccess/GrammarAccessTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/grammarinheritance/AbstractTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				generateStub = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/grammarinheritance/BaseInheritanceTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/grammarinheritance/ConcreteTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/grammarinheritance/InheritanceTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				generateStub = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/grammarinheritance/InheritanceTest2Language.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/grammarinheritance/InheritanceTest3Language.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/index/IndexTestLanguage.xtext"
			fragment = @TestLanguagesFragmentsQualifiedNames {}
		}
		language = {
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
			referencedResource = "platform:/resource/${projectName}/src/org/eclipse/xtext/metamodelreferencing/tests/EcorePerNsURI.ecore"
			referencedResource = "platform:/resource/${projectName}/src/org/eclipse/xtext/metamodelreferencing/tests/EcorePerPlatformPlugin.ecore"
			referencedResource = "platform:/resource/${projectName}/src/org/eclipse/xtext/metamodelreferencing/tests/EcorePerPlatformResource.ecore"
			grammarUri = "classpath:/org/eclipse/xtext/metamodelreferencing/tests/EcoreReferenceTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/metamodelreferencing/tests/MetamodelRefTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/metamodelreferencing/tests/MultiGenMMTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug289515TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug289524TestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug289524ExTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug296889TestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug296889ExTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug299237TestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				ignoreCase = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug301935TestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				generateStub = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug301935ExTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				ignoreCase = true
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug378967TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug406914TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/Bug443221TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/antlr/GH1462TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/assignments/AssignmentsTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/assignments/Bug287184TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/assignments/Bug288432TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/bug419429/Bug419429.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/datatyperules/DatatypeRulesTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/epatch/EpatchTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/fragments/FragmentTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {
				generateStub = true
			}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/fragments/FragmentTestLanguageEx.xtext"
			fragment = @TestLanguagesFragments auto-inject {
				generateStub = true
			}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/indentation/IndentationAwareTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {
				generateStub = true
			}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/keywords/KeywordsTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/parameters/ParametersTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/parameters/TwoParametersTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/parameters/NoParametersTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/parameters/ParametersTestLanguageEx.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/terminalrules/Bug292245TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/terminalrules/Bug297105TestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/terminalrules/Bug317840TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/terminalrules/EcoreTerminalsTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/terminalrules/HiddenTerminalsTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/terminalrules/TerminalRulesTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/terminalrules/UnicodeTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/terminalrules/XtextTerminalsTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/unorderedGroups/BacktrackingBug325745TestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
				generateStub = true
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/unorderedGroups/SimpleBacktrackingBug325745TestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/unorderedGroups/ExBacktrackingBug325745TestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				backtrack = true
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/formatting2/internal/FormatterTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/formatting2/regionaccess/internal/RegionAccessTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/formatter/FormatterTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/formatter/FormatterTestLanguage2.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/impl/Bug305397.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/serializer/HiddenTokenSequencerTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/serializer/SequencerTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
			fragment = junit.JUnitFragment {
				generateStub = false
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/serializer/SyntacticSequencerTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {
				generateStub = true
			}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/serializer/ContextFinderTestLanguage.xtext"
			fragment = @ TestLanguagesFragments auto-inject {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/serializer/AssignmentFinderTestLanguage.xtext"
			fragment = @ TestLanguagesFragments auto-inject {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/unassignedtext/UnassignedTextTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				generateStub = true
			}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/transientvalues/TransientValuesTest.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/ActionTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/ActionTestLanguage2.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/ActionTestLanguage3.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/FowlerDslTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/LookaheadTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/OptionalEmptyTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/PartialParserTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/ReferenceGrammarTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/SimpleExpressionsTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/TreeTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/valueconverter/Bug250313.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/valueconverter/QualifiedNameTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/xtext/ecoreInference/MultiValueFeatureTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/xtext/ecoreInference/UnassignedRuleCallTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/validation/ConcreteSyntaxValidationTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/resource/EObjectAtOffsetTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/resource/LocationProviderTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/resource/LiveContainerTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/resource/LiveContainerBuilderIntegerationTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
			fragment = builder.BuilderIntegrationFragment2 {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/resource/Bug385636TestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/parser/encoding/EncodingTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = { 
			grammarUri = "classpath:/org/eclipse/xtext/testlanguages/indent/IndentationAwareTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/unorderedGroups/UnorderedGroupsTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/unorderedGroups/SimpleUnorderedGroupsTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parser/unorderedGroups/ExUnorderedGroupsTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/impl/CommentAssociationTestLanguage.xtext"
			fragment = @org.eclipse.xtext.TestLanguagesFragments {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/reconstr/Bug299395TestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/reconstr/Bug302128TestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/reconstr/SerializationBug269362TestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/reconstr/ComplexReconstrTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
		}
		language = {
			grammarUri = "classpath:/org/eclipse/xtext/parsetree/reconstr/SerializationErrorTestLanguage.xtext"
			fragment = @TestLanguagesFragments auto-inject {}
		}
	}
}


