/*******************************************************************************
 * Copyright (c) 2008 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 *******************************************************************************/
grammar org.eclipse.xtext.parsetree.reconstr.ComplexReconstrTestLanguage with org.eclipse.xtext.common.Terminals

generate complexrewritetest "http://www.eclipse.org/2009/tmf/xtext/complexrewritetest"

Root: Op | TrickyG;

Op returns Expression: 
	Term ({Add.addOperands+=current} '+' addOperands+=Term | {Minus.minusOperands+=current} '-' minusOperands+=Term)*;
	
Term returns Expression:
	Atom | Parens ;
	
Atom: 
	name=ID;

/* SuppressWarnings[potentialOverride] */
Parens returns Expression: 
	'(' Op ')' em='!'?;

/* TODO not working yet
StrangeStuff :
	'->' (foo=ID)? ({OtherStuff.strangeStuff=current} ',' bla=ID)? ({OtherStuff2.stuff=current} ',' bla2=ID)?;
*/

// disabled, because of https://bugs.eclipse.org/bugs/show_bug.cgi?id=346685
//TrickyA returns TypeA1: 'TA' TrickyA1 (name += ID)* ({TypeB.x=current} 'x' | {TypeC.x=current} 'y')? name+=STRING;
//TrickyA1 returns TypeD: name+=ID;

/* SuppressWarnings[noInstantiation] */
TrickyB : 'TB' (name = ID type += INT)? (type += INT)*;

TrickyC : 'TC' name = ID ({C1.x=current} 'x')? ({C2.y=current} 'y')? ({C3.z=current} 'z')?;

/* SuppressWarnings[noInstantiation] */
TrickyD: 'TD' (name += INT foo = STRING type += ID)? (name += INT type += ID)? (type += ID)*;  

// 34 "abc" XX 123 "de" YY x 34 DD 45 CC
/* SuppressWarnings[noInstantiation] */
TrickyE: 'TE' (name+=INT foo+=STRING type+=ID)* 'x' (name+=INT type+=ID)*;

// 
TrickyF: 'TF' (name+=ID type+=INT)* (name+=ID | type+=INT);

TrickyG: 'TG' tree=TrickyG1;
/* SuppressWarnings[noInstantiation] */ 
TrickyG1: '[' (vals+=TrickyG2 (',' vals+=TrickyG2)*)? ']';
TrickyG2: TrickyG1 | val=INT;

//TrickyH: x+='a' TrickyH?; 


// TrickyG: TrickyG1 | TrickyG2;
// TrickyG1: name=TrickyG3;
// TrickyG2: name=TrickyG4;
// TrickyG3: val=ID {T.x=current} 'x';
// TrickyG4: val=INT {T.x=current} 'y';