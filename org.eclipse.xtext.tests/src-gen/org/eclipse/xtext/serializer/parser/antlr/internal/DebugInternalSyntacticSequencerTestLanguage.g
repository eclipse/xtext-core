/*
 * generated by Xtext
 */
grammar DebugInternalSyntacticSequencerTestLanguage ;

// Rule Model
ruleModel :
	ruleMandatoryKeywords |
	ruleExp0 |
	ruleExp1 |
	ruleExp2 |
	ruleSingleCrossReference |
	ruleBooleanAlternative |
	ruleUnassignedDatatype |
	ruleOptionalSingleTransition |
	ruleOptionalManyTransition |
	ruleMandatoryManyTransition |
	ruleAlternativeTransition |
	ruleBooleanValues |
	ruleLongAlternative |
	ruleActionOnly |
	ruleFragmentCaller
;

// Rule MandatoryKeywords
ruleMandatoryKeywords :
	'#1' RULE_ID 'kw1' RULE_ID 'kw2' 'kw3' RULE_ID 'kw4'
;

// Rule Exp0
ruleExp0 :
	'#2' ruleAddition0
;

// Rule Addition0
ruleAddition0 :
	rulePrim0 (
		'+' rulePrim0
	)*
;

// Rule Prim0
rulePrim0 :
	RULE_ID
;

// Rule Exp1
ruleExp1 :
	'#3' ruleAddition1
;

// Rule Addition1
ruleAddition1 :
	rulePrim1 (
		'+' rulePrim1
	)*
;

// Rule Prim1
rulePrim1 :
	RULE_ID |
	'(' ruleAddition1 ')'
;

// Rule Exp2
ruleExp2 :
	'#4' ruleAddition2
;

// Rule Addition2
ruleAddition2 :
	ruleMultiplication2 (
		'+' ruleMultiplication2
	)*
;

// Rule Multiplication2
ruleMultiplication2 :
	rulePrim2 (
		'*' rulePrim2
	)*
;

// Rule Prim2
rulePrim2 :
	RULE_ID |
	'(' ruleAddition2 ')'
;

// Rule DatatypeID
ruleDatatypeID :
	RULE_ID
;

// Rule SingleCrossReference
ruleSingleCrossReference :
	'#5' (
		RULE_TERMINAL_ID |
		RULE_ID
	) (
		'kw1' RULE_TERMINAL_ID
	)? (
		'kw2' ruleDatatypeID
	)? (
		'kw3' RULE_ID
	)? (
		'kw4' RULE_ID
	)?
;

// Rule BooleanAlternative
ruleBooleanAlternative :
	'#6' ruleBooleanAlternativeLiteral
;

// Rule BooleanAlternativeLiteral
ruleBooleanAlternativeLiteral :
	'kw1' |
	'kw2'
;

// Rule UnassignedDatatype
ruleUnassignedDatatype :
	'#7' RULE_ID ruleKW1
;

// Rule KW1
ruleKW1 :
	'kw1' |
	'matched' RULE_INT?
;

// Rule OptionalSingleTransition
ruleOptionalSingleTransition :
	'#8' ruleKW1? RULE_ID
;

// Rule OptionalManyTransition
ruleOptionalManyTransition :
	'#9' ruleKW1* RULE_ID
;

// Rule MandatoryManyTransition
ruleMandatoryManyTransition :
	'#10' ruleKW1+ RULE_ID
;

// Rule AlternativeTransition
ruleAlternativeTransition :
	'#11' (
		ruleKW1 |
		'kw2'
	) RULE_ID
;

// Rule BooleanDatatypeID
ruleBooleanDatatypeID :
	RULE_ID
;

// Rule BooleanValues
ruleBooleanValues :
	'#12' 'kw1'? RULE_BOOLEAN_TERMINAL_ID? ruleBooleanDatatypeID?
;

// Rule LongAlternative
ruleLongAlternative :
	'#13' RULE_ID (
		'kw1' RULE_ID? |
		'kw2' RULE_ID? |
		'kw3' RULE_ID? |
		'kw4' RULE_ID? |
		'kw5' RULE_ID? |
		'kw6' RULE_ID? |
		'kw7' RULE_ID? |
		'kw8' RULE_ID?
	)* '!'
;

// Rule ActionOnly
ruleActionOnly :
	'#14' 'kw1'? ( (
	RULE_ID
	) => RULE_ID )? 'kw2'? RULE_ID?
;

// Rule FragmentCaller
ruleFragmentCaller :
	'#15' RULE_ID ruleFragment1 RULE_ID
;

// Rule Fragment1
ruleFragment1 :
	RULE_ID
;

RULE_TERMINAL_ID :
	'$1' RULE_ID
;

RULE_BOOLEAN_TERMINAL_ID :
	'%1' RULE_ID
;

RULE_ID :
	'^'? (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_'
	) (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_' |
		'0' .. '9'
	)*
;

RULE_INT :
	'0' .. '9'+
;

RULE_STRING :
	'"' (
		'\\' . |
		~ (
			'\\' |
			'"'
		)
	)* '"' |
	'\'' (
		'\\' . |
		~ (
			'\\' |
			'\''
		)
	)* '\''
;

RULE_ML_COMMENT :
	'/*' (
		options { greedy = false ; } : .
	)* '*/' { skip(); }
;

RULE_SL_COMMENT :
	'//' ~ (
		'\n' |
		'\r'
	)* (
		'\r'? '\n'
	)? { skip(); }
;

RULE_WS :
	(
		' ' |
		'\t' |
		'\r' |
		'\n'
	)+ { skip(); }
;

RULE_ANY_OTHER :
	.
;