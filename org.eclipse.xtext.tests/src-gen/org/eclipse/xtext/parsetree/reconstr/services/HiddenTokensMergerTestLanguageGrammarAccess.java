/*
 * generated by Xtext
 */
package org.eclipse.xtext.parsetree.reconstr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class HiddenTokensMergerTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDatatypeBug286557ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumBugParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommentableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValueListParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRefListParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSingleRefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAppendToFileEndParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAction1ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Model:
		//	DatatypeBug286557 | EnumBug | Commentable | ValueList | RefList | SingleRef | AppendToFileEnd | Action1;
		@Override public ParserRule getRule() { return rule; }

		//DatatypeBug286557 | EnumBug | Commentable | ValueList | RefList | SingleRef | AppendToFileEnd | Action1
		public Alternatives getAlternatives() { return cAlternatives; }

		//DatatypeBug286557
		public RuleCall getDatatypeBug286557ParserRuleCall_0() { return cDatatypeBug286557ParserRuleCall_0; }

		//EnumBug
		public RuleCall getEnumBugParserRuleCall_1() { return cEnumBugParserRuleCall_1; }

		//Commentable
		public RuleCall getCommentableParserRuleCall_2() { return cCommentableParserRuleCall_2; }

		//ValueList
		public RuleCall getValueListParserRuleCall_3() { return cValueListParserRuleCall_3; }

		//RefList
		public RuleCall getRefListParserRuleCall_4() { return cRefListParserRuleCall_4; }

		//SingleRef
		public RuleCall getSingleRefParserRuleCall_5() { return cSingleRefParserRuleCall_5; }

		//AppendToFileEnd
		public RuleCall getAppendToFileEndParserRuleCall_6() { return cAppendToFileEndParserRuleCall_6; }

		//Action1
		public RuleCall getAction1ParserRuleCall_7() { return cAction1ParserRuleCall_7; }
	}

	public class DatatypeBug286557Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.DatatypeBug286557");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRefKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefDatatypeBug286557CrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefDatatypeBug286557FQNParserRuleCall_2_1_0_1 = (RuleCall)cRefDatatypeBug286557CrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DatatypeBug286557:
		//	'#1' name=FQN ('ref' ref=[DatatypeBug286557|FQN])? ";";
		@Override public ParserRule getRule() { return rule; }

		//'#1' name=FQN ('ref' ref=[DatatypeBug286557|FQN])? ";"
		public Group getGroup() { return cGroup; }

		//'#1'
		public Keyword getNumberSignDigitOneKeyword_0() { return cNumberSignDigitOneKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }

		//('ref' ref=[DatatypeBug286557|FQN])?
		public Group getGroup_2() { return cGroup_2; }

		//'ref'
		public Keyword getRefKeyword_2_0() { return cRefKeyword_2_0; }

		//ref=[DatatypeBug286557|FQN]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }

		//[DatatypeBug286557|FQN]
		public CrossReference getRefDatatypeBug286557CrossReference_2_1_0() { return cRefDatatypeBug286557CrossReference_2_1_0; }

		//FQN
		public RuleCall getRefDatatypeBug286557FQNParserRuleCall_2_1_0_1() { return cRefDatatypeBug286557FQNParserRuleCall_2_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class EnumBugElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.EnumBug");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cKw1Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnEnumBugEnumEnumRuleCall_2_0 = (RuleCall)cReturnAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//EnumBug:
		//	'#2' 'kw1' return=EnumBugEnum name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'#2' 'kw1' return=EnumBugEnum name=ID
		public Group getGroup() { return cGroup; }

		//'#2'
		public Keyword getNumberSignDigitTwoKeyword_0() { return cNumberSignDigitTwoKeyword_0; }

		//'kw1'
		public Keyword getKw1Keyword_1() { return cKw1Keyword_1; }

		//return=EnumBugEnum
		public Assignment getReturnAssignment_2() { return cReturnAssignment_2; }

		//EnumBugEnum
		public RuleCall getReturnEnumBugEnumEnumRuleCall_2_0() { return cReturnEnumBugEnumEnumRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class CommentableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.Commentable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemCommentableItemParserRuleCall_1_0 = (RuleCall)cItemAssignment_1.eContents().get(0);
		
		/// * SuppressWarnings[noInstantiation] * / Commentable:
		//	'#3' item+=CommentableItem*;
		@Override public ParserRule getRule() { return rule; }

		//'#3' item+=CommentableItem*
		public Group getGroup() { return cGroup; }

		//'#3'
		public Keyword getNumberSignDigitThreeKeyword_0() { return cNumberSignDigitThreeKeyword_0; }

		//item+=CommentableItem*
		public Assignment getItemAssignment_1() { return cItemAssignment_1; }

		//CommentableItem
		public RuleCall getItemCommentableItemParserRuleCall_1_0() { return cItemCommentableItemParserRuleCall_1_0; }
	}

	public class CommentableItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.CommentableItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//CommentableItem:
		//	'item' id=ID;
		@Override public ParserRule getRule() { return rule; }

		//'item' id=ID
		public Group getGroup() { return cGroup; }

		//'item'
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}

	public class ValueListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.ValueList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdsFQNParserRuleCall_1_0 = (RuleCall)cIdsAssignment_1.eContents().get(0);
		
		/// * SuppressWarnings[noInstantiation] * / ValueList:
		//	'#4' ids+=FQN*;
		@Override public ParserRule getRule() { return rule; }

		//'#4' ids+=FQN*
		public Group getGroup() { return cGroup; }

		//'#4'
		public Keyword getNumberSignDigitFourKeyword_0() { return cNumberSignDigitFourKeyword_0; }

		//ids+=FQN*
		public Assignment getIdsAssignment_1() { return cIdsAssignment_1; }

		//FQN
		public RuleCall getIdsFQNParserRuleCall_1_0() { return cIdsFQNParserRuleCall_1_0; }
	}

	public class RefListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.RefList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjsRefObjParserRuleCall_1_0 = (RuleCall)cObjsAssignment_1.eContents().get(0);
		private final Keyword cRefsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefsRefObjCrossReference_3_0 = (CrossReference)cRefsAssignment_3.eContents().get(0);
		private final RuleCall cRefsRefObjFQNParserRuleCall_3_0_1 = (RuleCall)cRefsRefObjCrossReference_3_0.eContents().get(1);
		
		/// * SuppressWarnings[noInstantiation] * / RefList:
		//	'#5' objs+=RefObj* 'refs' refs+=[RefObj|FQN]*;
		@Override public ParserRule getRule() { return rule; }

		//'#5' objs+=RefObj* 'refs' refs+=[RefObj|FQN]*
		public Group getGroup() { return cGroup; }

		//'#5'
		public Keyword getNumberSignDigitFiveKeyword_0() { return cNumberSignDigitFiveKeyword_0; }

		//objs+=RefObj*
		public Assignment getObjsAssignment_1() { return cObjsAssignment_1; }

		//RefObj
		public RuleCall getObjsRefObjParserRuleCall_1_0() { return cObjsRefObjParserRuleCall_1_0; }

		//'refs'
		public Keyword getRefsKeyword_2() { return cRefsKeyword_2; }

		//refs+=[RefObj|FQN]*
		public Assignment getRefsAssignment_3() { return cRefsAssignment_3; }

		//[RefObj|FQN]
		public CrossReference getRefsRefObjCrossReference_3_0() { return cRefsRefObjCrossReference_3_0; }

		//FQN
		public RuleCall getRefsRefObjFQNParserRuleCall_3_0_1() { return cRefsRefObjFQNParserRuleCall_3_0_1; }
	}

	public class RefObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.RefObj");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//RefObj:
		//	name=FQN;
		@Override public ParserRule getRule() { return rule; }

		//name=FQN
		public Assignment getNameAssignment() { return cNameAssignment; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_0() { return cNameFQNParserRuleCall_0; }
	}

	public class SingleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.SingleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjRefObjParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Keyword cRefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefRefObjCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefRefObjFQNParserRuleCall_3_0_1 = (RuleCall)cRefRefObjCrossReference_3_0.eContents().get(1);
		
		//SingleRef:
		//	'#6' obj=RefObj 'ref' ref=[RefObj|FQN];
		@Override public ParserRule getRule() { return rule; }

		//'#6' obj=RefObj 'ref' ref=[RefObj|FQN]
		public Group getGroup() { return cGroup; }

		//'#6'
		public Keyword getNumberSignDigitSixKeyword_0() { return cNumberSignDigitSixKeyword_0; }

		//obj=RefObj
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//RefObj
		public RuleCall getObjRefObjParserRuleCall_1_0() { return cObjRefObjParserRuleCall_1_0; }

		//'ref'
		public Keyword getRefKeyword_2() { return cRefKeyword_2; }

		//ref=[RefObj|FQN]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//[RefObj|FQN]
		public CrossReference getRefRefObjCrossReference_3_0() { return cRefRefObjCrossReference_3_0; }

		//FQN
		public RuleCall getRefRefObjFQNParserRuleCall_3_0_1() { return cRefRefObjFQNParserRuleCall_3_0_1; }
	}

	public class AppendToFileEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.AppendToFileEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSevenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsAppendToFileEndItemParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=297938
		/// * SuppressWarnings[noInstantiation] * / AppendToFileEnd:
		//	'#7' items+=AppendToFileEndItem*;
		@Override public ParserRule getRule() { return rule; }

		//'#7' items+=AppendToFileEndItem*
		public Group getGroup() { return cGroup; }

		//'#7'
		public Keyword getNumberSignDigitSevenKeyword_0() { return cNumberSignDigitSevenKeyword_0; }

		//items+=AppendToFileEndItem*
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//AppendToFileEndItem
		public RuleCall getItemsAppendToFileEndItemParserRuleCall_1_0() { return cItemsAppendToFileEndItemParserRuleCall_1_0; }
	}

	public class AppendToFileEndItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.AppendToFileEndItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEndclassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AppendToFileEndItem:
		//	'class' name=ID 'endclass';
		@Override public ParserRule getRule() { return rule; }

		//'class' name=ID 'endclass'
		public Group getGroup() { return cGroup; }

		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'endclass'
		public Keyword getEndclassKeyword_2() { return cEndclassKeyword_2; }
	}

	public class Action1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.Action1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitEightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAction1Action_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cActions2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActions2Action1Sub1ParserRuleCall_3_0 = (RuleCall)cActions2Assignment_3.eContents().get(0);
		private final Assignment cActions2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActions2Action1Sub2ParserRuleCall_4_0 = (RuleCall)cActions2Assignment_4.eContents().get(0);
		
		//Action1:
		//	'#8' {Action1} name=ID actions2+=Action1Sub1 actions2+=Action1Sub2;
		@Override public ParserRule getRule() { return rule; }

		//'#8' {Action1} name=ID actions2+=Action1Sub1 actions2+=Action1Sub2
		public Group getGroup() { return cGroup; }

		//'#8'
		public Keyword getNumberSignDigitEightKeyword_0() { return cNumberSignDigitEightKeyword_0; }

		//{Action1}
		public Action getAction1Action_1() { return cAction1Action_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//actions2+=Action1Sub1
		public Assignment getActions2Assignment_3() { return cActions2Assignment_3; }

		//Action1Sub1
		public RuleCall getActions2Action1Sub1ParserRuleCall_3_0() { return cActions2Action1Sub1ParserRuleCall_3_0; }

		//actions2+=Action1Sub2
		public Assignment getActions2Assignment_4() { return cActions2Assignment_4; }

		//Action1Sub2
		public RuleCall getActions2Action1Sub2ParserRuleCall_4_0() { return cActions2Action1Sub2ParserRuleCall_4_0; }
	}

	public class Action1Sub1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.Action1Sub1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAction1SubAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSub1Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Action1Sub1:
		//	{Action1Sub} "sub1";
		@Override public ParserRule getRule() { return rule; }

		//{Action1Sub} "sub1"
		public Group getGroup() { return cGroup; }

		//{Action1Sub}
		public Action getAction1SubAction_0() { return cAction1SubAction_0; }

		//"sub1"
		public Keyword getSub1Keyword_1() { return cSub1Keyword_1; }
	}

	public class Action1Sub2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.Action1Sub2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAction1SubClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSub2Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Action1Sub2:
		//	{Action1SubClass} "sub2";
		@Override public ParserRule getRule() { return rule; }

		//{Action1SubClass} "sub2"
		public Group getGroup() { return cGroup; }

		//{Action1SubClass}
		public Action getAction1SubClassAction_0() { return cAction1SubClassAction_0; }

		//"sub2"
		public Keyword getSub2Keyword_1() { return cSub2Keyword_1; }
	}
	
	
	public class EnumBugEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage.EnumBugEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cArrayEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cArrayArrayKeyword_0_0 = (Keyword)cArrayEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cObjectEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cObjectObjectKeyword_1_0 = (Keyword)cObjectEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cResultSetEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cResultSetResultSetKeyword_2_0 = (Keyword)cResultSetEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIteratorEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIteratorIteratorKeyword_3_0 = (Keyword)cIteratorEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum EnumBugEnum:
		//	array | object | resultSet | iterator;
		public EnumRule getRule() { return rule; }

		//array | object | resultSet | iterator
		public Alternatives getAlternatives() { return cAlternatives; }

		//array
		public EnumLiteralDeclaration getArrayEnumLiteralDeclaration_0() { return cArrayEnumLiteralDeclaration_0; }

		//"array"
		public Keyword getArrayArrayKeyword_0_0() { return cArrayArrayKeyword_0_0; }

		//object
		public EnumLiteralDeclaration getObjectEnumLiteralDeclaration_1() { return cObjectEnumLiteralDeclaration_1; }

		//"object"
		public Keyword getObjectObjectKeyword_1_0() { return cObjectObjectKeyword_1_0; }

		//resultSet
		public EnumLiteralDeclaration getResultSetEnumLiteralDeclaration_2() { return cResultSetEnumLiteralDeclaration_2; }

		//"resultSet"
		public Keyword getResultSetResultSetKeyword_2_0() { return cResultSetResultSetKeyword_2_0; }

		//iterator
		public EnumLiteralDeclaration getIteratorEnumLiteralDeclaration_3() { return cIteratorEnumLiteralDeclaration_3; }

		//"iterator"
		public Keyword getIteratorIteratorKeyword_3_0() { return cIteratorIteratorKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final DatatypeBug286557Elements pDatatypeBug286557;
	private final FQNElements pFQN;
	private final EnumBugElements pEnumBug;
	private final EnumBugEnumElements eEnumBugEnum;
	private final CommentableElements pCommentable;
	private final CommentableItemElements pCommentableItem;
	private final ValueListElements pValueList;
	private final RefListElements pRefList;
	private final RefObjElements pRefObj;
	private final SingleRefElements pSingleRef;
	private final AppendToFileEndElements pAppendToFileEnd;
	private final AppendToFileEndItemElements pAppendToFileEndItem;
	private final Action1Elements pAction1;
	private final Action1Sub1Elements pAction1Sub1;
	private final Action1Sub2Elements pAction1Sub2;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HiddenTokensMergerTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDatatypeBug286557 = new DatatypeBug286557Elements();
		this.pFQN = new FQNElements();
		this.pEnumBug = new EnumBugElements();
		this.eEnumBugEnum = new EnumBugEnumElements();
		this.pCommentable = new CommentableElements();
		this.pCommentableItem = new CommentableItemElements();
		this.pValueList = new ValueListElements();
		this.pRefList = new RefListElements();
		this.pRefObj = new RefObjElements();
		this.pSingleRef = new SingleRefElements();
		this.pAppendToFileEnd = new AppendToFileEndElements();
		this.pAppendToFileEndItem = new AppendToFileEndItemElements();
		this.pAction1 = new Action1Elements();
		this.pAction1Sub1 = new Action1Sub1Elements();
		this.pAction1Sub2 = new Action1Sub2Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parsetree.reconstr.HiddenTokensMergerTestLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	DatatypeBug286557 | EnumBug | Commentable | ValueList | RefList | SingleRef | AppendToFileEnd | Action1;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//DatatypeBug286557:
	//	'#1' name=FQN ('ref' ref=[DatatypeBug286557|FQN])? ";";
	public DatatypeBug286557Elements getDatatypeBug286557Access() {
		return pDatatypeBug286557;
	}
	
	public ParserRule getDatatypeBug286557Rule() {
		return getDatatypeBug286557Access().getRule();
	}

	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//EnumBug:
	//	'#2' 'kw1' return=EnumBugEnum name=ID;
	public EnumBugElements getEnumBugAccess() {
		return pEnumBug;
	}
	
	public ParserRule getEnumBugRule() {
		return getEnumBugAccess().getRule();
	}

	//enum EnumBugEnum:
	//	array | object | resultSet | iterator;
	public EnumBugEnumElements getEnumBugEnumAccess() {
		return eEnumBugEnum;
	}
	
	public EnumRule getEnumBugEnumRule() {
		return getEnumBugEnumAccess().getRule();
	}

	/// * SuppressWarnings[noInstantiation] * / Commentable:
	//	'#3' item+=CommentableItem*;
	public CommentableElements getCommentableAccess() {
		return pCommentable;
	}
	
	public ParserRule getCommentableRule() {
		return getCommentableAccess().getRule();
	}

	//CommentableItem:
	//	'item' id=ID;
	public CommentableItemElements getCommentableItemAccess() {
		return pCommentableItem;
	}
	
	public ParserRule getCommentableItemRule() {
		return getCommentableItemAccess().getRule();
	}

	/// * SuppressWarnings[noInstantiation] * / ValueList:
	//	'#4' ids+=FQN*;
	public ValueListElements getValueListAccess() {
		return pValueList;
	}
	
	public ParserRule getValueListRule() {
		return getValueListAccess().getRule();
	}

	/// * SuppressWarnings[noInstantiation] * / RefList:
	//	'#5' objs+=RefObj* 'refs' refs+=[RefObj|FQN]*;
	public RefListElements getRefListAccess() {
		return pRefList;
	}
	
	public ParserRule getRefListRule() {
		return getRefListAccess().getRule();
	}

	//RefObj:
	//	name=FQN;
	public RefObjElements getRefObjAccess() {
		return pRefObj;
	}
	
	public ParserRule getRefObjRule() {
		return getRefObjAccess().getRule();
	}

	//SingleRef:
	//	'#6' obj=RefObj 'ref' ref=[RefObj|FQN];
	public SingleRefElements getSingleRefAccess() {
		return pSingleRef;
	}
	
	public ParserRule getSingleRefRule() {
		return getSingleRefAccess().getRule();
	}

	//// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=297938
	/// * SuppressWarnings[noInstantiation] * / AppendToFileEnd:
	//	'#7' items+=AppendToFileEndItem*;
	public AppendToFileEndElements getAppendToFileEndAccess() {
		return pAppendToFileEnd;
	}
	
	public ParserRule getAppendToFileEndRule() {
		return getAppendToFileEndAccess().getRule();
	}

	//AppendToFileEndItem:
	//	'class' name=ID 'endclass';
	public AppendToFileEndItemElements getAppendToFileEndItemAccess() {
		return pAppendToFileEndItem;
	}
	
	public ParserRule getAppendToFileEndItemRule() {
		return getAppendToFileEndItemAccess().getRule();
	}

	//Action1:
	//	'#8' {Action1} name=ID actions2+=Action1Sub1 actions2+=Action1Sub2;
	public Action1Elements getAction1Access() {
		return pAction1;
	}
	
	public ParserRule getAction1Rule() {
		return getAction1Access().getRule();
	}

	//Action1Sub1:
	//	{Action1Sub} "sub1";
	public Action1Sub1Elements getAction1Sub1Access() {
		return pAction1Sub1;
	}
	
	public ParserRule getAction1Sub1Rule() {
		return getAction1Sub1Access().getRule();
	}

	//Action1Sub2:
	//	{Action1SubClass} "sub2";
	public Action1Sub2Elements getAction1Sub2Access() {
		return pAction1Sub2;
	}
	
	public ParserRule getAction1Sub2Rule() {
		return getAction1Sub2Access().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
