/*
 * generated by Xtext
 */
package org.eclipse.xtext.parsetree.reconstr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleReconstrTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class OpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOpValuesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesTermParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//Op Expression:
		//	Term ({Op.values+=current} values+=Term)*
		@Override public ParserRule getRule() { return rule; }

		//Term ({Op.values+=current} values+=Term)*
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//({Op.values+=current} values+=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//{Op.values+=current}
		public Action getOpValuesAction_1_0() { return cOpValuesAction_1_0; }

		//values+=Term
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//Term
		public RuleCall getValuesTermParserRuleCall_1_1_0() { return cValuesTermParserRuleCall_1_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTwoNumbersParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManyStringsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRef2ParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSpareParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBooleanParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTransient1ParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cConsumed1ParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cConsumed2ParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLoop1ParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLoop2ParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLoop3ParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLoop4ParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLoopBug285452ParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cDuplicateBug284491ParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cEmptyObjectBug284850ParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cMultiInheritanceBug280439ParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cEObjectRefParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cTypeBug305577_1ParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cTypeBug305577_2ParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cParensParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cBug305171ParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cBug310435ValParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cBug310435EnumParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cCrossRefNameTestParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		
		//Term Expression:
		//	Atom | TwoNumbers | ManyStrings | Type | Ref2 | Spare | Boolean | Transient1 | Consumed1 | Consumed2 | Loop1 | Loop2 |
		//	Loop3 | Loop4 | LoopBug285452 | DuplicateBug284491 | EmptyObjectBug284850 | MultiInheritanceBug280439 | EObjectRef |
		//	TypeBug305577_1 | TypeBug305577_2 | Parens | Bug305171 | Bug310435Val | Bug310435Enum | CrossRefNameTest
		@Override public ParserRule getRule() { return rule; }

		//Atom | TwoNumbers | ManyStrings | Type | Ref2 | Spare | Boolean | Transient1 | Consumed1 | Consumed2 | Loop1 | Loop2 |
		//Loop3 | Loop4 | LoopBug285452 | DuplicateBug284491 | EmptyObjectBug284850 | MultiInheritanceBug280439 | EObjectRef |
		//TypeBug305577_1 | TypeBug305577_2 | Parens | Bug305171 | Bug310435Val | Bug310435Enum | CrossRefNameTest
		public Alternatives getAlternatives() { return cAlternatives; }

		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }

		//TwoNumbers
		public RuleCall getTwoNumbersParserRuleCall_1() { return cTwoNumbersParserRuleCall_1; }

		//ManyStrings
		public RuleCall getManyStringsParserRuleCall_2() { return cManyStringsParserRuleCall_2; }

		//Type
		public RuleCall getTypeParserRuleCall_3() { return cTypeParserRuleCall_3; }

		//Ref2
		public RuleCall getRef2ParserRuleCall_4() { return cRef2ParserRuleCall_4; }

		//Spare
		public RuleCall getSpareParserRuleCall_5() { return cSpareParserRuleCall_5; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_6() { return cBooleanParserRuleCall_6; }

		//Transient1
		public RuleCall getTransient1ParserRuleCall_7() { return cTransient1ParserRuleCall_7; }

		//Consumed1
		public RuleCall getConsumed1ParserRuleCall_8() { return cConsumed1ParserRuleCall_8; }

		//Consumed2
		public RuleCall getConsumed2ParserRuleCall_9() { return cConsumed2ParserRuleCall_9; }

		//Loop1
		public RuleCall getLoop1ParserRuleCall_10() { return cLoop1ParserRuleCall_10; }

		//Loop2
		public RuleCall getLoop2ParserRuleCall_11() { return cLoop2ParserRuleCall_11; }

		//Loop3
		public RuleCall getLoop3ParserRuleCall_12() { return cLoop3ParserRuleCall_12; }

		//Loop4
		public RuleCall getLoop4ParserRuleCall_13() { return cLoop4ParserRuleCall_13; }

		//LoopBug285452
		public RuleCall getLoopBug285452ParserRuleCall_14() { return cLoopBug285452ParserRuleCall_14; }

		//DuplicateBug284491
		public RuleCall getDuplicateBug284491ParserRuleCall_15() { return cDuplicateBug284491ParserRuleCall_15; }

		//EmptyObjectBug284850
		public RuleCall getEmptyObjectBug284850ParserRuleCall_16() { return cEmptyObjectBug284850ParserRuleCall_16; }

		//MultiInheritanceBug280439
		public RuleCall getMultiInheritanceBug280439ParserRuleCall_17() { return cMultiInheritanceBug280439ParserRuleCall_17; }

		//EObjectRef
		public RuleCall getEObjectRefParserRuleCall_18() { return cEObjectRefParserRuleCall_18; }

		//TypeBug305577_1
		public RuleCall getTypeBug305577_1ParserRuleCall_19() { return cTypeBug305577_1ParserRuleCall_19; }

		//TypeBug305577_2
		public RuleCall getTypeBug305577_2ParserRuleCall_20() { return cTypeBug305577_2ParserRuleCall_20; }

		//Parens
		public RuleCall getParensParserRuleCall_21() { return cParensParserRuleCall_21; }

		//Bug305171
		public RuleCall getBug305171ParserRuleCall_22() { return cBug305171ParserRuleCall_22; }

		//Bug310435Val
		public RuleCall getBug310435ValParserRuleCall_23() { return cBug310435ValParserRuleCall_23; }

		//Bug310435Enum
		public RuleCall getBug310435EnumParserRuleCall_24() { return cBug310435EnumParserRuleCall_24; }

		//CrossRefNameTest
		public RuleCall getCrossRefNameTestParserRuleCall_25() { return cCrossRefNameTestParserRuleCall_25; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Atom");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Atom:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ParensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Parens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cEmExclamationMarkKeyword_3_0 = (Keyword)cEmAssignment_3.eContents().get(0);
		
		/// * SuppressWarnings[potentialOverride] * / Parens Expression:
		//	'(' Op ')' em='!'?
		@Override public ParserRule getRule() { return rule; }

		//'(' Op ')' em='!'?
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Op
		public RuleCall getOpParserRuleCall_1() { return cOpParserRuleCall_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//em='!'?
		public Assignment getEmAssignment_3() { return cEmAssignment_3; }

		//'!'
		public Keyword getEmExclamationMarkKeyword_3_0() { return cEmExclamationMarkKeyword_3_0; }
	}

	public class TwoNumbersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TwoNumbers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNum1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNum1INTTerminalRuleCall_0_0 = (RuleCall)cNum1Assignment_0.eContents().get(0);
		private final Assignment cNum2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNum2INTTerminalRuleCall_1_0 = (RuleCall)cNum2Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNum3Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNum3INTTerminalRuleCall_2_1_0 = (RuleCall)cNum3Assignment_2_1.eContents().get(0);
		
		//TwoNumbers:
		//	num1=INT num2=INT ('#' num3+=INT)*;
		@Override public ParserRule getRule() { return rule; }

		//num1=INT num2=INT ('#' num3+=INT)*
		public Group getGroup() { return cGroup; }

		//num1=INT
		public Assignment getNum1Assignment_0() { return cNum1Assignment_0; }

		//INT
		public RuleCall getNum1INTTerminalRuleCall_0_0() { return cNum1INTTerminalRuleCall_0_0; }

		//num2=INT
		public Assignment getNum2Assignment_1() { return cNum2Assignment_1; }

		//INT
		public RuleCall getNum2INTTerminalRuleCall_1_0() { return cNum2INTTerminalRuleCall_1_0; }

		//('#' num3+=INT)*
		public Group getGroup_2() { return cGroup_2; }

		//'#'
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//num3+=INT
		public Assignment getNum3Assignment_2_1() { return cNum3Assignment_2_1; }

		//INT
		public RuleCall getNum3INTTerminalRuleCall_2_1_0() { return cNum3INTTerminalRuleCall_2_1_0; }
	}

	public class ManyStringsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.ManyStrings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStr1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStr1STRINGTerminalRuleCall_1_0 = (RuleCall)cStr1Assignment_1.eContents().get(0);
		private final Assignment cStr2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStr2STRINGTerminalRuleCall_2_0 = (RuleCall)cStr2Assignment_2.eContents().get(0);
		
		//ManyStrings:
		//	'=' str1+=STRING* str2+=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'=' str1+=STRING* str2+=STRING
		public Group getGroup() { return cGroup; }

		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//str1+=STRING*
		public Assignment getStr1Assignment_1() { return cStr1Assignment_1; }

		//STRING
		public RuleCall getStr1STRINGTerminalRuleCall_1_0() { return cStr1STRINGTerminalRuleCall_1_0; }

		//str2+=STRING
		public Assignment getStr2Assignment_2() { return cStr2Assignment_2; }

		//STRING
		public RuleCall getStr2STRINGTerminalRuleCall_2_0() { return cStr2STRINGTerminalRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExtendsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExtendsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cExtendsTypeCrossReference_3_0 = (CrossReference)cExtendsAssignment_3.eContents().get(0);
		private final RuleCall cExtendsTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cExtendsTypeCrossReference_3_0.eContents().get(1);
		
		//Type:
		//	'type' name=ID 'extends' ^extends=[Type];
		@Override public ParserRule getRule() { return rule; }

		//'type' name=ID 'extends' ^extends=[Type]
		public Group getGroup() { return cGroup; }

		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'extends'
		public Keyword getExtendsKeyword_2() { return cExtendsKeyword_2; }

		//^extends=[Type]
		public Assignment getExtendsAssignment_3() { return cExtendsAssignment_3; }

		//[Type]
		public CrossReference getExtendsTypeCrossReference_3_0() { return cExtendsTypeCrossReference_3_0; }

		//ID
		public RuleCall getExtendsTypeIDTerminalRuleCall_3_0_1() { return cExtendsTypeIDTerminalRuleCall_3_0_1; }
	}

	public class Ref2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Ref2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRef2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRef2Alternatives_1_0 = (Alternatives)cRef2Assignment_1.eContents().get(0);
		private final Keyword cRef2Mykeyword1Keyword_1_0_0 = (Keyword)cRef2Alternatives_1_0.eContents().get(0);
		private final RuleCall cRef2STRINGTerminalRuleCall_1_0_1 = (RuleCall)cRef2Alternatives_1_0.eContents().get(1);
		private final Keyword cRef2Mykeyword2Keyword_1_0_2 = (Keyword)cRef2Alternatives_1_0.eContents().get(2);
		
		//Ref2:
		//	'#2' ref2=('mykeyword1' | STRING | 'mykeyword2');
		@Override public ParserRule getRule() { return rule; }

		//'#2' ref2=('mykeyword1' | STRING | 'mykeyword2')
		public Group getGroup() { return cGroup; }

		//'#2'
		public Keyword getNumberSignDigitTwoKeyword_0() { return cNumberSignDigitTwoKeyword_0; }

		//ref2=('mykeyword1' | STRING | 'mykeyword2')
		public Assignment getRef2Assignment_1() { return cRef2Assignment_1; }

		//('mykeyword1' | STRING | 'mykeyword2')
		public Alternatives getRef2Alternatives_1_0() { return cRef2Alternatives_1_0; }

		//'mykeyword1'
		public Keyword getRef2Mykeyword1Keyword_1_0_0() { return cRef2Mykeyword1Keyword_1_0_0; }

		//STRING
		public RuleCall getRef2STRINGTerminalRuleCall_1_0_1() { return cRef2STRINGTerminalRuleCall_1_0_1; }

		//'mykeyword2'
		public Keyword getRef2Mykeyword2Keyword_1_0_2() { return cRef2Mykeyword2Keyword_1_0_2; }
	}

	public class SpareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Spare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_2_1_0 = (RuleCall)cIdAssignment_2_1.eContents().get(0);
		
		//Spare:
		//	'#3' id+=ID ('.' id+=ID)*;
		@Override public ParserRule getRule() { return rule; }

		//'#3' id+=ID ('.' id+=ID)*
		public Group getGroup() { return cGroup; }

		//'#3'
		public Keyword getNumberSignDigitThreeKeyword_0() { return cNumberSignDigitThreeKeyword_0; }

		//id+=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//('.' id+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//id+=ID
		public Assignment getIdAssignment_2_1() { return cIdAssignment_2_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_1_0() { return cIdIDTerminalRuleCall_2_1_0; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBoolMyoptionKeyword_1_0 = (Keyword)cBoolAssignment_1.eContents().get(0);
		private final Keyword cKwKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIDTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Boolean:
		//	'#4' bool?='myoption'? 'kw' value=ID;
		@Override public ParserRule getRule() { return rule; }

		//'#4' bool?='myoption'? 'kw' value=ID
		public Group getGroup() { return cGroup; }

		//'#4'
		public Keyword getNumberSignDigitFourKeyword_0() { return cNumberSignDigitFourKeyword_0; }

		//bool?='myoption'?
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }

		//'myoption'
		public Keyword getBoolMyoptionKeyword_1_0() { return cBoolMyoptionKeyword_1_0; }

		//'kw'
		public Keyword getKwKeyword_2() { return cKwKeyword_2; }

		//value=ID
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_3_0() { return cValueIDTerminalRuleCall_3_0; }
	}

	public class Transient1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Transient1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPrecStarAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cPrecStarAsteriskKeyword_1_0_0 = (Keyword)cPrecStarAssignment_1_0.eContents().get(0);
		private final Assignment cPrecAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPrecINTTerminalRuleCall_1_1_0 = (RuleCall)cPrecAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cScaleStarAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final Keyword cScaleStarAsteriskKeyword_2_1_0_0 = (Keyword)cScaleStarAssignment_2_1_0.eContents().get(0);
		private final Assignment cScaleAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cScaleINTTerminalRuleCall_2_1_1_0 = (RuleCall)cScaleAssignment_2_1_1.eContents().get(0);
		
		//Transient1:
		//	'#5' (precStar?='*' | prec=INT) (',' (scaleStar?='*' | scale=INT))?;
		@Override public ParserRule getRule() { return rule; }

		//'#5' (precStar?='*' | prec=INT) (',' (scaleStar?='*' | scale=INT))?
		public Group getGroup() { return cGroup; }

		//'#5'
		public Keyword getNumberSignDigitFiveKeyword_0() { return cNumberSignDigitFiveKeyword_0; }

		//(precStar?='*' | prec=INT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//precStar?='*'
		public Assignment getPrecStarAssignment_1_0() { return cPrecStarAssignment_1_0; }

		//'*'
		public Keyword getPrecStarAsteriskKeyword_1_0_0() { return cPrecStarAsteriskKeyword_1_0_0; }

		//prec=INT
		public Assignment getPrecAssignment_1_1() { return cPrecAssignment_1_1; }

		//INT
		public RuleCall getPrecINTTerminalRuleCall_1_1_0() { return cPrecINTTerminalRuleCall_1_1_0; }

		//(',' (scaleStar?='*' | scale=INT))?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//(scaleStar?='*' | scale=INT)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//scaleStar?='*'
		public Assignment getScaleStarAssignment_2_1_0() { return cScaleStarAssignment_2_1_0; }

		//'*'
		public Keyword getScaleStarAsteriskKeyword_2_1_0_0() { return cScaleStarAsteriskKeyword_2_1_0_0; }

		//scale=INT
		public Assignment getScaleAssignment_2_1_1() { return cScaleAssignment_2_1_1; }

		//INT
		public RuleCall getScaleINTTerminalRuleCall_2_1_1_0() { return cScaleINTTerminalRuleCall_2_1_1_0; }
	}

	public class Consumed1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Consumed1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cV1Keyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cV1Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cV1INTTerminalRuleCall_1_0_1_0 = (RuleCall)cV1Assignment_1_0_1.eContents().get(0);
		private final Assignment cV2Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cV2IDTerminalRuleCall_1_0_2_0 = (RuleCall)cV2Assignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cV2Keyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cV2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cV2IDTerminalRuleCall_1_1_1_0 = (RuleCall)cV2Assignment_1_1_1.eContents().get(0);
		private final Assignment cV1Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cV1INTTerminalRuleCall_1_1_2_0 = (RuleCall)cV1Assignment_1_1_2.eContents().get(0);
		
		//Consumed1:
		//	'#6' ('v1' v1+=INT* v2+=ID | 'v2' v2+=ID* v1+=INT);
		@Override public ParserRule getRule() { return rule; }

		//'#6' ('v1' v1+=INT* v2+=ID | 'v2' v2+=ID* v1+=INT)
		public Group getGroup() { return cGroup; }

		//'#6'
		public Keyword getNumberSignDigitSixKeyword_0() { return cNumberSignDigitSixKeyword_0; }

		//('v1' v1+=INT* v2+=ID | 'v2' v2+=ID* v1+=INT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'v1' v1+=INT* v2+=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'v1'
		public Keyword getV1Keyword_1_0_0() { return cV1Keyword_1_0_0; }

		//v1+=INT*
		public Assignment getV1Assignment_1_0_1() { return cV1Assignment_1_0_1; }

		//INT
		public RuleCall getV1INTTerminalRuleCall_1_0_1_0() { return cV1INTTerminalRuleCall_1_0_1_0; }

		//v2+=ID
		public Assignment getV2Assignment_1_0_2() { return cV2Assignment_1_0_2; }

		//ID
		public RuleCall getV2IDTerminalRuleCall_1_0_2_0() { return cV2IDTerminalRuleCall_1_0_2_0; }

		//'v2' v2+=ID* v1+=INT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'v2'
		public Keyword getV2Keyword_1_1_0() { return cV2Keyword_1_1_0; }

		//v2+=ID*
		public Assignment getV2Assignment_1_1_1() { return cV2Assignment_1_1_1; }

		//ID
		public RuleCall getV2IDTerminalRuleCall_1_1_1_0() { return cV2IDTerminalRuleCall_1_1_1_0; }

		//v1+=INT
		public Assignment getV1Assignment_1_1_2() { return cV1Assignment_1_1_2; }

		//INT
		public RuleCall getV1INTTerminalRuleCall_1_1_2_0() { return cV1INTTerminalRuleCall_1_1_2_0; }
	}

	public class Consumed2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Consumed2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSevenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChildAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildConsumed1ParserRuleCall_1_0 = (RuleCall)cChildAssignment_1.eContents().get(0);
		
		//Consumed2:
		//	'#7' child=Consumed1;
		@Override public ParserRule getRule() { return rule; }

		//'#7' child=Consumed1
		public Group getGroup() { return cGroup; }

		//'#7'
		public Keyword getNumberSignDigitSevenKeyword_0() { return cNumberSignDigitSevenKeyword_0; }

		//child=Consumed1
		public Assignment getChildAssignment_1() { return cChildAssignment_1; }

		//Consumed1
		public RuleCall getChildConsumed1ParserRuleCall_1_0() { return cChildConsumed1ParserRuleCall_1_0; }
	}

	public class Loop1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Loop1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKw0Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNumberSignDigitEightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cKw1Keyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cKw2Keyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cKw30Keyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//Loop1:
		//	'kw0'? '#8' id+=ID 'kw1'? id+=ID ('kw2'* 'kw30')+;
		@Override public ParserRule getRule() { return rule; }

		//'kw0'? '#8' id+=ID 'kw1'? id+=ID ('kw2'* 'kw30')+
		public Group getGroup() { return cGroup; }

		//'kw0'?
		public Keyword getKw0Keyword_0() { return cKw0Keyword_0; }

		//'#8'
		public Keyword getNumberSignDigitEightKeyword_1() { return cNumberSignDigitEightKeyword_1; }

		//id+=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//'kw1'?
		public Keyword getKw1Keyword_3() { return cKw1Keyword_3; }

		//id+=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }

		//('kw2'* 'kw30')+
		public Group getGroup_5() { return cGroup_5; }

		//'kw2'*
		public Keyword getKw2Keyword_5_0() { return cKw2Keyword_5_0; }

		//'kw30'
		public Keyword getKw30Keyword_5_1() { return cKw30Keyword_5_1; }
	}

	public class Loop2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Loop2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitNineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cKw1Keyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cIdAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_2_1_0_0 = (RuleCall)cIdAssignment_2_1_0.eContents().get(0);
		private final Keyword cKw2Keyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cKw3Keyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cIdAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_3_1_0_0 = (RuleCall)cIdAssignment_3_1_0.eContents().get(0);
		private final Keyword cKw4Keyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cKw5Keyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cKw6Keyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//Loop2:
		//	'#9' id+=ID ('kw1' | id+=ID 'kw2') ('kw3' | id+=ID 'kw4')? ('kw5' | 'kw6');
		@Override public ParserRule getRule() { return rule; }

		//'#9' id+=ID ('kw1' | id+=ID 'kw2') ('kw3' | id+=ID 'kw4')? ('kw5' | 'kw6')
		public Group getGroup() { return cGroup; }

		//'#9'
		public Keyword getNumberSignDigitNineKeyword_0() { return cNumberSignDigitNineKeyword_0; }

		//id+=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//('kw1' | id+=ID 'kw2')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//'kw1'
		public Keyword getKw1Keyword_2_0() { return cKw1Keyword_2_0; }

		//id+=ID 'kw2'
		public Group getGroup_2_1() { return cGroup_2_1; }

		//id+=ID
		public Assignment getIdAssignment_2_1_0() { return cIdAssignment_2_1_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_1_0_0() { return cIdIDTerminalRuleCall_2_1_0_0; }

		//'kw2'
		public Keyword getKw2Keyword_2_1_1() { return cKw2Keyword_2_1_1; }

		//('kw3' | id+=ID 'kw4')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//'kw3'
		public Keyword getKw3Keyword_3_0() { return cKw3Keyword_3_0; }

		//id+=ID 'kw4'
		public Group getGroup_3_1() { return cGroup_3_1; }

		//id+=ID
		public Assignment getIdAssignment_3_1_0() { return cIdAssignment_3_1_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_1_0_0() { return cIdIDTerminalRuleCall_3_1_0_0; }

		//'kw4'
		public Keyword getKw4Keyword_3_1_1() { return cKw4Keyword_3_1_1; }

		//('kw5' | 'kw6')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//'kw5'
		public Keyword getKw5Keyword_4_0() { return cKw5Keyword_4_0; }

		//'kw6'
		public Keyword getKw6Keyword_4_1() { return cKw6Keyword_4_1; }
	}

	public class Loop3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Loop3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cKw1Keyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cKw2Keyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cKw3Keyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cNumberSignDigitOneDigitZeroKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKw4Keyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_3_1_0 = (RuleCall)cIdAssignment_3_1.eContents().get(0);
		private final Keyword cKw5Keyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Loop3:
		//	('kw1' | 'kw2' | 'kw3') '#10' id+=ID ('kw4' id+=ID 'kw5')*;
		@Override public ParserRule getRule() { return rule; }

		//('kw1' | 'kw2' | 'kw3') '#10' id+=ID ('kw4' id+=ID 'kw5')*
		public Group getGroup() { return cGroup; }

		//('kw1' | 'kw2' | 'kw3')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'kw1'
		public Keyword getKw1Keyword_0_0() { return cKw1Keyword_0_0; }

		//'kw2'
		public Keyword getKw2Keyword_0_1() { return cKw2Keyword_0_1; }

		//'kw3'
		public Keyword getKw3Keyword_0_2() { return cKw3Keyword_0_2; }

		//'#10'
		public Keyword getNumberSignDigitOneDigitZeroKeyword_1() { return cNumberSignDigitOneDigitZeroKeyword_1; }

		//id+=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//('kw4' id+=ID 'kw5')*
		public Group getGroup_3() { return cGroup_3; }

		//'kw4'
		public Keyword getKw4Keyword_3_0() { return cKw4Keyword_3_0; }

		//id+=ID
		public Assignment getIdAssignment_3_1() { return cIdAssignment_3_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_1_0() { return cIdIDTerminalRuleCall_3_1_0; }

		//'kw5'
		public Keyword getKw5Keyword_3_2() { return cKw5Keyword_3_2; }
	}

	public class Loop4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Loop4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cKw1Keyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cKw2Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cKw3Keyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cKw4Keyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKw5Keyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cKw6Keyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cKw7Keyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		
		//Loop4:
		//	'#11' ('kw1' | 'kw2' | 'kw3' 'kw4') id+=ID ('kw5' ('kw6' 'kw7'?)?)+;
		@Override public ParserRule getRule() { return rule; }

		//'#11' ('kw1' | 'kw2' | 'kw3' 'kw4') id+=ID ('kw5' ('kw6' 'kw7'?)?)+
		public Group getGroup() { return cGroup; }

		//'#11'
		public Keyword getNumberSignDigitOneDigitOneKeyword_0() { return cNumberSignDigitOneDigitOneKeyword_0; }

		//('kw1' | 'kw2' | 'kw3' 'kw4')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'kw1'
		public Keyword getKw1Keyword_1_0() { return cKw1Keyword_1_0; }

		//'kw2'
		public Keyword getKw2Keyword_1_1() { return cKw2Keyword_1_1; }

		//'kw3' 'kw4'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'kw3'
		public Keyword getKw3Keyword_1_2_0() { return cKw3Keyword_1_2_0; }

		//'kw4'
		public Keyword getKw4Keyword_1_2_1() { return cKw4Keyword_1_2_1; }

		//id+=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//('kw5' ('kw6' 'kw7'?)?)+
		public Group getGroup_3() { return cGroup_3; }

		//'kw5'
		public Keyword getKw5Keyword_3_0() { return cKw5Keyword_3_0; }

		//('kw6' 'kw7'?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//'kw6'
		public Keyword getKw6Keyword_3_1_0() { return cKw6Keyword_3_1_0; }

		//'kw7'?
		public Keyword getKw7Keyword_3_1_1() { return cKw7Keyword_3_1_1; }
	}

	public class LoopBug285452Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.LoopBug285452");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInterfaceAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cInterfaceInterfaceKeyword_1_0_0 = (Keyword)cInterfaceAssignment_1_0.eContents().get(0);
		private final Keyword cClassKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//LoopBug285452:
		//	'#12' (interface?="interface" | "class") name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'#12' (interface?="interface" | "class") name=ID
		public Group getGroup() { return cGroup; }

		//'#12'
		public Keyword getNumberSignDigitOneDigitTwoKeyword_0() { return cNumberSignDigitOneDigitTwoKeyword_0; }

		//(interface?="interface" | "class")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//interface?="interface"
		public Assignment getInterfaceAssignment_1_0() { return cInterfaceAssignment_1_0; }

		//"interface"
		public Keyword getInterfaceInterfaceKeyword_1_0_0() { return cInterfaceInterfaceKeyword_1_0_0; }

		//"class"
		public Keyword getClassKeyword_1_1() { return cClassKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class DuplicateBug284491Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.DuplicateBug284491");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Assignment cFinalAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_1_0 = (Keyword)cFinalAssignment_1_1.eContents().get(0);
		private final Assignment cTransientAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cTransientTransientKeyword_1_2_0 = (Keyword)cTransientAssignment_1_2.eContents().get(0);
		
		/// * SuppressWarnings[noInstantiation, potentialOverride] * / DuplicateBug284491:
		//	'#13' (static?='static' | final?='final' | transient?='transient')*;
		@Override public ParserRule getRule() { return rule; }

		//'#13' (static?='static' | final?='final' | transient?='transient')*
		public Group getGroup() { return cGroup; }

		//'#13'
		public Keyword getNumberSignDigitOneDigitThreeKeyword_0() { return cNumberSignDigitOneDigitThreeKeyword_0; }

		//(static?='static' | final?='final' | transient?='transient')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//static?='static'
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }

		//'static'
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }

		//final?='final'
		public Assignment getFinalAssignment_1_1() { return cFinalAssignment_1_1; }

		//'final'
		public Keyword getFinalFinalKeyword_1_1_0() { return cFinalFinalKeyword_1_1_0; }

		//transient?='transient'
		public Assignment getTransientAssignment_1_2() { return cTransientAssignment_1_2; }

		//'transient'
		public Keyword getTransientTransientKeyword_1_2_0() { return cTransientTransientKeyword_1_2_0; }
	}

	public class EmptyObjectBug284850Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.EmptyObjectBug284850");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsEmptyObjectItemsParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//EmptyObjectBug284850:
		//	'#14' items=EmptyObjectItems;
		@Override public ParserRule getRule() { return rule; }

		//'#14' items=EmptyObjectItems
		public Group getGroup() { return cGroup; }

		//'#14'
		public Keyword getNumberSignDigitOneDigitFourKeyword_0() { return cNumberSignDigitOneDigitFourKeyword_0; }

		//items=EmptyObjectItems
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//EmptyObjectItems
		public RuleCall getItemsEmptyObjectItemsParserRuleCall_1_0() { return cItemsEmptyObjectItemsParserRuleCall_1_0; }
	}

	public class EmptyObjectItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.EmptyObjectItems");
		private final Assignment cListAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cListEmptyObjectItemParserRuleCall_0 = (RuleCall)cListAssignment.eContents().get(0);
		
		/// * SuppressWarnings[noInstantiation] * / EmptyObjectItems:
		//	list+=EmptyObjectItem*;
		@Override public ParserRule getRule() { return rule; }

		//list+=EmptyObjectItem*
		public Assignment getListAssignment() { return cListAssignment; }

		//EmptyObjectItem
		public RuleCall getListEmptyObjectItemParserRuleCall_0() { return cListEmptyObjectItemParserRuleCall_0; }
	}

	public class EmptyObjectItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.EmptyObjectItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EmptyObjectItem:
		//	'item' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'item' name=ID
		public Group getGroup() { return cGroup; }

		//'item'
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class MultiInheritanceBug280439Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.MultiInheritanceBug280439");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitFiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValConcreteMultiParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//MultiInheritanceBug280439:
		//	'#15' val=ConcreteMulti;
		@Override public ParserRule getRule() { return rule; }

		//'#15' val=ConcreteMulti
		public Group getGroup() { return cGroup; }

		//'#15'
		public Keyword getNumberSignDigitOneDigitFiveKeyword_0() { return cNumberSignDigitOneDigitFiveKeyword_0; }

		//val=ConcreteMulti
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//ConcreteMulti
		public RuleCall getValConcreteMultiParserRuleCall_1_0() { return cValConcreteMultiParserRuleCall_1_0; }
	}

	public class AbstractMulti1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.AbstractMulti1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConcreteMultiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cM1Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cM1IDTerminalRuleCall_1_0 = (RuleCall)cM1Assignment_1.eContents().get(0);
		
		//AbstractMulti1:
		//	ConcreteMulti | m1=ID;
		@Override public ParserRule getRule() { return rule; }

		//ConcreteMulti | m1=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConcreteMulti
		public RuleCall getConcreteMultiParserRuleCall_0() { return cConcreteMultiParserRuleCall_0; }

		//m1=ID
		public Assignment getM1Assignment_1() { return cM1Assignment_1; }

		//ID
		public RuleCall getM1IDTerminalRuleCall_1_0() { return cM1IDTerminalRuleCall_1_0; }
	}

	public class AbstractMulti2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.AbstractMulti2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConcreteMultiParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cM2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cM2IDTerminalRuleCall_1_0 = (RuleCall)cM2Assignment_1.eContents().get(0);
		
		//AbstractMulti2:
		//	ConcreteMulti | m2=ID;
		@Override public ParserRule getRule() { return rule; }

		//ConcreteMulti | m2=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConcreteMulti
		public RuleCall getConcreteMultiParserRuleCall_0() { return cConcreteMultiParserRuleCall_0; }

		//m2=ID
		public Assignment getM2Assignment_1() { return cM2Assignment_1; }

		//ID
		public RuleCall getM2IDTerminalRuleCall_1_0() { return cM2IDTerminalRuleCall_1_0; }
	}

	public class ConcreteMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.ConcreteMulti");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cM1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cM1IDTerminalRuleCall_0_0 = (RuleCall)cM1Assignment_0.eContents().get(0);
		private final Assignment cM2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cM2IDTerminalRuleCall_1_0 = (RuleCall)cM2Assignment_1.eContents().get(0);
		
		//ConcreteMulti:
		//	m1=ID m2=ID;
		@Override public ParserRule getRule() { return rule; }

		//m1=ID m2=ID
		public Group getGroup() { return cGroup; }

		//m1=ID
		public Assignment getM1Assignment_0() { return cM1Assignment_0; }

		//ID
		public RuleCall getM1IDTerminalRuleCall_0_0() { return cM1IDTerminalRuleCall_0_0; }

		//m2=ID
		public Assignment getM2Assignment_1() { return cM2Assignment_1; }

		//ID
		public RuleCall getM2IDTerminalRuleCall_1_0() { return cM2IDTerminalRuleCall_1_0; }
	}

	public class EObjectRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.EObjectRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitSixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjEObjectElementParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final Keyword cRefsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefEObjectCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefEObjectIDTerminalRuleCall_3_0_1 = (RuleCall)cRefEObjectCrossReference_3_0.eContents().get(1);
		
		//EObjectRef:
		//	'#16' obj=EObjectElement 'refs' ref=[ecore::EObject];
		@Override public ParserRule getRule() { return rule; }

		//'#16' obj=EObjectElement 'refs' ref=[ecore::EObject]
		public Group getGroup() { return cGroup; }

		//'#16'
		public Keyword getNumberSignDigitOneDigitSixKeyword_0() { return cNumberSignDigitOneDigitSixKeyword_0; }

		//obj=EObjectElement
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//EObjectElement
		public RuleCall getObjEObjectElementParserRuleCall_1_0() { return cObjEObjectElementParserRuleCall_1_0; }

		//'refs'
		public Keyword getRefsKeyword_2() { return cRefsKeyword_2; }

		//ref=[ecore::EObject]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//[ecore::EObject]
		public CrossReference getRefEObjectCrossReference_3_0() { return cRefEObjectCrossReference_3_0; }

		//ID
		public RuleCall getRefEObjectIDTerminalRuleCall_3_0_1() { return cRefEObjectIDTerminalRuleCall_3_0_1; }
	}

	public class EObjectElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.EObjectElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EObjectElement:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TypeBug305577_1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TypeBug305577_1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitSevenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTypeBug1AParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeBug1BParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//TypeBug305577_1:
		//	"#17" (TypeBug1A | TypeBug1B);
		@Override public ParserRule getRule() { return rule; }

		//"#17" (TypeBug1A | TypeBug1B)
		public Group getGroup() { return cGroup; }

		//"#17"
		public Keyword getNumberSignDigitOneDigitSevenKeyword_0() { return cNumberSignDigitOneDigitSevenKeyword_0; }

		//(TypeBug1A | TypeBug1B)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//TypeBug1A
		public RuleCall getTypeBug1AParserRuleCall_1_0() { return cTypeBug1AParserRuleCall_1_0; }

		//TypeBug1B
		public RuleCall getTypeBug1BParserRuleCall_1_1() { return cTypeBug1BParserRuleCall_1_1; }
	}

	public class TypeBug305577_2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TypeBug305577_2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitEightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTypeBug2BParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeBug2AParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//TypeBug305577_2:
		//	"#18" (TypeBug2B | TypeBug2A);
		@Override public ParserRule getRule() { return rule; }

		//"#18" (TypeBug2B | TypeBug2A)
		public Group getGroup() { return cGroup; }

		//"#18"
		public Keyword getNumberSignDigitOneDigitEightKeyword_0() { return cNumberSignDigitOneDigitEightKeyword_0; }

		//(TypeBug2B | TypeBug2A)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//TypeBug2B
		public RuleCall getTypeBug2BParserRuleCall_1_0() { return cTypeBug2BParserRuleCall_1_0; }

		//TypeBug2A
		public RuleCall getTypeBug2AParserRuleCall_1_1() { return cTypeBug2AParserRuleCall_1_1; }
	}

	public class TypeBug1AInhElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TypeBug1AInh");
		private final RuleCall cTypeBug1BParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeBug1AInh TypeBug1A:
		//	TypeBug1B
		@Override public ParserRule getRule() { return rule; }

		//TypeBug1B
		public RuleCall getTypeBug1BParserRuleCall() { return cTypeBug1BParserRuleCall; }
	}

	public class TypeBug1AElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TypeBug1A");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeBug1AAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TypeBug1A:
		//	{TypeBug1A} "ka" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{TypeBug1A} "ka" name=ID
		public Group getGroup() { return cGroup; }

		//{TypeBug1A}
		public Action getTypeBug1AAction_0() { return cTypeBug1AAction_0; }

		//"ka"
		public Keyword getKaKeyword_1() { return cKaKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class TypeBug1BElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TypeBug1B");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeBug1BAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKbKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TypeBug1B:
		//	{TypeBug1B} "kb" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{TypeBug1B} "kb" name=ID
		public Group getGroup() { return cGroup; }

		//{TypeBug1B}
		public Action getTypeBug1BAction_0() { return cTypeBug1BAction_0; }

		//"kb"
		public Keyword getKbKeyword_1() { return cKbKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class TypeBug2AInhElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TypeBug2AInh");
		private final RuleCall cTypeBug2BParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeBug2AInh TypeBug2A:
		//	TypeBug2B
		@Override public ParserRule getRule() { return rule; }

		//TypeBug2B
		public RuleCall getTypeBug2BParserRuleCall() { return cTypeBug2BParserRuleCall; }
	}

	public class TypeBug2AElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TypeBug2A");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeBug2AAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TypeBug2A:
		//	{TypeBug2A} "ka" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{TypeBug2A} "ka" name=ID
		public Group getGroup() { return cGroup; }

		//{TypeBug2A}
		public Action getTypeBug2AAction_0() { return cTypeBug2AAction_0; }

		//"ka"
		public Keyword getKaKeyword_1() { return cKaKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class TypeBug2BElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.TypeBug2B");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeBug2BAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKbKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TypeBug2B:
		//	{TypeBug2B} "kb" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{TypeBug2B} "kb" name=ID
		public Group getGroup() { return cGroup; }

		//{TypeBug2B}
		public Action getTypeBug2BAction_0() { return cTypeBug2BAction_0; }

		//"kb"
		public Keyword getKbKeyword_1() { return cKbKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class Bug305171Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Bug305171");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitNineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cKxKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cXAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cXIDTerminalRuleCall_1_0_1_0 = (RuleCall)cXAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cXAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cXIDTerminalRuleCall_1_0_2_1_0 = (RuleCall)cXAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cKyKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cYAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cYIDTerminalRuleCall_1_1_0_1_0 = (RuleCall)cYAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_0_2_0 = (Keyword)cGroup_1_1_0_2.eContents().get(0);
		private final Assignment cYAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final RuleCall cYIDTerminalRuleCall_1_1_0_2_1_0 = (RuleCall)cYAssignment_1_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cKzKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cZAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cZIDTerminalRuleCall_1_1_1_1_0 = (RuleCall)cZAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cZAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cZIDTerminalRuleCall_1_1_1_2_1_0 = (RuleCall)cZAssignment_1_1_1_2_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Bug305171:
		//	"#19" (('kx' x+=ID (',' x+=ID)*)? (('ky' y+=ID (',' y+=ID)*)? ('kz' z+=ID (',' z+=ID)*)?)) name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"#19" (('kx' x+=ID (',' x+=ID)*)? (('ky' y+=ID (',' y+=ID)*)? ('kz' z+=ID (',' z+=ID)*)?)) name=ID
		public Group getGroup() { return cGroup; }

		//"#19"
		public Keyword getNumberSignDigitOneDigitNineKeyword_0() { return cNumberSignDigitOneDigitNineKeyword_0; }

		//(('kx' x+=ID (',' x+=ID)*)? (('ky' y+=ID (',' y+=ID)*)? ('kz' z+=ID (',' z+=ID)*)?))
		public Group getGroup_1() { return cGroup_1; }

		//('kx' x+=ID (',' x+=ID)*)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'kx'
		public Keyword getKxKeyword_1_0_0() { return cKxKeyword_1_0_0; }

		//x+=ID
		public Assignment getXAssignment_1_0_1() { return cXAssignment_1_0_1; }

		//ID
		public RuleCall getXIDTerminalRuleCall_1_0_1_0() { return cXIDTerminalRuleCall_1_0_1_0; }

		//(',' x+=ID)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//','
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }

		//x+=ID
		public Assignment getXAssignment_1_0_2_1() { return cXAssignment_1_0_2_1; }

		//ID
		public RuleCall getXIDTerminalRuleCall_1_0_2_1_0() { return cXIDTerminalRuleCall_1_0_2_1_0; }

		//(('ky' y+=ID (',' y+=ID)*)? ('kz' z+=ID (',' z+=ID)*)?)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//('ky' y+=ID (',' y+=ID)*)?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//'ky'
		public Keyword getKyKeyword_1_1_0_0() { return cKyKeyword_1_1_0_0; }

		//y+=ID
		public Assignment getYAssignment_1_1_0_1() { return cYAssignment_1_1_0_1; }

		//ID
		public RuleCall getYIDTerminalRuleCall_1_1_0_1_0() { return cYIDTerminalRuleCall_1_1_0_1_0; }

		//(',' y+=ID)*
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }

		//','
		public Keyword getCommaKeyword_1_1_0_2_0() { return cCommaKeyword_1_1_0_2_0; }

		//y+=ID
		public Assignment getYAssignment_1_1_0_2_1() { return cYAssignment_1_1_0_2_1; }

		//ID
		public RuleCall getYIDTerminalRuleCall_1_1_0_2_1_0() { return cYIDTerminalRuleCall_1_1_0_2_1_0; }

		//('kz' z+=ID (',' z+=ID)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//'kz'
		public Keyword getKzKeyword_1_1_1_0() { return cKzKeyword_1_1_1_0; }

		//z+=ID
		public Assignment getZAssignment_1_1_1_1() { return cZAssignment_1_1_1_1; }

		//ID
		public RuleCall getZIDTerminalRuleCall_1_1_1_1_0() { return cZIDTerminalRuleCall_1_1_1_1_0; }

		//(',' z+=ID)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }

		//','
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }

		//z+=ID
		public Assignment getZAssignment_1_1_1_2_1() { return cZAssignment_1_1_1_2_1; }

		//ID
		public RuleCall getZIDTerminalRuleCall_1_1_1_2_1_0() { return cZIDTerminalRuleCall_1_1_1_2_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class Bug310435EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Bug310435Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoDigitZeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cKw1Keyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cLitsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cLitsEnumBug310435Lit1EnumRuleCall_1_0_1_0 = (RuleCall)cLitsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cKw2Keyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLitsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLitsEnumBug310435Lit2EnumRuleCall_1_1_1_0 = (RuleCall)cLitsAssignment_1_1_1.eContents().get(0);
		
		/// * SuppressWarnings[noInstantiation] * / Bug310435Enum:
		//	"#20" ('kw1' lits+=EnumBug310435Lit1 | 'kw2' lits+=EnumBug310435Lit2)*;
		@Override public ParserRule getRule() { return rule; }

		//"#20" ('kw1' lits+=EnumBug310435Lit1 | 'kw2' lits+=EnumBug310435Lit2)*
		public Group getGroup() { return cGroup; }

		//"#20"
		public Keyword getNumberSignDigitTwoDigitZeroKeyword_0() { return cNumberSignDigitTwoDigitZeroKeyword_0; }

		//('kw1' lits+=EnumBug310435Lit1 | 'kw2' lits+=EnumBug310435Lit2)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'kw1' lits+=EnumBug310435Lit1
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'kw1'
		public Keyword getKw1Keyword_1_0_0() { return cKw1Keyword_1_0_0; }

		//lits+=EnumBug310435Lit1
		public Assignment getLitsAssignment_1_0_1() { return cLitsAssignment_1_0_1; }

		//EnumBug310435Lit1
		public RuleCall getLitsEnumBug310435Lit1EnumRuleCall_1_0_1_0() { return cLitsEnumBug310435Lit1EnumRuleCall_1_0_1_0; }

		//'kw2' lits+=EnumBug310435Lit2
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'kw2'
		public Keyword getKw2Keyword_1_1_0() { return cKw2Keyword_1_1_0; }

		//lits+=EnumBug310435Lit2
		public Assignment getLitsAssignment_1_1_1() { return cLitsAssignment_1_1_1; }

		//EnumBug310435Lit2
		public RuleCall getLitsEnumBug310435Lit2EnumRuleCall_1_1_1_0() { return cLitsEnumBug310435Lit2EnumRuleCall_1_1_1_0; }
	}

	public class Bug310435ValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.Bug310435Val");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cKw1Keyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cLitsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cLitsIDTerminalRuleCall_1_0_1_0 = (RuleCall)cLitsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cKw2Keyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLitsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLitsSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cLitsAssignment_1_1_1.eContents().get(0);
		
		/// * SuppressWarnings[noInstantiation] * / Bug310435Val:
		//	"#21" ('kw1' lits+=ID | 'kw2' lits+=STRING)*;
		@Override public ParserRule getRule() { return rule; }

		//"#21" ('kw1' lits+=ID | 'kw2' lits+=STRING)*
		public Group getGroup() { return cGroup; }

		//"#21"
		public Keyword getNumberSignDigitTwoDigitOneKeyword_0() { return cNumberSignDigitTwoDigitOneKeyword_0; }

		//('kw1' lits+=ID | 'kw2' lits+=STRING)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'kw1' lits+=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'kw1'
		public Keyword getKw1Keyword_1_0_0() { return cKw1Keyword_1_0_0; }

		//lits+=ID
		public Assignment getLitsAssignment_1_0_1() { return cLitsAssignment_1_0_1; }

		//ID
		public RuleCall getLitsIDTerminalRuleCall_1_0_1_0() { return cLitsIDTerminalRuleCall_1_0_1_0; }

		//'kw2' lits+=STRING
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'kw2'
		public Keyword getKw2Keyword_1_1_0() { return cKw2Keyword_1_1_0; }

		//lits+=STRING
		public Assignment getLitsAssignment_1_1_1() { return cLitsAssignment_1_1_1; }

		//STRING
		public RuleCall getLitsSTRINGTerminalRuleCall_1_1_1_0() { return cLitsSTRINGTerminalRuleCall_1_1_1_0; }
	}

	public class CrossRefNameTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.CrossRefNameTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamedCrossRefNamedParserRuleCall_1_0 = (RuleCall)cNamedAssignment_1.eContents().get(0);
		private final Keyword cKw1Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cKw2Keyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cRefAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cRefCrossRefNamedCrossReference_3_0_1_0 = (CrossReference)cRefAssignment_3_0_1.eContents().get(0);
		private final RuleCall cRefCrossRefNamedID1TerminalRuleCall_3_0_1_0_1 = (RuleCall)cRefCrossRefNamedCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cKw3Keyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cRefAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cRefCrossRefNamedCrossReference_3_1_1_0 = (CrossReference)cRefAssignment_3_1_1.eContents().get(0);
		private final RuleCall cRefCrossRefNamedID2TerminalRuleCall_3_1_1_0_1 = (RuleCall)cRefCrossRefNamedCrossReference_3_1_1_0.eContents().get(1);
		
		/// * SuppressWarnings[noInstantiation] * / CrossRefNameTest:
		//	"#22" named+=CrossRefNamed* "kw1" ("kw2" ref+=[CrossRefNamed|ID1] | "kw3" ref+=[CrossRefNamed|ID2])*;
		@Override public ParserRule getRule() { return rule; }

		//"#22" named+=CrossRefNamed* "kw1" ("kw2" ref+=[CrossRefNamed|ID1] | "kw3" ref+=[CrossRefNamed|ID2])*
		public Group getGroup() { return cGroup; }

		//"#22"
		public Keyword getNumberSignDigitTwoDigitTwoKeyword_0() { return cNumberSignDigitTwoDigitTwoKeyword_0; }

		//named+=CrossRefNamed*
		public Assignment getNamedAssignment_1() { return cNamedAssignment_1; }

		//CrossRefNamed
		public RuleCall getNamedCrossRefNamedParserRuleCall_1_0() { return cNamedCrossRefNamedParserRuleCall_1_0; }

		//"kw1"
		public Keyword getKw1Keyword_2() { return cKw1Keyword_2; }

		//("kw2" ref+=[CrossRefNamed|ID1] | "kw3" ref+=[CrossRefNamed|ID2])*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"kw2" ref+=[CrossRefNamed|ID1]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"kw2"
		public Keyword getKw2Keyword_3_0_0() { return cKw2Keyword_3_0_0; }

		//ref+=[CrossRefNamed|ID1]
		public Assignment getRefAssignment_3_0_1() { return cRefAssignment_3_0_1; }

		//[CrossRefNamed|ID1]
		public CrossReference getRefCrossRefNamedCrossReference_3_0_1_0() { return cRefCrossRefNamedCrossReference_3_0_1_0; }

		//ID1
		public RuleCall getRefCrossRefNamedID1TerminalRuleCall_3_0_1_0_1() { return cRefCrossRefNamedID1TerminalRuleCall_3_0_1_0_1; }

		//"kw3" ref+=[CrossRefNamed|ID2]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"kw3"
		public Keyword getKw3Keyword_3_1_0() { return cKw3Keyword_3_1_0; }

		//ref+=[CrossRefNamed|ID2]
		public Assignment getRefAssignment_3_1_1() { return cRefAssignment_3_1_1; }

		//[CrossRefNamed|ID2]
		public CrossReference getRefCrossRefNamedCrossReference_3_1_1_0() { return cRefCrossRefNamedCrossReference_3_1_1_0; }

		//ID2
		public RuleCall getRefCrossRefNamedID2TerminalRuleCall_3_1_1_0_1() { return cRefCrossRefNamedID2TerminalRuleCall_3_1_1_0_1; }
	}

	public class CrossRefNamedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.CrossRefNamed");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameID1TerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameID2TerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		
		//CrossRefNamed:
		//	name=(ID1 | ID2);
		@Override public ParserRule getRule() { return rule; }

		//name=(ID1 | ID2)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//(ID1 | ID2)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//ID1
		public RuleCall getNameID1TerminalRuleCall_0_0() { return cNameID1TerminalRuleCall_0_0; }

		//ID2
		public RuleCall getNameID2TerminalRuleCall_0_1() { return cNameID2TerminalRuleCall_0_1; }
	}
	
	
	public class EnumBug310435Lit1Elements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.EnumBug310435Lit1");
		private final EnumLiteralDeclaration cLit1EnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLit1Lit1Keyword_0 = (Keyword)cLit1EnumLiteralDeclaration.eContents().get(0);
		
		//enum EnumBug310435Lit1 returns EnumBug310435Enum:
		//	lit1;
		public EnumRule getRule() { return rule; }

		//lit1
		public EnumLiteralDeclaration getLit1EnumLiteralDeclaration() { return cLit1EnumLiteralDeclaration; }

		//'lit1'
		public Keyword getLit1Lit1Keyword_0() { return cLit1Lit1Keyword_0; }
	}

	public class EnumBug310435Lit2Elements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.EnumBug310435Lit2");
		private final EnumLiteralDeclaration cLit2EnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLit2Lit2Keyword_0 = (Keyword)cLit2EnumLiteralDeclaration.eContents().get(0);
		
		//enum EnumBug310435Lit2 returns EnumBug310435Enum:
		//	lit2;
		public EnumRule getRule() { return rule; }

		//lit2
		public EnumLiteralDeclaration getLit2EnumLiteralDeclaration() { return cLit2EnumLiteralDeclaration; }

		//'lit2'
		public Keyword getLit2Lit2Keyword_0() { return cLit2Lit2Keyword_0; }
	}
	
	private final OpElements pOp;
	private final TermElements pTerm;
	private final AtomElements pAtom;
	private final ParensElements pParens;
	private final TwoNumbersElements pTwoNumbers;
	private final ManyStringsElements pManyStrings;
	private final TypeElements pType;
	private final Ref2Elements pRef2;
	private final SpareElements pSpare;
	private final BooleanElements pBoolean;
	private final Transient1Elements pTransient1;
	private final Consumed1Elements pConsumed1;
	private final Consumed2Elements pConsumed2;
	private final Loop1Elements pLoop1;
	private final Loop2Elements pLoop2;
	private final Loop3Elements pLoop3;
	private final Loop4Elements pLoop4;
	private final LoopBug285452Elements pLoopBug285452;
	private final DuplicateBug284491Elements pDuplicateBug284491;
	private final EmptyObjectBug284850Elements pEmptyObjectBug284850;
	private final EmptyObjectItemsElements pEmptyObjectItems;
	private final EmptyObjectItemElements pEmptyObjectItem;
	private final MultiInheritanceBug280439Elements pMultiInheritanceBug280439;
	private final AbstractMulti1Elements pAbstractMulti1;
	private final AbstractMulti2Elements pAbstractMulti2;
	private final ConcreteMultiElements pConcreteMulti;
	private final EObjectRefElements pEObjectRef;
	private final EObjectElementElements pEObjectElement;
	private final TypeBug305577_1Elements pTypeBug305577_1;
	private final TypeBug305577_2Elements pTypeBug305577_2;
	private final TypeBug1AInhElements pTypeBug1AInh;
	private final TypeBug1AElements pTypeBug1A;
	private final TypeBug1BElements pTypeBug1B;
	private final TypeBug2AInhElements pTypeBug2AInh;
	private final TypeBug2AElements pTypeBug2A;
	private final TypeBug2BElements pTypeBug2B;
	private final Bug305171Elements pBug305171;
	private final Bug310435EnumElements pBug310435Enum;
	private final Bug310435ValElements pBug310435Val;
	private final EnumBug310435Lit1Elements eEnumBug310435Lit1;
	private final EnumBug310435Lit2Elements eEnumBug310435Lit2;
	private final CrossRefNameTestElements pCrossRefNameTest;
	private final CrossRefNamedElements pCrossRefNamed;
	private final TerminalRule tID1;
	private final TerminalRule tID2;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleReconstrTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOp = new OpElements();
		this.pTerm = new TermElements();
		this.pAtom = new AtomElements();
		this.pParens = new ParensElements();
		this.pTwoNumbers = new TwoNumbersElements();
		this.pManyStrings = new ManyStringsElements();
		this.pType = new TypeElements();
		this.pRef2 = new Ref2Elements();
		this.pSpare = new SpareElements();
		this.pBoolean = new BooleanElements();
		this.pTransient1 = new Transient1Elements();
		this.pConsumed1 = new Consumed1Elements();
		this.pConsumed2 = new Consumed2Elements();
		this.pLoop1 = new Loop1Elements();
		this.pLoop2 = new Loop2Elements();
		this.pLoop3 = new Loop3Elements();
		this.pLoop4 = new Loop4Elements();
		this.pLoopBug285452 = new LoopBug285452Elements();
		this.pDuplicateBug284491 = new DuplicateBug284491Elements();
		this.pEmptyObjectBug284850 = new EmptyObjectBug284850Elements();
		this.pEmptyObjectItems = new EmptyObjectItemsElements();
		this.pEmptyObjectItem = new EmptyObjectItemElements();
		this.pMultiInheritanceBug280439 = new MultiInheritanceBug280439Elements();
		this.pAbstractMulti1 = new AbstractMulti1Elements();
		this.pAbstractMulti2 = new AbstractMulti2Elements();
		this.pConcreteMulti = new ConcreteMultiElements();
		this.pEObjectRef = new EObjectRefElements();
		this.pEObjectElement = new EObjectElementElements();
		this.pTypeBug305577_1 = new TypeBug305577_1Elements();
		this.pTypeBug305577_2 = new TypeBug305577_2Elements();
		this.pTypeBug1AInh = new TypeBug1AInhElements();
		this.pTypeBug1A = new TypeBug1AElements();
		this.pTypeBug1B = new TypeBug1BElements();
		this.pTypeBug2AInh = new TypeBug2AInhElements();
		this.pTypeBug2A = new TypeBug2AElements();
		this.pTypeBug2B = new TypeBug2BElements();
		this.pBug305171 = new Bug305171Elements();
		this.pBug310435Enum = new Bug310435EnumElements();
		this.pBug310435Val = new Bug310435ValElements();
		this.eEnumBug310435Lit1 = new EnumBug310435Lit1Elements();
		this.eEnumBug310435Lit2 = new EnumBug310435Lit2Elements();
		this.pCrossRefNameTest = new CrossRefNameTestElements();
		this.pCrossRefNamed = new CrossRefNamedElements();
		this.tID1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.ID1");
		this.tID2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage.ID2");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parsetree.reconstr.SimpleReconstrTestLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Op Expression:
	//	Term ({Op.values+=current} values+=Term)*
	public OpElements getOpAccess() {
		return pOp;
	}
	
	public ParserRule getOpRule() {
		return getOpAccess().getRule();
	}

	//Term Expression:
	//	Atom | TwoNumbers | ManyStrings | Type | Ref2 | Spare | Boolean | Transient1 | Consumed1 | Consumed2 | Loop1 | Loop2 |
	//	Loop3 | Loop4 | LoopBug285452 | DuplicateBug284491 | EmptyObjectBug284850 | MultiInheritanceBug280439 | EObjectRef |
	//	TypeBug305577_1 | TypeBug305577_2 | Parens | Bug305171 | Bug310435Val | Bug310435Enum | CrossRefNameTest
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Atom:
	//	name=ID;
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	/// * SuppressWarnings[potentialOverride] * / Parens Expression:
	//	'(' Op ')' em='!'?
	public ParensElements getParensAccess() {
		return pParens;
	}
	
	public ParserRule getParensRule() {
		return getParensAccess().getRule();
	}

	//TwoNumbers:
	//	num1=INT num2=INT ('#' num3+=INT)*;
	public TwoNumbersElements getTwoNumbersAccess() {
		return pTwoNumbers;
	}
	
	public ParserRule getTwoNumbersRule() {
		return getTwoNumbersAccess().getRule();
	}

	//ManyStrings:
	//	'=' str1+=STRING* str2+=STRING;
	public ManyStringsElements getManyStringsAccess() {
		return pManyStrings;
	}
	
	public ParserRule getManyStringsRule() {
		return getManyStringsAccess().getRule();
	}

	//Type:
	//	'type' name=ID 'extends' ^extends=[Type];
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Ref2:
	//	'#2' ref2=('mykeyword1' | STRING | 'mykeyword2');
	public Ref2Elements getRef2Access() {
		return pRef2;
	}
	
	public ParserRule getRef2Rule() {
		return getRef2Access().getRule();
	}

	//Spare:
	//	'#3' id+=ID ('.' id+=ID)*;
	public SpareElements getSpareAccess() {
		return pSpare;
	}
	
	public ParserRule getSpareRule() {
		return getSpareAccess().getRule();
	}

	//Boolean:
	//	'#4' bool?='myoption'? 'kw' value=ID;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Transient1:
	//	'#5' (precStar?='*' | prec=INT) (',' (scaleStar?='*' | scale=INT))?;
	public Transient1Elements getTransient1Access() {
		return pTransient1;
	}
	
	public ParserRule getTransient1Rule() {
		return getTransient1Access().getRule();
	}

	//Consumed1:
	//	'#6' ('v1' v1+=INT* v2+=ID | 'v2' v2+=ID* v1+=INT);
	public Consumed1Elements getConsumed1Access() {
		return pConsumed1;
	}
	
	public ParserRule getConsumed1Rule() {
		return getConsumed1Access().getRule();
	}

	//Consumed2:
	//	'#7' child=Consumed1;
	public Consumed2Elements getConsumed2Access() {
		return pConsumed2;
	}
	
	public ParserRule getConsumed2Rule() {
		return getConsumed2Access().getRule();
	}

	//Loop1:
	//	'kw0'? '#8' id+=ID 'kw1'? id+=ID ('kw2'* 'kw30')+;
	public Loop1Elements getLoop1Access() {
		return pLoop1;
	}
	
	public ParserRule getLoop1Rule() {
		return getLoop1Access().getRule();
	}

	//Loop2:
	//	'#9' id+=ID ('kw1' | id+=ID 'kw2') ('kw3' | id+=ID 'kw4')? ('kw5' | 'kw6');
	public Loop2Elements getLoop2Access() {
		return pLoop2;
	}
	
	public ParserRule getLoop2Rule() {
		return getLoop2Access().getRule();
	}

	//Loop3:
	//	('kw1' | 'kw2' | 'kw3') '#10' id+=ID ('kw4' id+=ID 'kw5')*;
	public Loop3Elements getLoop3Access() {
		return pLoop3;
	}
	
	public ParserRule getLoop3Rule() {
		return getLoop3Access().getRule();
	}

	//Loop4:
	//	'#11' ('kw1' | 'kw2' | 'kw3' 'kw4') id+=ID ('kw5' ('kw6' 'kw7'?)?)+;
	public Loop4Elements getLoop4Access() {
		return pLoop4;
	}
	
	public ParserRule getLoop4Rule() {
		return getLoop4Access().getRule();
	}

	//LoopBug285452:
	//	'#12' (interface?="interface" | "class") name=ID;
	public LoopBug285452Elements getLoopBug285452Access() {
		return pLoopBug285452;
	}
	
	public ParserRule getLoopBug285452Rule() {
		return getLoopBug285452Access().getRule();
	}

	/// * SuppressWarnings[noInstantiation, potentialOverride] * / DuplicateBug284491:
	//	'#13' (static?='static' | final?='final' | transient?='transient')*;
	public DuplicateBug284491Elements getDuplicateBug284491Access() {
		return pDuplicateBug284491;
	}
	
	public ParserRule getDuplicateBug284491Rule() {
		return getDuplicateBug284491Access().getRule();
	}

	//EmptyObjectBug284850:
	//	'#14' items=EmptyObjectItems;
	public EmptyObjectBug284850Elements getEmptyObjectBug284850Access() {
		return pEmptyObjectBug284850;
	}
	
	public ParserRule getEmptyObjectBug284850Rule() {
		return getEmptyObjectBug284850Access().getRule();
	}

	/// * SuppressWarnings[noInstantiation] * / EmptyObjectItems:
	//	list+=EmptyObjectItem*;
	public EmptyObjectItemsElements getEmptyObjectItemsAccess() {
		return pEmptyObjectItems;
	}
	
	public ParserRule getEmptyObjectItemsRule() {
		return getEmptyObjectItemsAccess().getRule();
	}

	//EmptyObjectItem:
	//	'item' name=ID;
	public EmptyObjectItemElements getEmptyObjectItemAccess() {
		return pEmptyObjectItem;
	}
	
	public ParserRule getEmptyObjectItemRule() {
		return getEmptyObjectItemAccess().getRule();
	}

	//MultiInheritanceBug280439:
	//	'#15' val=ConcreteMulti;
	public MultiInheritanceBug280439Elements getMultiInheritanceBug280439Access() {
		return pMultiInheritanceBug280439;
	}
	
	public ParserRule getMultiInheritanceBug280439Rule() {
		return getMultiInheritanceBug280439Access().getRule();
	}

	//AbstractMulti1:
	//	ConcreteMulti | m1=ID;
	public AbstractMulti1Elements getAbstractMulti1Access() {
		return pAbstractMulti1;
	}
	
	public ParserRule getAbstractMulti1Rule() {
		return getAbstractMulti1Access().getRule();
	}

	//AbstractMulti2:
	//	ConcreteMulti | m2=ID;
	public AbstractMulti2Elements getAbstractMulti2Access() {
		return pAbstractMulti2;
	}
	
	public ParserRule getAbstractMulti2Rule() {
		return getAbstractMulti2Access().getRule();
	}

	//ConcreteMulti:
	//	m1=ID m2=ID;
	public ConcreteMultiElements getConcreteMultiAccess() {
		return pConcreteMulti;
	}
	
	public ParserRule getConcreteMultiRule() {
		return getConcreteMultiAccess().getRule();
	}

	//EObjectRef:
	//	'#16' obj=EObjectElement 'refs' ref=[ecore::EObject];
	public EObjectRefElements getEObjectRefAccess() {
		return pEObjectRef;
	}
	
	public ParserRule getEObjectRefRule() {
		return getEObjectRefAccess().getRule();
	}

	//EObjectElement:
	//	name=ID;
	public EObjectElementElements getEObjectElementAccess() {
		return pEObjectElement;
	}
	
	public ParserRule getEObjectElementRule() {
		return getEObjectElementAccess().getRule();
	}

	//TypeBug305577_1:
	//	"#17" (TypeBug1A | TypeBug1B);
	public TypeBug305577_1Elements getTypeBug305577_1Access() {
		return pTypeBug305577_1;
	}
	
	public ParserRule getTypeBug305577_1Rule() {
		return getTypeBug305577_1Access().getRule();
	}

	//TypeBug305577_2:
	//	"#18" (TypeBug2B | TypeBug2A);
	public TypeBug305577_2Elements getTypeBug305577_2Access() {
		return pTypeBug305577_2;
	}
	
	public ParserRule getTypeBug305577_2Rule() {
		return getTypeBug305577_2Access().getRule();
	}

	//TypeBug1AInh TypeBug1A:
	//	TypeBug1B
	public TypeBug1AInhElements getTypeBug1AInhAccess() {
		return pTypeBug1AInh;
	}
	
	public ParserRule getTypeBug1AInhRule() {
		return getTypeBug1AInhAccess().getRule();
	}

	//TypeBug1A:
	//	{TypeBug1A} "ka" name=ID;
	public TypeBug1AElements getTypeBug1AAccess() {
		return pTypeBug1A;
	}
	
	public ParserRule getTypeBug1ARule() {
		return getTypeBug1AAccess().getRule();
	}

	//TypeBug1B:
	//	{TypeBug1B} "kb" name=ID;
	public TypeBug1BElements getTypeBug1BAccess() {
		return pTypeBug1B;
	}
	
	public ParserRule getTypeBug1BRule() {
		return getTypeBug1BAccess().getRule();
	}

	//TypeBug2AInh TypeBug2A:
	//	TypeBug2B
	public TypeBug2AInhElements getTypeBug2AInhAccess() {
		return pTypeBug2AInh;
	}
	
	public ParserRule getTypeBug2AInhRule() {
		return getTypeBug2AInhAccess().getRule();
	}

	//TypeBug2A:
	//	{TypeBug2A} "ka" name=ID;
	public TypeBug2AElements getTypeBug2AAccess() {
		return pTypeBug2A;
	}
	
	public ParserRule getTypeBug2ARule() {
		return getTypeBug2AAccess().getRule();
	}

	//TypeBug2B:
	//	{TypeBug2B} "kb" name=ID;
	public TypeBug2BElements getTypeBug2BAccess() {
		return pTypeBug2B;
	}
	
	public ParserRule getTypeBug2BRule() {
		return getTypeBug2BAccess().getRule();
	}

	//Bug305171:
	//	"#19" (('kx' x+=ID (',' x+=ID)*)? (('ky' y+=ID (',' y+=ID)*)? ('kz' z+=ID (',' z+=ID)*)?)) name=ID;
	public Bug305171Elements getBug305171Access() {
		return pBug305171;
	}
	
	public ParserRule getBug305171Rule() {
		return getBug305171Access().getRule();
	}

	/// * SuppressWarnings[noInstantiation] * / Bug310435Enum:
	//	"#20" ('kw1' lits+=EnumBug310435Lit1 | 'kw2' lits+=EnumBug310435Lit2)*;
	public Bug310435EnumElements getBug310435EnumAccess() {
		return pBug310435Enum;
	}
	
	public ParserRule getBug310435EnumRule() {
		return getBug310435EnumAccess().getRule();
	}

	/// * SuppressWarnings[noInstantiation] * / Bug310435Val:
	//	"#21" ('kw1' lits+=ID | 'kw2' lits+=STRING)*;
	public Bug310435ValElements getBug310435ValAccess() {
		return pBug310435Val;
	}
	
	public ParserRule getBug310435ValRule() {
		return getBug310435ValAccess().getRule();
	}

	//enum EnumBug310435Lit1 returns EnumBug310435Enum:
	//	lit1;
	public EnumBug310435Lit1Elements getEnumBug310435Lit1Access() {
		return eEnumBug310435Lit1;
	}
	
	public EnumRule getEnumBug310435Lit1Rule() {
		return getEnumBug310435Lit1Access().getRule();
	}

	//enum EnumBug310435Lit2 returns EnumBug310435Enum:
	//	lit2;
	public EnumBug310435Lit2Elements getEnumBug310435Lit2Access() {
		return eEnumBug310435Lit2;
	}
	
	public EnumRule getEnumBug310435Lit2Rule() {
		return getEnumBug310435Lit2Access().getRule();
	}

	/// * SuppressWarnings[noInstantiation] * / CrossRefNameTest:
	//	"#22" named+=CrossRefNamed* "kw1" ("kw2" ref+=[CrossRefNamed|ID1] | "kw3" ref+=[CrossRefNamed|ID2])*;
	public CrossRefNameTestElements getCrossRefNameTestAccess() {
		return pCrossRefNameTest;
	}
	
	public ParserRule getCrossRefNameTestRule() {
		return getCrossRefNameTestAccess().getRule();
	}

	//CrossRefNamed:
	//	name=(ID1 | ID2);
	public CrossRefNamedElements getCrossRefNamedAccess() {
		return pCrossRefNamed;
	}
	
	public ParserRule getCrossRefNamedRule() {
		return getCrossRefNamedAccess().getRule();
	}

	//terminal ID1:
	//	'i' 'd' '0'..'9'*;
	public TerminalRule getID1Rule() {
		return tID1;
	} 

	//terminal ID2:
	//	'I' 'D' '0'..'9'*;
	public TerminalRule getID2Rule() {
		return tID2;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
