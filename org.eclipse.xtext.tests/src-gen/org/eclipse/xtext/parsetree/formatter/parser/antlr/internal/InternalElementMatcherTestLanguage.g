/*
 * generated by Xtext
 */
grammar InternalElementMatcherTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.xtext.parsetree.formatter.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.parsetree.formatter.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.parsetree.formatter.services.ElementMatcherTestLanguageGrammarAccess;

}

@parser::members {

 	private ElementMatcherTestLanguageGrammarAccess grammarAccess;
 	
    public InternalElementMatcherTestLanguageParser(TokenStream input, ElementMatcherTestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ElementMatcherTestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelAccess().getSimpleParserRuleCall_0()); 
    }
    this_Simple_0=ruleSimple
    { 
        $current = $this_Simple_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getRuleCallsParserRuleCall_1()); 
    }
    this_RuleCalls_1=ruleRuleCalls
    { 
        $current = $this_RuleCalls_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getOptionalCallsParserRuleCall_2()); 
    }
    this_OptionalCalls_2=ruleOptionalCalls
    { 
        $current = $this_OptionalCalls_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getRecursionParserRuleCall_3()); 
    }
    this_Recursion_3=ruleRecursion
    { 
        $current = $this_Recursion_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getLoopParserRuleCall_4()); 
    }
    this_Loop_4=ruleLoop
    { 
        $current = $this_Loop_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getExpressionParserRuleCall_5()); 
    }
    this_Expression_5=ruleExpression
    { 
        $current = $this_Expression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getRuleCalls12ParserRuleCall_6()); 
    }
    this_RuleCalls12_6=ruleRuleCalls12
    { 
        $current = $this_RuleCalls12_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getNestedStartParserRuleCall_7()); 
    }
    this_NestedStart_7=ruleNestedStart
    { 
        $current = $this_NestedStart_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimple
entryRuleSimple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleRule()); }
	 iv_ruleSimple=ruleSimple 
	 { $current=$iv_ruleSimple.current; } 
	 EOF 
;

// Rule Simple
ruleSimple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#1' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleAccess().getNumberSignDigitOneKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSimpleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_2='kw1' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleAccess().getKw1Keyword_2_0());
    }
(
(
		lv_optional_3_0=RULE_ID
		{
			newLeafNode(lv_optional_3_0, grammarAccess.getSimpleAccess().getOptionalIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"optional",
        		lv_optional_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleAccess().getDatatypeFQNParserRuleCall_3_0()); 
	    }
		lv_datatype_4_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleRule());
	        }
       		set(
       			$current, 
       			"datatype",
        		lv_datatype_4_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.FQN");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRuleRuleCalls
entryRuleRuleCalls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleCallsRule()); }
	 iv_ruleRuleCalls=ruleRuleCalls 
	 { $current=$iv_ruleRuleCalls.current; } 
	 EOF 
;

// Rule RuleCalls
ruleRuleCalls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#2' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleCallsAccess().getNumberSignDigitTwoKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getRuleCallsAccess().getRuleCallsSubParserRuleCall_1()); 
    }
    this_RuleCallsSub_1=ruleRuleCallsSub
    { 
        $current = $this_RuleCallsSub_1.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getRuleCallsAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleCallsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleCallsAccess().getCall1RuleCallsAss1ParserRuleCall_3_0()); 
	    }
		lv_call1_3_0=ruleRuleCallsAss1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleCallsRule());
	        }
       		set(
       			$current, 
       			"call1",
        		lv_call1_3_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RuleCallsAss1");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleCallsAccess().getCall2RuleCallsAss2ParserRuleCall_4_0()); 
	    }
		lv_call2_4_0=ruleRuleCallsAss2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleCallsRule());
	        }
       		set(
       			$current, 
       			"call2",
        		lv_call2_4_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RuleCallsAss2");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleRuleCallsSub
entryRuleRuleCallsSub returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleCallsSubRule()); }
	 iv_ruleRuleCallsSub=ruleRuleCallsSub 
	 { $current=$iv_ruleRuleCallsSub.current; } 
	 EOF 
;

// Rule RuleCallsSub
ruleRuleCallsSub returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_sub_0_0=	'sub' 
    {
        newLeafNode(lv_sub_0_0, grammarAccess.getRuleCallsSubAccess().getSubSubKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleCallsSubRule());
	        }
       		setWithLastConsumed($current, "sub", lv_sub_0_0, "sub");
	    }

)
)
;





// Entry rule entryRuleRuleCallsAss1
entryRuleRuleCallsAss1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleCallsAss1Rule()); }
	 iv_ruleRuleCallsAss1=ruleRuleCallsAss1 
	 { $current=$iv_ruleRuleCallsAss1.current; } 
	 EOF 
;

// Rule RuleCallsAss1
ruleRuleCallsAss1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ass1' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleCallsAss1Access().getAss1Keyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleCallsAss1Access().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleCallsAss1Rule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleRuleCallsAss2
entryRuleRuleCallsAss2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleCallsAss2Rule()); }
	 iv_ruleRuleCallsAss2=ruleRuleCallsAss2 
	 { $current=$iv_ruleRuleCallsAss2.current; } 
	 EOF 
;

// Rule RuleCallsAss2
ruleRuleCallsAss2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ass2' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleCallsAss2Access().getAss2Keyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuleCallsAss2Access().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleCallsAss2Rule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleOptionalCalls
entryRuleOptionalCalls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalCallsRule()); }
	 iv_ruleOptionalCalls=ruleOptionalCalls 
	 { $current=$iv_ruleOptionalCalls.current; } 
	 EOF 
;

// Rule OptionalCalls
ruleOptionalCalls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#3' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionalCallsAccess().getNumberSignDigitThreeKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getOptionalCallsAccess().getOptionalCallsAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalCallsAccess().getOpt1OptionalCallsSub1ParserRuleCall_2_0()); 
	    }
		lv_opt1_2_0=ruleOptionalCallsSub1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalCallsRule());
	        }
       		set(
       			$current, 
       			"opt1",
        		lv_opt1_2_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.OptionalCallsSub1");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getOptionalCallsAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalCallsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleOptionalCallsSub1
entryRuleOptionalCallsSub1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalCallsSub1Rule()); }
	 iv_ruleOptionalCallsSub1=ruleOptionalCallsSub1 
	 { $current=$iv_ruleOptionalCallsSub1.current; } 
	 EOF 
;

// Rule OptionalCallsSub1
ruleOptionalCallsSub1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOptionalCallsSub1Access().getOptionalCallsSub1Action_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalCallsSub1Access().getOpt2OptionalCallsSub2ParserRuleCall_1_0()); 
	    }
		lv_opt2_1_0=ruleOptionalCallsSub2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalCallsSub1Rule());
	        }
       		set(
       			$current, 
       			"opt2",
        		lv_opt2_1_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.OptionalCallsSub2");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='sub' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionalCallsSub1Access().getSubKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalCallsSub1Access().getOpt3OptionalCallsSub3ParserRuleCall_3_0()); 
	    }
		lv_opt3_3_0=ruleOptionalCallsSub3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalCallsSub1Rule());
	        }
       		set(
       			$current, 
       			"opt3",
        		lv_opt3_3_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.OptionalCallsSub3");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleOptionalCallsSub2
entryRuleOptionalCallsSub2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalCallsSub2Rule()); }
	 iv_ruleOptionalCallsSub2=ruleOptionalCallsSub2 
	 { $current=$iv_ruleOptionalCallsSub2.current; } 
	 EOF 
;

// Rule OptionalCallsSub2
ruleOptionalCallsSub2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sub2' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionalCallsSub2Access().getSub2Keyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOptionalCallsSub2Access().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalCallsSub2Rule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleOptionalCallsSub3
entryRuleOptionalCallsSub3 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalCallsSub3Rule()); }
	 iv_ruleOptionalCallsSub3=ruleOptionalCallsSub3 
	 { $current=$iv_ruleOptionalCallsSub3.current; } 
	 EOF 
;

// Rule OptionalCallsSub3
ruleOptionalCallsSub3 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sub3' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionalCallsSub3Access().getSub3Keyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOptionalCallsSub3Access().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalCallsSub3Rule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleRecursion
entryRuleRecursion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecursionRule()); }
	 iv_ruleRecursion=ruleRecursion 
	 { $current=$iv_ruleRecursion.current; } 
	 EOF 
;

// Rule Recursion
ruleRecursion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#4' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecursionAccess().getNumberSignDigitFourKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getRecursionAccess().getRecursionSubParserRuleCall_1()); 
    }
    this_RecursionSub_1=ruleRecursionSub
    { 
        $current = $this_RecursionSub_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRecursionSub
entryRuleRecursionSub returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecursionSubRule()); }
	 iv_ruleRecursionSub=ruleRecursionSub 
	 { $current=$iv_ruleRecursionSub.current; } 
	 EOF 
;

// Rule RecursionSub
ruleRecursionSub returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRecursionSubAccess().getRecursionSubAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecursionSubAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecursionSubAccess().getSubRecursionSubParserRuleCall_2_0_0()); 
	    }
		lv_sub_2_0=ruleRecursionSub		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecursionSubRule());
	        }
       		add(
       			$current, 
       			"sub",
        		lv_sub_2_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RecursionSub");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_vals_3_0=RULE_ID
		{
			newLeafNode(lv_vals_3_0, grammarAccess.getRecursionSubAccess().getValsIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecursionSubRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"vals",
        		lv_vals_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecursionSubAccess().getRightCurlyBracketKeyword_3());
    }
(
(
		lv_semi_5_0=	';' 
    {
        newLeafNode(lv_semi_5_0, grammarAccess.getRecursionSubAccess().getSemiSemicolonKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecursionSubRule());
	        }
       		setWithLastConsumed($current, "semi", true, ";");
	    }

)
)?)
;





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#5' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getNumberSignDigitFiveKeyword_0());
    }
(
(
		lv_names_1_0=RULE_ID
		{
			newLeafNode(lv_names_1_0, grammarAccess.getLoopAccess().getNamesIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)+(	otherlv_2='gr' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoopAccess().getGrKeyword_2_0());
    }
(
(
		lv_gr_3_0=RULE_ID
		{
			newLeafNode(lv_gr_3_0, grammarAccess.getLoopAccess().getGrIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"gr",
        		lv_gr_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))*((
(
		lv_ints_4_0=RULE_INT
		{
			newLeafNode(lv_ints_4_0, grammarAccess.getLoopAccess().getIntsINTTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"ints",
        		lv_ints_4_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)
    |(
(
		lv_strings_5_0=RULE_STRING
		{
			newLeafNode(lv_strings_5_0, grammarAccess.getLoopAccess().getStringsSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"strings",
        		lv_strings_5_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#6' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getNumberSignDigitSixKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAddParserRuleCall_1()); 
    }
    this_Add_1=ruleAdd
    { 
        $current = $this_Add_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	 iv_ruleAdd=ruleAdd 
	 { $current=$iv_ruleAdd.current; } 
	 EOF 
;

// Rule Add
ruleAdd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAddAccess().getMultParserRuleCall_0()); 
    }
    this_Mult_0=ruleMult
    { 
        $current = $this_Mult_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAddAccess().getAddLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAddAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAddAccess().getRightMultParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Mult");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMult
entryRuleMult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultRule()); }
	 iv_ruleMult=ruleMult 
	 { $current=$iv_ruleMult.current; } 
	 EOF 
;

// Rule Mult
ruleMult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultAccess().getPrimParserRuleCall_0()); 
    }
    this_Prim_0=rulePrim
    { 
        $current = $this_Prim_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultAccess().getMultLeftAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultAccess().getRightPrimParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrim		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Prim");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrim
entryRulePrim returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimRule()); }
	 iv_rulePrim=rulePrim 
	 { $current=$iv_rulePrim.current; } 
	 EOF 
;

// Rule Prim
rulePrim returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimAccess().getValueAction_0_0(),
            $current);
    }
)(
(
		lv_val_1_0=RULE_INT
		{
			newLeafNode(lv_val_1_0, grammarAccess.getPrimAccess().getValINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_1_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimAccess().getFunctionAction_1_0(),
            $current);
    }
)(
(
		lv_func_3_0=RULE_ID
		{
			newLeafNode(lv_func_3_0, grammarAccess.getPrimAccess().getFuncIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"func",
        		lv_func_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimAccess().getParamAddParserRuleCall_1_3_0()); 
	    }
		lv_param_5_0=ruleAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_5_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Add");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimAccess().getCommaKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimAccess().getParamAddParserRuleCall_1_4_1_0()); 
	    }
		lv_param_7_0=ruleAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimRule());
	        }
       		add(
       			$current, 
       			"param",
        		lv_param_7_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Add");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPrimAccess().getRightParenthesisKeyword_1_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimAccess().getPointerAction_2_0(),
            $current);
    }
)	otherlv_10='=>' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPrimAccess().getEqualsSignGreaterThanSignKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimAccess().getTargetPrimParserRuleCall_2_2_0()); 
	    }
		lv_target_11_0=rulePrim		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_11_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Prim");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPrimAccess().getLeftParenthesisKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimAccess().getAddParserRuleCall_3_1()); 
    }
    this_Add_13=ruleAdd
    { 
        $current = $this_Add_13.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getPrimAccess().getRightParenthesisKeyword_3_2());
    }
))
;





// Entry rule entryRuleRuleCalls12
entryRuleRuleCalls12 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleCalls12Rule()); }
	 iv_ruleRuleCalls12=ruleRuleCalls12 
	 { $current=$iv_ruleRuleCalls12.current; } 
	 EOF 
;

// Rule RuleCalls12
ruleRuleCalls12 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#7' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleCalls12Access().getNumberSignDigitSevenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleCalls12Access().getConstructorConstructorParserRuleCall_1_0()); 
	    }
		lv_constructor_1_0=ruleConstructor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleCalls12Rule());
	        }
       		set(
       			$current, 
       			"constructor",
        		lv_constructor_1_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Constructor");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleCalls12Access().getFieldsFieldParserRuleCall_2_0()); 
	    }
		lv_fields_2_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleCalls12Rule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Field");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='kw3' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuleCalls12Access().getKw3Keyword_3());
    }
)
;





// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	 iv_ruleConstructor=ruleConstructor 
	 { $current=$iv_ruleConstructor.current; } 
	 EOF 
;

// Rule Constructor
ruleConstructor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstructorAccess().getConstructorAction_0(),
            $current);
    }
)(
(
		lv_kw1_1_0=	'kw1' 
    {
        newLeafNode(lv_kw1_1_0, grammarAccess.getConstructorAccess().getKw1Kw1Keyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructorRule());
	        }
       		setWithLastConsumed($current, "kw1", true, "kw1");
	    }

)
)?)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_ID_0=RULE_ID
    { 
    newLeafNode(this_ID_0, grammarAccess.getFieldAccess().getIDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFieldAccess().getParameterParserRuleCall_1()); 
    }
    this_Parameter_1=ruleParameter
    { 
        $current = $this_Parameter_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterAccess().getParameterAction_0(),
            $current);
    }
)(
(
		lv_kw2_1_0=	'kw2' 
    {
        newLeafNode(lv_kw2_1_0, grammarAccess.getParameterAccess().getKw2Kw2Keyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "kw2", true, "kw2");
	    }

)
)?)
;





// Entry rule entryRuleNestedStart
entryRuleNestedStart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedStartRule()); }
	 iv_ruleNestedStart=ruleNestedStart 
	 { $current=$iv_ruleNestedStart.current; } 
	 EOF 
;

// Rule NestedStart
ruleNestedStart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNestedStartAccess().getNestedStartSubParserRuleCall_0()); 
    }
    this_NestedStartSub_0=ruleNestedStartSub
    { 
        $current = $this_NestedStartSub_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNestedStartAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNestedStartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleNestedStartSub
entryRuleNestedStartSub returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedStartSubRule()); }
	 iv_ruleNestedStartSub=ruleNestedStartSub 
	 { $current=$iv_ruleNestedStartSub.current; } 
	 EOF 
;

// Rule NestedStartSub
ruleNestedStartSub returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#8' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNestedStartSubAccess().getNumberSignDigitEightKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNestedStartSubAccess().getNestedStartSubAction_1(),
            $current);
    }
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


