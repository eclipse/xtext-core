/*
 * generated by Xtext
 */
package org.eclipse.xtext.parsetree.formatter.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ElementMatcherTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleCallsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOptionalCallsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecursionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLoopParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRuleCalls12ParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNestedStartParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Model:
		//	Simple | RuleCalls | OptionalCalls | Recursion | Loop | Expression | RuleCalls12 | NestedStart;
		@Override public ParserRule getRule() { return rule; }

		//Simple | RuleCalls | OptionalCalls | Recursion | Loop | Expression | RuleCalls12 | NestedStart
		public Alternatives getAlternatives() { return cAlternatives; }

		//Simple
		public RuleCall getSimpleParserRuleCall_0() { return cSimpleParserRuleCall_0; }

		//RuleCalls
		public RuleCall getRuleCallsParserRuleCall_1() { return cRuleCallsParserRuleCall_1; }

		//OptionalCalls
		public RuleCall getOptionalCallsParserRuleCall_2() { return cOptionalCallsParserRuleCall_2; }

		//Recursion
		public RuleCall getRecursionParserRuleCall_3() { return cRecursionParserRuleCall_3; }

		//Loop
		public RuleCall getLoopParserRuleCall_4() { return cLoopParserRuleCall_4; }

		//Expression
		public RuleCall getExpressionParserRuleCall_5() { return cExpressionParserRuleCall_5; }

		//RuleCalls12
		public RuleCall getRuleCalls12ParserRuleCall_6() { return cRuleCalls12ParserRuleCall_6; }

		//NestedStart
		public RuleCall getNestedStartParserRuleCall_7() { return cNestedStartParserRuleCall_7; }
	}

	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Simple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cKw1Keyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionalAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionalIDTerminalRuleCall_2_1_0 = (RuleCall)cOptionalAssignment_2_1.eContents().get(0);
		private final Assignment cDatatypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatatypeFQNParserRuleCall_3_0 = (RuleCall)cDatatypeAssignment_3.eContents().get(0);
		
		//Simple:
		//	'#1' name=ID ('kw1' optional=ID)? datatype=FQN;
		@Override public ParserRule getRule() { return rule; }

		//'#1' name=ID ('kw1' optional=ID)? datatype=FQN
		public Group getGroup() { return cGroup; }

		//'#1'
		public Keyword getNumberSignDigitOneKeyword_0() { return cNumberSignDigitOneKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('kw1' optional=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//'kw1'
		public Keyword getKw1Keyword_2_0() { return cKw1Keyword_2_0; }

		//optional=ID
		public Assignment getOptionalAssignment_2_1() { return cOptionalAssignment_2_1; }

		//ID
		public RuleCall getOptionalIDTerminalRuleCall_2_1_0() { return cOptionalIDTerminalRuleCall_2_1_0; }

		//datatype=FQN
		public Assignment getDatatypeAssignment_3() { return cDatatypeAssignment_3; }

		//FQN
		public RuleCall getDatatypeFQNParserRuleCall_3_0() { return cDatatypeFQNParserRuleCall_3_0; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID);
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class RuleCallsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RuleCalls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRuleCallsSubParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCall1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCall1RuleCallsAss1ParserRuleCall_3_0 = (RuleCall)cCall1Assignment_3.eContents().get(0);
		private final Assignment cCall2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCall2RuleCallsAss2ParserRuleCall_4_0 = (RuleCall)cCall2Assignment_4.eContents().get(0);
		
		//RuleCalls:
		//	'#2' RuleCallsSub name=ID call1=RuleCallsAss1? call2=RuleCallsAss2?;
		@Override public ParserRule getRule() { return rule; }

		//'#2' RuleCallsSub name=ID call1=RuleCallsAss1? call2=RuleCallsAss2?
		public Group getGroup() { return cGroup; }

		//'#2'
		public Keyword getNumberSignDigitTwoKeyword_0() { return cNumberSignDigitTwoKeyword_0; }

		//RuleCallsSub
		public RuleCall getRuleCallsSubParserRuleCall_1() { return cRuleCallsSubParserRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//call1=RuleCallsAss1?
		public Assignment getCall1Assignment_3() { return cCall1Assignment_3; }

		//RuleCallsAss1
		public RuleCall getCall1RuleCallsAss1ParserRuleCall_3_0() { return cCall1RuleCallsAss1ParserRuleCall_3_0; }

		//call2=RuleCallsAss2?
		public Assignment getCall2Assignment_4() { return cCall2Assignment_4; }

		//RuleCallsAss2
		public RuleCall getCall2RuleCallsAss2ParserRuleCall_4_0() { return cCall2RuleCallsAss2ParserRuleCall_4_0; }
	}

	public class RuleCallsSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RuleCallsSub");
		private final Assignment cSubAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSubSubKeyword_0 = (Keyword)cSubAssignment.eContents().get(0);
		
		//RuleCallsSub:
		//	sub='sub';
		@Override public ParserRule getRule() { return rule; }

		//sub='sub'
		public Assignment getSubAssignment() { return cSubAssignment; }

		//'sub'
		public Keyword getSubSubKeyword_0() { return cSubSubKeyword_0; }
	}

	public class RuleCallsAss1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RuleCallsAss1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAss1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RuleCallsAss1:
		//	'ass1' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'ass1' name=ID
		public Group getGroup() { return cGroup; }

		//'ass1'
		public Keyword getAss1Keyword_0() { return cAss1Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RuleCallsAss2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RuleCallsAss2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAss2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RuleCallsAss2:
		//	'ass2' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'ass2' name=ID
		public Group getGroup() { return cGroup; }

		//'ass2'
		public Keyword getAss2Keyword_0() { return cAss2Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class OptionalCallsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.OptionalCalls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cOptionalCallsAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cOpt1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpt1OptionalCallsSub1ParserRuleCall_2_0 = (RuleCall)cOpt1Assignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//OptionalCalls:
		//	'#3' {OptionalCalls} opt1=OptionalCallsSub1? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'#3' {OptionalCalls} opt1=OptionalCallsSub1? name=ID
		public Group getGroup() { return cGroup; }

		//'#3'
		public Keyword getNumberSignDigitThreeKeyword_0() { return cNumberSignDigitThreeKeyword_0; }

		//{OptionalCalls}
		public Action getOptionalCallsAction_1() { return cOptionalCallsAction_1; }

		//opt1=OptionalCallsSub1?
		public Assignment getOpt1Assignment_2() { return cOpt1Assignment_2; }

		//OptionalCallsSub1
		public RuleCall getOpt1OptionalCallsSub1ParserRuleCall_2_0() { return cOpt1OptionalCallsSub1ParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class OptionalCallsSub1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.OptionalCallsSub1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionalCallsSub1Action_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpt2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpt2OptionalCallsSub2ParserRuleCall_1_0 = (RuleCall)cOpt2Assignment_1.eContents().get(0);
		private final Keyword cSubKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpt3Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpt3OptionalCallsSub3ParserRuleCall_3_0 = (RuleCall)cOpt3Assignment_3.eContents().get(0);
		
		//OptionalCallsSub1:
		//	{OptionalCallsSub1} opt2=OptionalCallsSub2? 'sub' opt3=OptionalCallsSub3?;
		@Override public ParserRule getRule() { return rule; }

		//{OptionalCallsSub1} opt2=OptionalCallsSub2? 'sub' opt3=OptionalCallsSub3?
		public Group getGroup() { return cGroup; }

		//{OptionalCallsSub1}
		public Action getOptionalCallsSub1Action_0() { return cOptionalCallsSub1Action_0; }

		//opt2=OptionalCallsSub2?
		public Assignment getOpt2Assignment_1() { return cOpt2Assignment_1; }

		//OptionalCallsSub2
		public RuleCall getOpt2OptionalCallsSub2ParserRuleCall_1_0() { return cOpt2OptionalCallsSub2ParserRuleCall_1_0; }

		//'sub'
		public Keyword getSubKeyword_2() { return cSubKeyword_2; }

		//opt3=OptionalCallsSub3?
		public Assignment getOpt3Assignment_3() { return cOpt3Assignment_3; }

		//OptionalCallsSub3
		public RuleCall getOpt3OptionalCallsSub3ParserRuleCall_3_0() { return cOpt3OptionalCallsSub3ParserRuleCall_3_0; }
	}

	public class OptionalCallsSub2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.OptionalCallsSub2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSub2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OptionalCallsSub2:
		//	'sub2' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'sub2' name=ID
		public Group getGroup() { return cGroup; }

		//'sub2'
		public Keyword getSub2Keyword_0() { return cSub2Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class OptionalCallsSub3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.OptionalCallsSub3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSub3Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OptionalCallsSub3:
		//	'sub3' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'sub3' name=ID
		public Group getGroup() { return cGroup; }

		//'sub3'
		public Keyword getSub3Keyword_0() { return cSub3Keyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RecursionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Recursion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRecursionSubParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Recursion:
		//	'#4' RecursionSub;
		@Override public ParserRule getRule() { return rule; }

		//'#4' RecursionSub
		public Group getGroup() { return cGroup; }

		//'#4'
		public Keyword getNumberSignDigitFourKeyword_0() { return cNumberSignDigitFourKeyword_0; }

		//RecursionSub
		public RuleCall getRecursionSubParserRuleCall_1() { return cRecursionSubParserRuleCall_1; }
	}

	public class RecursionSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RecursionSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecursionSubAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSubAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSubRecursionSubParserRuleCall_2_0_0 = (RuleCall)cSubAssignment_2_0.eContents().get(0);
		private final Assignment cValsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValsIDTerminalRuleCall_2_1_0 = (RuleCall)cValsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSemiAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cSemiSemicolonKeyword_4_0 = (Keyword)cSemiAssignment_4.eContents().get(0);
		
		//RecursionSub:
		//	{RecursionSub} '{' (sub+=RecursionSub | vals+=ID)* '}' semi?=';'?;
		@Override public ParserRule getRule() { return rule; }

		//{RecursionSub} '{' (sub+=RecursionSub | vals+=ID)* '}' semi?=';'?
		public Group getGroup() { return cGroup; }

		//{RecursionSub}
		public Action getRecursionSubAction_0() { return cRecursionSubAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(sub+=RecursionSub | vals+=ID)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//sub+=RecursionSub
		public Assignment getSubAssignment_2_0() { return cSubAssignment_2_0; }

		//RecursionSub
		public RuleCall getSubRecursionSubParserRuleCall_2_0_0() { return cSubRecursionSubParserRuleCall_2_0_0; }

		//vals+=ID
		public Assignment getValsAssignment_2_1() { return cValsAssignment_2_1; }

		//ID
		public RuleCall getValsIDTerminalRuleCall_2_1_0() { return cValsIDTerminalRuleCall_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//semi?=';'?
		public Assignment getSemiAssignment_4() { return cSemiAssignment_4; }

		//';'
		public Keyword getSemiSemicolonKeyword_4_0() { return cSemiSemicolonKeyword_4_0; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cGrKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGrAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGrIDTerminalRuleCall_2_1_0 = (RuleCall)cGrAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIntsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cIntsINTTerminalRuleCall_3_0_0 = (RuleCall)cIntsAssignment_3_0.eContents().get(0);
		private final Assignment cStringsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cStringsSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cStringsAssignment_3_1.eContents().get(0);
		
		//Loop:
		//	'#5' names+=ID+ ('gr' gr+=ID)* (ints+=INT | strings+=STRING)*;
		@Override public ParserRule getRule() { return rule; }

		//'#5' names+=ID+ ('gr' gr+=ID)* (ints+=INT | strings+=STRING)*
		public Group getGroup() { return cGroup; }

		//'#5'
		public Keyword getNumberSignDigitFiveKeyword_0() { return cNumberSignDigitFiveKeyword_0; }

		//names+=ID+
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_0() { return cNamesIDTerminalRuleCall_1_0; }

		//('gr' gr+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//'gr'
		public Keyword getGrKeyword_2_0() { return cGrKeyword_2_0; }

		//gr+=ID
		public Assignment getGrAssignment_2_1() { return cGrAssignment_2_1; }

		//ID
		public RuleCall getGrIDTerminalRuleCall_2_1_0() { return cGrIDTerminalRuleCall_2_1_0; }

		//(ints+=INT | strings+=STRING)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ints+=INT
		public Assignment getIntsAssignment_3_0() { return cIntsAssignment_3_0; }

		//INT
		public RuleCall getIntsINTTerminalRuleCall_3_0_0() { return cIntsINTTerminalRuleCall_3_0_0; }

		//strings+=STRING
		public Assignment getStringsAssignment_3_1() { return cStringsAssignment_3_1; }

		//STRING
		public RuleCall getStringsSTRINGTerminalRuleCall_3_1_0() { return cStringsSTRINGTerminalRuleCall_3_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAddParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Expression:
		//	'#6' Add;
		@Override public ParserRule getRule() { return rule; }

		//'#6' Add
		public Group getGroup() { return cGroup; }

		//'#6'
		public Keyword getNumberSignDigitSixKeyword_0() { return cNumberSignDigitSixKeyword_0; }

		//Add
		public RuleCall getAddParserRuleCall_1() { return cAddParserRuleCall_1; }
	}

	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Add Expression:
		//	Mult ({Add.left=current} '+' right=Mult)*
		@Override public ParserRule getRule() { return rule; }

		//Mult ({Add.left=current} '+' right=Mult)*
		public Group getGroup() { return cGroup; }

		//Mult
		public RuleCall getMultParserRuleCall_0() { return cMultParserRuleCall_0; }

		//({Add.left=current} '+' right=Mult)*
		public Group getGroup_1() { return cGroup_1; }

		//{Add.left=current}
		public Action getAddLeftAction_1_0() { return cAddLeftAction_1_0; }

		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Mult
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Mult
		public RuleCall getRightMultParserRuleCall_1_2_0() { return cRightMultParserRuleCall_1_2_0; }
	}

	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Mult Expression:
		//	Prim ({Mult.left=current} '*' right=Prim)*
		@Override public ParserRule getRule() { return rule; }

		//Prim ({Mult.left=current} '*' right=Prim)*
		public Group getGroup() { return cGroup; }

		//Prim
		public RuleCall getPrimParserRuleCall_0() { return cPrimParserRuleCall_0; }

		//({Mult.left=current} '*' right=Prim)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mult.left=current}
		public Action getMultLeftAction_1_0() { return cMultLeftAction_1_0; }

		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=Prim
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Prim
		public RuleCall getRightPrimParserRuleCall_1_2_0() { return cRightPrimParserRuleCall_1_2_0; }
	}

	public class PrimElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Prim");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0_1_0 = (RuleCall)cValAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFunctionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFuncAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFuncIDTerminalRuleCall_1_1_0 = (RuleCall)cFuncAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cParamAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cParamAddParserRuleCall_1_3_0 = (RuleCall)cParamAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cParamAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cParamAddParserRuleCall_1_4_1_0 = (RuleCall)cParamAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPointerAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTargetAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTargetPrimParserRuleCall_2_2_0 = (RuleCall)cTargetAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAddParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Prim Expression:
		//	{Value} val=INT | {Function} func=ID '(' param+=Add (',' param+=Add)* ')' | {Pointer} '=>' target=Prim |
		//	'(' Add ')'
		@Override public ParserRule getRule() { return rule; }

		//{Value} val=INT | {Function} func=ID '(' param+=Add (',' param+=Add)* ')' | {Pointer} '=>' target=Prim | '(' Add ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Value} val=INT
		public Group getGroup_0() { return cGroup_0; }

		//{Value}
		public Action getValueAction_0_0() { return cValueAction_0_0; }

		//val=INT
		public Assignment getValAssignment_0_1() { return cValAssignment_0_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_0_1_0() { return cValINTTerminalRuleCall_0_1_0; }

		//{Function} func=ID '(' param+=Add (',' param+=Add)* ')'
		public Group getGroup_1() { return cGroup_1; }

		//{Function}
		public Action getFunctionAction_1_0() { return cFunctionAction_1_0; }

		//func=ID
		public Assignment getFuncAssignment_1_1() { return cFuncAssignment_1_1; }

		//ID
		public RuleCall getFuncIDTerminalRuleCall_1_1_0() { return cFuncIDTerminalRuleCall_1_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//param+=Add
		public Assignment getParamAssignment_1_3() { return cParamAssignment_1_3; }

		//Add
		public RuleCall getParamAddParserRuleCall_1_3_0() { return cParamAddParserRuleCall_1_3_0; }

		//(',' param+=Add)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//param+=Add
		public Assignment getParamAssignment_1_4_1() { return cParamAssignment_1_4_1; }

		//Add
		public RuleCall getParamAddParserRuleCall_1_4_1_0() { return cParamAddParserRuleCall_1_4_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//{Pointer} '=>' target=Prim
		public Group getGroup_2() { return cGroup_2; }

		//{Pointer}
		public Action getPointerAction_2_0() { return cPointerAction_2_0; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2_1() { return cEqualsSignGreaterThanSignKeyword_2_1; }

		//target=Prim
		public Assignment getTargetAssignment_2_2() { return cTargetAssignment_2_2; }

		//Prim
		public RuleCall getTargetPrimParserRuleCall_2_2_0() { return cTargetPrimParserRuleCall_2_2_0; }

		//'(' Add ')'
		public Group getGroup_3() { return cGroup_3; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//Add
		public RuleCall getAddParserRuleCall_3_1() { return cAddParserRuleCall_3_1; }

		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class RuleCalls12Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.RuleCalls12");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSevenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstructorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstructorConstructorParserRuleCall_1_0 = (RuleCall)cConstructorAssignment_1.eContents().get(0);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsFieldParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Keyword cKw3Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RuleCalls12:
		//	"#7" constructor=Constructor fields+=Field "kw3";
		@Override public ParserRule getRule() { return rule; }

		//"#7" constructor=Constructor fields+=Field "kw3"
		public Group getGroup() { return cGroup; }

		//"#7"
		public Keyword getNumberSignDigitSevenKeyword_0() { return cNumberSignDigitSevenKeyword_0; }

		//constructor=Constructor
		public Assignment getConstructorAssignment_1() { return cConstructorAssignment_1; }

		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_1_0() { return cConstructorConstructorParserRuleCall_1_0; }

		//fields+=Field
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_0() { return cFieldsFieldParserRuleCall_2_0; }

		//"kw3"
		public Keyword getKw3Keyword_3() { return cKw3Keyword_3; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKw1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKw1Kw1Keyword_1_0 = (Keyword)cKw1Assignment_1.eContents().get(0);
		
		//Constructor:
		//	{Constructor} kw1?="kw1"?;
		@Override public ParserRule getRule() { return rule; }

		//{Constructor} kw1?="kw1"?
		public Group getGroup() { return cGroup; }

		//{Constructor}
		public Action getConstructorAction_0() { return cConstructorAction_0; }

		//kw1?="kw1"?
		public Assignment getKw1Assignment_1() { return cKw1Assignment_1; }

		//"kw1"
		public Keyword getKw1Kw1Keyword_1_0() { return cKw1Kw1Keyword_1_0; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Field:
		//	ID Parameter;
		@Override public ParserRule getRule() { return rule; }

		//ID Parameter
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKw2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKw2Kw2Keyword_1_0 = (Keyword)cKw2Assignment_1.eContents().get(0);
		
		//Parameter:
		//	{Parameter} kw2?="kw2"?;
		@Override public ParserRule getRule() { return rule; }

		//{Parameter} kw2?="kw2"?
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//kw2?="kw2"?
		public Assignment getKw2Assignment_1() { return cKw2Assignment_1; }

		//"kw2"
		public Keyword getKw2Kw2Keyword_1_0() { return cKw2Kw2Keyword_1_0; }
	}

	public class NestedStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.NestedStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNestedStartSubParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NestedStart:
		//	NestedStartSub name=ID;
		@Override public ParserRule getRule() { return rule; }

		//NestedStartSub name=ID
		public Group getGroup() { return cGroup; }

		//NestedStartSub
		public RuleCall getNestedStartSubParserRuleCall_0() { return cNestedStartSubParserRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class NestedStartSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage.NestedStartSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitEightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cNestedStartSubAction_1 = (Action)cGroup.eContents().get(1);
		
		//NestedStartSub:
		//	"#8" {NestedStartSub};
		@Override public ParserRule getRule() { return rule; }

		//"#8" {NestedStartSub}
		public Group getGroup() { return cGroup; }

		//"#8"
		public Keyword getNumberSignDigitEightKeyword_0() { return cNumberSignDigitEightKeyword_0; }

		//{NestedStartSub}
		public Action getNestedStartSubAction_1() { return cNestedStartSubAction_1; }
	}
	
	
	private final ModelElements pModel;
	private final SimpleElements pSimple;
	private final FQNElements pFQN;
	private final RuleCallsElements pRuleCalls;
	private final RuleCallsSubElements pRuleCallsSub;
	private final RuleCallsAss1Elements pRuleCallsAss1;
	private final RuleCallsAss2Elements pRuleCallsAss2;
	private final OptionalCallsElements pOptionalCalls;
	private final OptionalCallsSub1Elements pOptionalCallsSub1;
	private final OptionalCallsSub2Elements pOptionalCallsSub2;
	private final OptionalCallsSub3Elements pOptionalCallsSub3;
	private final RecursionElements pRecursion;
	private final RecursionSubElements pRecursionSub;
	private final LoopElements pLoop;
	private final ExpressionElements pExpression;
	private final AddElements pAdd;
	private final MultElements pMult;
	private final PrimElements pPrim;
	private final RuleCalls12Elements pRuleCalls12;
	private final ConstructorElements pConstructor;
	private final FieldElements pField;
	private final ParameterElements pParameter;
	private final NestedStartElements pNestedStart;
	private final NestedStartSubElements pNestedStartSub;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ElementMatcherTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSimple = new SimpleElements();
		this.pFQN = new FQNElements();
		this.pRuleCalls = new RuleCallsElements();
		this.pRuleCallsSub = new RuleCallsSubElements();
		this.pRuleCallsAss1 = new RuleCallsAss1Elements();
		this.pRuleCallsAss2 = new RuleCallsAss2Elements();
		this.pOptionalCalls = new OptionalCallsElements();
		this.pOptionalCallsSub1 = new OptionalCallsSub1Elements();
		this.pOptionalCallsSub2 = new OptionalCallsSub2Elements();
		this.pOptionalCallsSub3 = new OptionalCallsSub3Elements();
		this.pRecursion = new RecursionElements();
		this.pRecursionSub = new RecursionSubElements();
		this.pLoop = new LoopElements();
		this.pExpression = new ExpressionElements();
		this.pAdd = new AddElements();
		this.pMult = new MultElements();
		this.pPrim = new PrimElements();
		this.pRuleCalls12 = new RuleCalls12Elements();
		this.pConstructor = new ConstructorElements();
		this.pField = new FieldElements();
		this.pParameter = new ParameterElements();
		this.pNestedStart = new NestedStartElements();
		this.pNestedStartSub = new NestedStartSubElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parsetree.formatter.ElementMatcherTestLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Simple | RuleCalls | OptionalCalls | Recursion | Loop | Expression | RuleCalls12 | NestedStart;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Simple:
	//	'#1' name=ID ('kw1' optional=ID)? datatype=FQN;
	public SimpleElements getSimpleAccess() {
		return pSimple;
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}

	//FQN:
	//	ID ('.' ID);
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//RuleCalls:
	//	'#2' RuleCallsSub name=ID call1=RuleCallsAss1? call2=RuleCallsAss2?;
	public RuleCallsElements getRuleCallsAccess() {
		return pRuleCalls;
	}
	
	public ParserRule getRuleCallsRule() {
		return getRuleCallsAccess().getRule();
	}

	//RuleCallsSub:
	//	sub='sub';
	public RuleCallsSubElements getRuleCallsSubAccess() {
		return pRuleCallsSub;
	}
	
	public ParserRule getRuleCallsSubRule() {
		return getRuleCallsSubAccess().getRule();
	}

	//RuleCallsAss1:
	//	'ass1' name=ID;
	public RuleCallsAss1Elements getRuleCallsAss1Access() {
		return pRuleCallsAss1;
	}
	
	public ParserRule getRuleCallsAss1Rule() {
		return getRuleCallsAss1Access().getRule();
	}

	//RuleCallsAss2:
	//	'ass2' name=ID;
	public RuleCallsAss2Elements getRuleCallsAss2Access() {
		return pRuleCallsAss2;
	}
	
	public ParserRule getRuleCallsAss2Rule() {
		return getRuleCallsAss2Access().getRule();
	}

	//OptionalCalls:
	//	'#3' {OptionalCalls} opt1=OptionalCallsSub1? name=ID;
	public OptionalCallsElements getOptionalCallsAccess() {
		return pOptionalCalls;
	}
	
	public ParserRule getOptionalCallsRule() {
		return getOptionalCallsAccess().getRule();
	}

	//OptionalCallsSub1:
	//	{OptionalCallsSub1} opt2=OptionalCallsSub2? 'sub' opt3=OptionalCallsSub3?;
	public OptionalCallsSub1Elements getOptionalCallsSub1Access() {
		return pOptionalCallsSub1;
	}
	
	public ParserRule getOptionalCallsSub1Rule() {
		return getOptionalCallsSub1Access().getRule();
	}

	//OptionalCallsSub2:
	//	'sub2' name=ID;
	public OptionalCallsSub2Elements getOptionalCallsSub2Access() {
		return pOptionalCallsSub2;
	}
	
	public ParserRule getOptionalCallsSub2Rule() {
		return getOptionalCallsSub2Access().getRule();
	}

	//OptionalCallsSub3:
	//	'sub3' name=ID;
	public OptionalCallsSub3Elements getOptionalCallsSub3Access() {
		return pOptionalCallsSub3;
	}
	
	public ParserRule getOptionalCallsSub3Rule() {
		return getOptionalCallsSub3Access().getRule();
	}

	//Recursion:
	//	'#4' RecursionSub;
	public RecursionElements getRecursionAccess() {
		return pRecursion;
	}
	
	public ParserRule getRecursionRule() {
		return getRecursionAccess().getRule();
	}

	//RecursionSub:
	//	{RecursionSub} '{' (sub+=RecursionSub | vals+=ID)* '}' semi?=';'?;
	public RecursionSubElements getRecursionSubAccess() {
		return pRecursionSub;
	}
	
	public ParserRule getRecursionSubRule() {
		return getRecursionSubAccess().getRule();
	}

	//Loop:
	//	'#5' names+=ID+ ('gr' gr+=ID)* (ints+=INT | strings+=STRING)*;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//Expression:
	//	'#6' Add;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Add Expression:
	//	Mult ({Add.left=current} '+' right=Mult)*
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}

	//Mult Expression:
	//	Prim ({Mult.left=current} '*' right=Prim)*
	public MultElements getMultAccess() {
		return pMult;
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}

	//Prim Expression:
	//	{Value} val=INT | {Function} func=ID '(' param+=Add (',' param+=Add)* ')' | {Pointer} '=>' target=Prim |
	//	'(' Add ')'
	public PrimElements getPrimAccess() {
		return pPrim;
	}
	
	public ParserRule getPrimRule() {
		return getPrimAccess().getRule();
	}

	//RuleCalls12:
	//	"#7" constructor=Constructor fields+=Field "kw3";
	public RuleCalls12Elements getRuleCalls12Access() {
		return pRuleCalls12;
	}
	
	public ParserRule getRuleCalls12Rule() {
		return getRuleCalls12Access().getRule();
	}

	//Constructor:
	//	{Constructor} kw1?="kw1"?;
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//Field:
	//	ID Parameter;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Parameter:
	//	{Parameter} kw2?="kw2"?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//NestedStart:
	//	NestedStartSub name=ID;
	public NestedStartElements getNestedStartAccess() {
		return pNestedStart;
	}
	
	public ParserRule getNestedStartRule() {
		return getNestedStartAccess().getRule();
	}

	//NestedStartSub:
	//	"#8" {NestedStartSub};
	public NestedStartSubElements getNestedStartSubAccess() {
		return pNestedStartSub;
	}
	
	public ParserRule getNestedStartSubRule() {
		return getNestedStartSubAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
