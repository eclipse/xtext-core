/*
 * generated by Xtext
 */
package org.eclipse.xtext.parsetree.formatter.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;

import org.eclipse.xtext.parsetree.formatter.services.ElementMatcherTestLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class ElementMatcherTestLanguageParsetreeConstructor extends org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor {
		
	@Inject
	private ElementMatcherTestLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_Alternatives(this, this, 0, inst);
			case 1: return new Simple_Group(this, this, 1, inst);
			case 2: return new RuleCalls_Group(this, this, 2, inst);
			case 3: return new RuleCallsSub_SubAssignment(this, this, 3, inst);
			case 4: return new RuleCallsAss1_Group(this, this, 4, inst);
			case 5: return new RuleCallsAss2_Group(this, this, 5, inst);
			case 6: return new OptionalCalls_Group(this, this, 6, inst);
			case 7: return new OptionalCallsSub1_Group(this, this, 7, inst);
			case 8: return new OptionalCallsSub2_Group(this, this, 8, inst);
			case 9: return new OptionalCallsSub3_Group(this, this, 9, inst);
			case 10: return new Recursion_Group(this, this, 10, inst);
			case 11: return new RecursionSub_Group(this, this, 11, inst);
			case 12: return new Loop_Group(this, this, 12, inst);
			case 13: return new Expression_Group(this, this, 13, inst);
			case 14: return new Add_Group(this, this, 14, inst);
			case 15: return new Mult_Group(this, this, 15, inst);
			case 16: return new Prim_Alternatives(this, this, 16, inst);
			case 17: return new RuleCalls12_Group(this, this, 17, inst);
			case 18: return new Constructor_Group(this, this, 18, inst);
			case 19: return new Field_Group(this, this, 19, inst);
			case 20: return new Parameter_Group(this, this, 20, inst);
			case 21: return new NestedStart_Group(this, this, 21, inst);
			case 22: return new NestedStartSub_Group(this, this, 22, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	Simple | RuleCalls | OptionalCalls | Recursion | Loop | Expression | RuleCalls12 | NestedStart;
 *
 **/

// Simple | RuleCalls | OptionalCalls | Recursion | Loop | Expression | RuleCalls12 | NestedStart
protected class Model_Alternatives extends AlternativesToken {

	public Model_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getModelAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_SimpleParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Model_RuleCallsParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Model_OptionalCallsParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Model_RecursionParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Model_LoopParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Model_ExpressionParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Model_RuleCalls12ParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Model_NestedStartParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddAccess().getAddLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getFunctionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLoopRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultAccess().getMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNestedStartSubAccess().getNestedStartSubAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOptionalCallsAccess().getOptionalCallsAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getPointerAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRecursionSubAccess().getRecursionSubAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleCalls12Rule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRuleCallsSubRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getValueAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Simple
protected class Model_SimpleParserRuleCall_0 extends RuleCallToken {
	
	public Model_SimpleParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getSimpleParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Simple_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RuleCalls
protected class Model_RuleCallsParserRuleCall_1 extends RuleCallToken {
	
	public Model_RuleCallsParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getRuleCallsParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCalls_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleCallsSubRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleCalls_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OptionalCalls
protected class Model_OptionalCallsParserRuleCall_2 extends RuleCallToken {
	
	public Model_OptionalCallsParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getOptionalCallsParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCalls_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionalCallsAccess().getOptionalCallsAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(OptionalCalls_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Recursion
protected class Model_RecursionParserRuleCall_3 extends RuleCallToken {
	
	public Model_RecursionParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getRecursionParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Recursion_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRecursionSubAccess().getRecursionSubAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Recursion_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Loop
protected class Model_LoopParserRuleCall_4 extends RuleCallToken {
	
	public Model_LoopParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getLoopParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLoopRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Loop_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Expression
protected class Model_ExpressionParserRuleCall_5 extends RuleCallToken {
	
	public Model_ExpressionParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getExpressionParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddAccess().getAddLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getFunctionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultAccess().getMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getPointerAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getValueAction_0_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Expression_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RuleCalls12
protected class Model_RuleCalls12ParserRuleCall_6 extends RuleCallToken {
	
	public Model_RuleCalls12ParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getRuleCalls12ParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCalls12_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleCalls12Rule().getType().getClassifier())
			return null;
		if(checkForRecursion(RuleCalls12_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NestedStart
protected class Model_NestedStartParserRuleCall_7 extends RuleCallToken {
	
	public Model_NestedStartParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getModelAccess().getNestedStartParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NestedStart_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNestedStartSubAccess().getNestedStartSubAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(NestedStart_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule Simple ****************
 *
 * Simple:
 * 	'#1' name=ID ('kw1' optional=ID)? datatype=FQN;
 *
 **/

// '#1' name=ID ('kw1' optional=ID)? datatype=FQN
protected class Simple_Group extends GroupToken {
	
	public Simple_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_DatatypeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// '#1'
protected class Simple_NumberSignDigitOneKeyword_0 extends KeywordToken  {
	
	public Simple_NumberSignDigitOneKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAccess().getNumberSignDigitOneKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class Simple_NameAssignment_1 extends AssignmentToken  {
	
	public Simple_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_NumberSignDigitOneKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSimpleAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ('kw1' optional=ID)?
protected class Simple_Group_2 extends GroupToken {
	
	public Simple_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_OptionalAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// 'kw1'
protected class Simple_Kw1Keyword_2_0 extends KeywordToken  {
	
	public Simple_Kw1Keyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAccess().getKw1Keyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// optional=ID
protected class Simple_OptionalAssignment_2_1 extends AssignmentToken  {
	
	public Simple_OptionalAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAccess().getOptionalAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_Kw1Keyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("optional",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("optional");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleAccess().getOptionalIDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSimpleAccess().getOptionalIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// datatype=FQN
protected class Simple_DatatypeAssignment_3 extends AssignmentToken  {
	
	public Simple_DatatypeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAccess().getDatatypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Simple_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Simple_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("datatype",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("datatype");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleAccess().getDatatypeFQNParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSimpleAccess().getDatatypeFQNParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Simple ****************/



/************ begin Rule RuleCalls ****************
 *
 * RuleCalls:
 * 	'#2' RuleCallsSub name=ID call1=RuleCallsAss1? call2=RuleCallsAss2?;
 *
 **/

// '#2' RuleCallsSub name=ID call1=RuleCallsAss1? call2=RuleCallsAss2?
protected class RuleCalls_Group extends GroupToken {
	
	public RuleCalls_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleCallsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCalls_Call2Assignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RuleCalls_Call1Assignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new RuleCalls_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleCallsSubRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// '#2'
protected class RuleCalls_NumberSignDigitTwoKeyword_0 extends KeywordToken  {
	
	public RuleCalls_NumberSignDigitTwoKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleCallsAccess().getNumberSignDigitTwoKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// RuleCallsSub
protected class RuleCalls_RuleCallsSubParserRuleCall_1 extends RuleCallToken {
	
	public RuleCalls_RuleCallsSubParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRuleCallsAccess().getRuleCallsSubParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCallsSub_SubAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RuleCallsSub_SubAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCalls_NumberSignDigitTwoKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// name=ID
protected class RuleCalls_NameAssignment_2 extends AssignmentToken  {
	
	public RuleCalls_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleCallsAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCalls_RuleCallsSubParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRuleCallsAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRuleCallsAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// call1=RuleCallsAss1?
protected class RuleCalls_Call1Assignment_3 extends AssignmentToken  {
	
	public RuleCalls_Call1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleCallsAccess().getCall1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCallsAss1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("call1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("call1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleCallsAss1Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleCallsAccess().getCall1RuleCallsAss1ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleCalls_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// call2=RuleCallsAss2?
protected class RuleCalls_Call2Assignment_4 extends AssignmentToken  {
	
	public RuleCalls_Call2Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleCallsAccess().getCall2Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCallsAss2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("call2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("call2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRuleCallsAss2Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleCallsAccess().getCall2RuleCallsAss2ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleCalls_Call1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RuleCalls_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule RuleCalls ****************/


/************ begin Rule RuleCallsSub ****************
 *
 * RuleCallsSub:
 * 	sub='sub';
 *
 **/

// sub='sub'
protected class RuleCallsSub_SubAssignment extends AssignmentToken  {
	
	public RuleCallsSub_SubAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleCallsSubAccess().getSubAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleCallsSubRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("sub",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sub");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getRuleCallsSubAccess().getSubSubKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getRuleCallsSubAccess().getSubSubKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule RuleCallsSub ****************/


/************ begin Rule RuleCallsAss1 ****************
 *
 * RuleCallsAss1:
 * 	'ass1' name=ID;
 *
 **/

// 'ass1' name=ID
protected class RuleCallsAss1_Group extends GroupToken {
	
	public RuleCallsAss1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleCallsAss1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCallsAss1_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleCallsAss1Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// 'ass1'
protected class RuleCallsAss1_Ass1Keyword_0 extends KeywordToken  {
	
	public RuleCallsAss1_Ass1Keyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleCallsAss1Access().getAss1Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class RuleCallsAss1_NameAssignment_1 extends AssignmentToken  {
	
	public RuleCallsAss1_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleCallsAss1Access().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCallsAss1_Ass1Keyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRuleCallsAss1Access().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRuleCallsAss1Access().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RuleCallsAss1 ****************/


/************ begin Rule RuleCallsAss2 ****************
 *
 * RuleCallsAss2:
 * 	'ass2' name=ID;
 *
 **/

// 'ass2' name=ID
protected class RuleCallsAss2_Group extends GroupToken {
	
	public RuleCallsAss2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleCallsAss2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCallsAss2_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleCallsAss2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// 'ass2'
protected class RuleCallsAss2_Ass2Keyword_0 extends KeywordToken  {
	
	public RuleCallsAss2_Ass2Keyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleCallsAss2Access().getAss2Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class RuleCallsAss2_NameAssignment_1 extends AssignmentToken  {
	
	public RuleCallsAss2_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleCallsAss2Access().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCallsAss2_Ass2Keyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRuleCallsAss2Access().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRuleCallsAss2Access().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RuleCallsAss2 ****************/


/************ begin Rule OptionalCalls ****************
 *
 * OptionalCalls:
 * 	'#3' {OptionalCalls} opt1=OptionalCallsSub1? name=ID;
 *
 **/

// '#3' {OptionalCalls} opt1=OptionalCallsSub1? name=ID
protected class OptionalCalls_Group extends GroupToken {
	
	public OptionalCalls_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOptionalCallsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCalls_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionalCallsAccess().getOptionalCallsAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// '#3'
protected class OptionalCalls_NumberSignDigitThreeKeyword_0 extends KeywordToken  {
	
	public OptionalCalls_NumberSignDigitThreeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalCallsAccess().getNumberSignDigitThreeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {OptionalCalls}
protected class OptionalCalls_OptionalCallsAction_1 extends ActionToken  {

	public OptionalCalls_OptionalCallsAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOptionalCallsAccess().getOptionalCallsAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCalls_NumberSignDigitThreeKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// opt1=OptionalCallsSub1?
protected class OptionalCalls_Opt1Assignment_2 extends AssignmentToken  {
	
	public OptionalCalls_Opt1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionalCallsAccess().getOpt1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub1_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opt1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opt1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOptionalCallsSub1Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOptionalCallsAccess().getOpt1OptionalCallsSub1ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OptionalCalls_OptionalCallsAction_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name=ID
protected class OptionalCalls_NameAssignment_3 extends AssignmentToken  {
	
	public OptionalCalls_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionalCallsAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCalls_Opt1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OptionalCalls_OptionalCallsAction_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOptionalCallsAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOptionalCallsAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OptionalCalls ****************/


/************ begin Rule OptionalCallsSub1 ****************
 *
 * OptionalCallsSub1:
 * 	{OptionalCallsSub1} opt2=OptionalCallsSub2? 'sub' opt3=OptionalCallsSub3?;
 *
 **/

// {OptionalCallsSub1} opt2=OptionalCallsSub2? 'sub' opt3=OptionalCallsSub3?
protected class OptionalCallsSub1_Group extends GroupToken {
	
	public OptionalCallsSub1_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOptionalCallsSub1Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub1_Opt3Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OptionalCallsSub1_SubKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionalCallsSub1Access().getOptionalCallsSub1Action_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OptionalCallsSub1}
protected class OptionalCallsSub1_OptionalCallsSub1Action_0 extends ActionToken  {

	public OptionalCallsSub1_OptionalCallsSub1Action_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOptionalCallsSub1Access().getOptionalCallsSub1Action_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// opt2=OptionalCallsSub2?
protected class OptionalCallsSub1_Opt2Assignment_1 extends AssignmentToken  {
	
	public OptionalCallsSub1_Opt2Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionalCallsSub1Access().getOpt2Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub2_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opt2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opt2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOptionalCallsSub2Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOptionalCallsSub1Access().getOpt2OptionalCallsSub2ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OptionalCallsSub1_OptionalCallsSub1Action_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// 'sub'
protected class OptionalCallsSub1_SubKeyword_2 extends KeywordToken  {
	
	public OptionalCallsSub1_SubKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalCallsSub1Access().getSubKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub1_Opt2Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OptionalCallsSub1_OptionalCallsSub1Action_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// opt3=OptionalCallsSub3?
protected class OptionalCallsSub1_Opt3Assignment_3 extends AssignmentToken  {
	
	public OptionalCallsSub1_Opt3Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionalCallsSub1Access().getOpt3Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub3_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("opt3",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("opt3");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOptionalCallsSub3Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOptionalCallsSub1Access().getOpt3OptionalCallsSub3ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OptionalCallsSub1_SubKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule OptionalCallsSub1 ****************/


/************ begin Rule OptionalCallsSub2 ****************
 *
 * OptionalCallsSub2:
 * 	'sub2' name=ID;
 *
 **/

// 'sub2' name=ID
protected class OptionalCallsSub2_Group extends GroupToken {
	
	public OptionalCallsSub2_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOptionalCallsSub2Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub2_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionalCallsSub2Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// 'sub2'
protected class OptionalCallsSub2_Sub2Keyword_0 extends KeywordToken  {
	
	public OptionalCallsSub2_Sub2Keyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalCallsSub2Access().getSub2Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class OptionalCallsSub2_NameAssignment_1 extends AssignmentToken  {
	
	public OptionalCallsSub2_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionalCallsSub2Access().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub2_Sub2Keyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOptionalCallsSub2Access().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOptionalCallsSub2Access().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OptionalCallsSub2 ****************/


/************ begin Rule OptionalCallsSub3 ****************
 *
 * OptionalCallsSub3:
 * 	'sub3' name=ID;
 *
 **/

// 'sub3' name=ID
protected class OptionalCallsSub3_Group extends GroupToken {
	
	public OptionalCallsSub3_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOptionalCallsSub3Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub3_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOptionalCallsSub3Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// 'sub3'
protected class OptionalCallsSub3_Sub3Keyword_0 extends KeywordToken  {
	
	public OptionalCallsSub3_Sub3Keyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOptionalCallsSub3Access().getSub3Keyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class OptionalCallsSub3_NameAssignment_1 extends AssignmentToken  {
	
	public OptionalCallsSub3_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOptionalCallsSub3Access().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OptionalCallsSub3_Sub3Keyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOptionalCallsSub3Access().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOptionalCallsSub3Access().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OptionalCallsSub3 ****************/


/************ begin Rule Recursion ****************
 *
 * Recursion:
 * 	'#4' RecursionSub;
 *
 **/

// '#4' RecursionSub
protected class Recursion_Group extends GroupToken {
	
	public Recursion_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRecursionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Recursion_RecursionSubParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRecursionSubAccess().getRecursionSubAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// '#4'
protected class Recursion_NumberSignDigitFourKeyword_0 extends KeywordToken  {
	
	public Recursion_NumberSignDigitFourKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRecursionAccess().getNumberSignDigitFourKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// RecursionSub
protected class Recursion_RecursionSubParserRuleCall_1 extends RuleCallToken {
	
	public Recursion_RecursionSubParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRecursionAccess().getRecursionSubParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecursionSub_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(RecursionSub_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Recursion_NumberSignDigitFourKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule Recursion ****************/


/************ begin Rule RecursionSub ****************
 *
 * RecursionSub:
 * 	{RecursionSub} '{' (sub+=RecursionSub | vals+=ID)* '}' semi?=';'?;
 *
 **/

// {RecursionSub} '{' (sub+=RecursionSub | vals+=ID)* '}' semi?=';'?
protected class RecursionSub_Group extends GroupToken {
	
	public RecursionSub_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRecursionSubAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecursionSub_SemiAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RecursionSub_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRecursionSubAccess().getRecursionSubAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {RecursionSub}
protected class RecursionSub_RecursionSubAction_0 extends ActionToken  {

	public RecursionSub_RecursionSubAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRecursionSubAccess().getRecursionSubAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// '{'
protected class RecursionSub_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public RecursionSub_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRecursionSubAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecursionSub_RecursionSubAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (sub+=RecursionSub | vals+=ID)*
protected class RecursionSub_Alternatives_2 extends AlternativesToken {

	public RecursionSub_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRecursionSubAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecursionSub_SubAssignment_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RecursionSub_ValsAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// sub+=RecursionSub
protected class RecursionSub_SubAssignment_2_0 extends AssignmentToken  {
	
	public RecursionSub_SubAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRecursionSubAccess().getSubAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecursionSub_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("sub",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("sub");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRecursionSubRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRecursionSubAccess().getSubRecursionSubParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RecursionSub_Alternatives_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RecursionSub_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// vals+=ID
protected class RecursionSub_ValsAssignment_2_1 extends AssignmentToken  {
	
	public RecursionSub_ValsAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRecursionSubAccess().getValsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecursionSub_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RecursionSub_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("vals",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("vals");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRecursionSubAccess().getValsIDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRecursionSubAccess().getValsIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// '}'
protected class RecursionSub_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public RecursionSub_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRecursionSubAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecursionSub_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RecursionSub_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// semi?=';'?
protected class RecursionSub_SemiAssignment_4 extends AssignmentToken  {
	
	public RecursionSub_SemiAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRecursionSubAccess().getSemiAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecursionSub_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("semi",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("semi");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getRecursionSubAccess().getSemiSemicolonKeyword_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RecursionSub ****************/


/************ begin Rule Loop ****************
 *
 * Loop:
 * 	'#5' names+=ID+ ('gr' gr+=ID)* (ints+=INT | strings+=STRING)*;
 *
 **/

// '#5' names+=ID+ ('gr' gr+=ID)* (ints+=INT | strings+=STRING)*
protected class Loop_Group extends GroupToken {
	
	public Loop_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLoopAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Loop_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Loop_NamesAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLoopRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// '#5'
protected class Loop_NumberSignDigitFiveKeyword_0 extends KeywordToken  {
	
	public Loop_NumberSignDigitFiveKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLoopAccess().getNumberSignDigitFiveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// names+=ID+
protected class Loop_NamesAssignment_1 extends AssignmentToken  {
	
	public Loop_NamesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopAccess().getNamesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_NamesAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Loop_NumberSignDigitFiveKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("names",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("names");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLoopAccess().getNamesIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLoopAccess().getNamesIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ('gr' gr+=ID)*
protected class Loop_Group_2 extends GroupToken {
	
	public Loop_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLoopAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_GrAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// 'gr'
protected class Loop_GrKeyword_2_0 extends KeywordToken  {
	
	public Loop_GrKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLoopAccess().getGrKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Loop_NamesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// gr+=ID
protected class Loop_GrAssignment_2_1 extends AssignmentToken  {
	
	public Loop_GrAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopAccess().getGrAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_GrKeyword_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("gr",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("gr");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLoopAccess().getGrIDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLoopAccess().getGrIDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// (ints+=INT | strings+=STRING)*
protected class Loop_Alternatives_3 extends AlternativesToken {

	public Loop_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLoopAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_IntsAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Loop_StringsAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ints+=INT
protected class Loop_IntsAssignment_3_0 extends AssignmentToken  {
	
	public Loop_IntsAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopAccess().getIntsAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Loop_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Loop_NamesAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ints",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ints");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLoopAccess().getIntsINTTerminalRuleCall_3_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLoopAccess().getIntsINTTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// strings+=STRING
protected class Loop_StringsAssignment_3_1 extends AssignmentToken  {
	
	public Loop_StringsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLoopAccess().getStringsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Loop_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Loop_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Loop_NamesAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("strings",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("strings");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLoopAccess().getStringsSTRINGTerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLoopAccess().getStringsSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Loop ****************/


/************ begin Rule Expression ****************
 *
 * Expression:
 * 	'#6' Add;
 *
 **/

// '#6' Add
protected class Expression_Group extends GroupToken {
	
	public Expression_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExpressionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AddParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddAccess().getAddLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getFunctionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultAccess().getMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getPointerAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getValueAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// '#6'
protected class Expression_NumberSignDigitSixKeyword_0 extends KeywordToken  {
	
	public Expression_NumberSignDigitSixKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExpressionAccess().getNumberSignDigitSixKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Add
protected class Expression_AddParserRuleCall_1 extends RuleCallToken {
	
	public Expression_AddParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAddParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Add_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_NumberSignDigitSixKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule Expression ****************/


/************ begin Rule Add ****************
 *
 * Add Expression:
 * 	Mult ({Add.left=current} '+' right=Mult)*
 *
 **/

// Mult ({Add.left=current} '+' right=Mult)*
protected class Add_Group extends GroupToken {
	
	public Add_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Add_MultParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddAccess().getAddLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getFunctionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultAccess().getMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getPointerAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getValueAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Mult
protected class Add_MultParserRuleCall_0 extends RuleCallToken {
	
	public Add_MultParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAddAccess().getMultParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mult_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Mult_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({Add.left=current} '+' right=Mult)*
protected class Add_Group_1 extends GroupToken {
	
	public Add_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAddAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddAccess().getAddLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Add.left=current}
protected class Add_AddLeftAction_1_0 extends ActionToken  {

	public Add_AddLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAddAccess().getAddLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Add_MultParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// '+'
protected class Add_PlusSignKeyword_1_1 extends KeywordToken  {
	
	public Add_PlusSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAddAccess().getPlusSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_AddLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=Mult
protected class Add_RightAssignment_1_2 extends AssignmentToken  {
	
	public Add_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAddAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mult_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAddAccess().getRightMultParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Add_PlusSignKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Add ****************/


/************ begin Rule Mult ****************
 *
 * Mult Expression:
 * 	Prim ({Mult.left=current} '*' right=Prim)*
 *
 **/

// Prim ({Mult.left=current} '*' right=Prim)*
protected class Mult_Group extends GroupToken {
	
	public Mult_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mult_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mult_PrimParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddAccess().getAddLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getFunctionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultAccess().getMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getPointerAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getValueAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Prim
protected class Mult_PrimParserRuleCall_0 extends RuleCallToken {
	
	public Mult_PrimParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultAccess().getPrimParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Prim_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({Mult.left=current} '*' right=Prim)*
protected class Mult_Group_1 extends GroupToken {
	
	public Mult_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mult_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultAccess().getMultLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Mult.left=current}
protected class Mult_MultLeftAction_1_0 extends ActionToken  {

	public Mult_MultLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultAccess().getMultLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mult_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Mult_PrimParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// '*'
protected class Mult_AsteriskKeyword_1_1 extends KeywordToken  {
	
	public Mult_AsteriskKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultAccess().getAsteriskKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Mult_MultLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=Prim
protected class Mult_RightAssignment_1_2 extends AssignmentToken  {
	
	public Mult_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultAccess().getRightPrimParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Mult_AsteriskKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Mult ****************/


/************ begin Rule Prim ****************
 *
 * Prim Expression:
 * 	{Value} val=INT | {Function} func=ID '(' param+=Add (',' param+=Add)* ')' | {Pointer} '=>' target=Prim |
 * 	'(' Add ')'
 *
 **/

// {Value} val=INT | {Function} func=ID '(' param+=Add (',' param+=Add)* ')' | {Pointer} '=>' target=Prim | '(' Add ')'
protected class Prim_Alternatives extends AlternativesToken {

	public Prim_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Prim_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Prim_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Prim_Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAddAccess().getAddLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getFunctionAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMultAccess().getMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getPointerAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPrimAccess().getValueAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Value} val=INT
protected class Prim_Group_0 extends GroupToken {
	
	public Prim_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_ValAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimAccess().getValueAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Value}
protected class Prim_ValueAction_0_0 extends ActionToken  {

	public Prim_ValueAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPrimAccess().getValueAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// val=INT
protected class Prim_ValAssignment_0_1 extends AssignmentToken  {
	
	public Prim_ValAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimAccess().getValAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_ValueAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("val",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("val");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPrimAccess().getValINTTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPrimAccess().getValINTTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// {Function} func=ID '(' param+=Add (',' param+=Add)* ')'
protected class Prim_Group_1 extends GroupToken {
	
	public Prim_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_RightParenthesisKeyword_1_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimAccess().getFunctionAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Function}
protected class Prim_FunctionAction_1_0 extends ActionToken  {

	public Prim_FunctionAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPrimAccess().getFunctionAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// func=ID
protected class Prim_FuncAssignment_1_1 extends AssignmentToken  {
	
	public Prim_FuncAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimAccess().getFuncAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_FunctionAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("func",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("func");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPrimAccess().getFuncIDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPrimAccess().getFuncIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// '('
protected class Prim_LeftParenthesisKeyword_1_2 extends KeywordToken  {
	
	public Prim_LeftParenthesisKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimAccess().getLeftParenthesisKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_FuncAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// param+=Add
protected class Prim_ParamAssignment_1_3 extends AssignmentToken  {
	
	public Prim_ParamAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimAccess().getParamAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("param",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("param");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAddRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrimAccess().getParamAddParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prim_LeftParenthesisKeyword_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (',' param+=Add)*
protected class Prim_Group_1_4 extends GroupToken {
	
	public Prim_Group_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimAccess().getGroup_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_ParamAssignment_1_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ','
protected class Prim_CommaKeyword_1_4_0 extends KeywordToken  {
	
	public Prim_CommaKeyword_1_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimAccess().getCommaKeyword_1_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_Group_1_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Prim_ParamAssignment_1_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// param+=Add
protected class Prim_ParamAssignment_1_4_1 extends AssignmentToken  {
	
	public Prim_ParamAssignment_1_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimAccess().getParamAssignment_1_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("param",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("param");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAddRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrimAccess().getParamAddParserRuleCall_1_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prim_CommaKeyword_1_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ')'
protected class Prim_RightParenthesisKeyword_1_5 extends KeywordToken  {
	
	public Prim_RightParenthesisKeyword_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimAccess().getRightParenthesisKeyword_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_Group_1_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Prim_ParamAssignment_1_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// {Pointer} '=>' target=Prim
protected class Prim_Group_2 extends GroupToken {
	
	public Prim_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_TargetAssignment_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrimAccess().getPointerAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Pointer}
protected class Prim_PointerAction_2_0 extends ActionToken  {

	public Prim_PointerAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPrimAccess().getPointerAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// '=>'
protected class Prim_EqualsSignGreaterThanSignKeyword_2_1 extends KeywordToken  {
	
	public Prim_EqualsSignGreaterThanSignKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimAccess().getEqualsSignGreaterThanSignKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_PointerAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// target=Prim
protected class Prim_TargetAssignment_2_2 extends AssignmentToken  {
	
	public Prim_TargetAssignment_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimAccess().getTargetAssignment_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("target",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrimAccess().getTargetPrimParserRuleCall_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Prim_EqualsSignGreaterThanSignKeyword_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// '(' Add ')'
protected class Prim_Group_3 extends GroupToken {
	
	public Prim_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_RightParenthesisKeyword_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// '('
protected class Prim_LeftParenthesisKeyword_3_0 extends KeywordToken  {
	
	public Prim_LeftParenthesisKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimAccess().getLeftParenthesisKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Add
protected class Prim_AddParserRuleCall_3_1 extends RuleCallToken {
	
	public Prim_AddParserRuleCall_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimAccess().getAddParserRuleCall_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Add_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Add_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_LeftParenthesisKeyword_3_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ')'
protected class Prim_RightParenthesisKeyword_3_2 extends KeywordToken  {
	
	public Prim_RightParenthesisKeyword_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimAccess().getRightParenthesisKeyword_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Prim_AddParserRuleCall_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Prim ****************/


/************ begin Rule RuleCalls12 ****************
 *
 * RuleCalls12:
 * 	"#7" constructor=Constructor fields+=Field "kw3";
 *
 **/

// "#7" constructor=Constructor fields+=Field "kw3"
protected class RuleCalls12_Group extends GroupToken {
	
	public RuleCalls12_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRuleCalls12Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCalls12_Kw3Keyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRuleCalls12Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#7"
protected class RuleCalls12_NumberSignDigitSevenKeyword_0 extends KeywordToken  {
	
	public RuleCalls12_NumberSignDigitSevenKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleCalls12Access().getNumberSignDigitSevenKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// constructor=Constructor
protected class RuleCalls12_ConstructorAssignment_1 extends AssignmentToken  {
	
	public RuleCalls12_ConstructorAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleCalls12Access().getConstructorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constructor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constructor",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constructor");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstructorRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleCalls12Access().getConstructorConstructorParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleCalls12_NumberSignDigitSevenKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// fields+=Field
protected class RuleCalls12_FieldsAssignment_2 extends AssignmentToken  {
	
	public RuleCalls12_FieldsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRuleCalls12Access().getFieldsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Field_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("fields",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("fields");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFieldRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRuleCalls12Access().getFieldsFieldParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RuleCalls12_ConstructorAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "kw3"
protected class RuleCalls12_Kw3Keyword_3 extends KeywordToken  {
	
	public RuleCalls12_Kw3Keyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRuleCalls12Access().getKw3Keyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RuleCalls12_FieldsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule RuleCalls12 ****************/


/************ begin Rule Constructor ****************
 *
 * Constructor:
 * 	{Constructor} kw1?="kw1"?;
 *
 **/

// {Constructor} kw1?="kw1"?
protected class Constructor_Group extends GroupToken {
	
	public Constructor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstructorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constructor_Kw1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Constructor_ConstructorAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstructorAccess().getConstructorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Constructor}
protected class Constructor_ConstructorAction_0 extends ActionToken  {

	public Constructor_ConstructorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConstructorAccess().getConstructorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// kw1?="kw1"?
protected class Constructor_Kw1Assignment_1 extends AssignmentToken  {
	
	public Constructor_Kw1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorAccess().getKw1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constructor_ConstructorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getConstructorAccess().getKw1Kw1Keyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Constructor ****************/


/************ begin Rule Field ****************
 *
 * Field:
 * 	ID Parameter;
 *
 **/

// ID Parameter
protected class Field_Group extends GroupToken {
	
	public Field_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFieldAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Field_ParameterParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterAccess().getParameterAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ID
protected class Field_IDTerminalRuleCall_0 extends UnassignedTextToken {

	public Field_IDTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFieldAccess().getIDTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Parameter
protected class Field_ParameterParserRuleCall_1 extends RuleCallToken {
	
	public Field_ParameterParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFieldAccess().getParameterParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Parameter_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Field_IDTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule Field ****************/


/************ begin Rule Parameter ****************
 *
 * Parameter:
 * 	{Parameter} kw2?="kw2"?;
 *
 **/

// {Parameter} kw2?="kw2"?
protected class Parameter_Group extends GroupToken {
	
	public Parameter_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_Kw2Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Parameter_ParameterAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterAccess().getParameterAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Parameter}
protected class Parameter_ParameterAction_0 extends ActionToken  {

	public Parameter_ParameterAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterAccess().getParameterAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// kw2?="kw2"?
protected class Parameter_Kw2Assignment_1 extends AssignmentToken  {
	
	public Parameter_Kw2Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getKw2Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter_ParameterAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kw2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kw2");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getParameterAccess().getKw2Kw2Keyword_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Parameter ****************/


/************ begin Rule NestedStart ****************
 *
 * NestedStart:
 * 	NestedStartSub name=ID;
 *
 **/

// NestedStartSub name=ID
protected class NestedStart_Group extends GroupToken {
	
	public NestedStart_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNestedStartAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NestedStart_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNestedStartSubAccess().getNestedStartSubAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NestedStartSub
protected class NestedStart_NestedStartSubParserRuleCall_0 extends RuleCallToken {
	
	public NestedStart_NestedStartSubParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNestedStartAccess().getNestedStartSubParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NestedStartSub_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NestedStartSub_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// name=ID
protected class NestedStart_NameAssignment_1 extends AssignmentToken  {
	
	public NestedStart_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNestedStartAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NestedStart_NestedStartSubParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNestedStartAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNestedStartAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NestedStart ****************/


/************ begin Rule NestedStartSub ****************
 *
 * NestedStartSub:
 * 	"#8" {NestedStartSub};
 *
 **/

// "#8" {NestedStartSub}
protected class NestedStartSub_Group extends GroupToken {
	
	public NestedStartSub_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNestedStartSubAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NestedStartSub_NestedStartSubAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNestedStartSubAccess().getNestedStartSubAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "#8"
protected class NestedStartSub_NumberSignDigitEightKeyword_0 extends KeywordToken  {
	
	public NestedStartSub_NumberSignDigitEightKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNestedStartSubAccess().getNumberSignDigitEightKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {NestedStartSub}
protected class NestedStartSub_NestedStartSubAction_1 extends ActionToken  {

	public NestedStartSub_NestedStartSubAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNestedStartSubAccess().getNestedStartSubAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NestedStartSub_NumberSignDigitEightKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}


/************ end Rule NestedStartSub ****************/

}
