/*
 * generated by Xtext
 */
grammar DebugInternalXtextTerminalsTestLanguage ;

// Rule Grammar
ruleGrammar :
	'grammar' ruleGrammarID (
		'with' ruleGrammarID (
			',' ruleGrammarID
		)*
	)? (
		'hidden' '(' (
			RULE_ID (
				',' RULE_ID
			)*
		)? ')'
	)? ruleAbstractMetamodelDeclaration* ruleAbstractRule+
;

// Rule GrammarID
ruleGrammarID :
	RULE_ID (
		'.' RULE_ID
	)*
;

// Rule AbstractRule
ruleAbstractRule :
	ruleParserRule |
	ruleTerminalRule |
	ruleEnumRule
;

// Rule AbstractMetamodelDeclaration
ruleAbstractMetamodelDeclaration :
	ruleGeneratedMetamodel |
	ruleReferencedMetamodel
;

// Rule GeneratedMetamodel
ruleGeneratedMetamodel :
	'generate' RULE_ID RULE_STRING (
		'as' RULE_ID
	)?
;

// Rule ReferencedMetamodel
ruleReferencedMetamodel :
	'import' RULE_STRING (
		'as' RULE_ID
	)?
;

// Rule ParserRule
ruleParserRule :
	RULE_ID (
		'returns' ruleTypeRef
	)? (
		'hidden' '(' (
			RULE_ID (
				',' RULE_ID
			)*
		)? ')'
	)? ':' ruleAlternatives ';'
;

// Rule TypeRef
ruleTypeRef :
	(
		RULE_ID '::'
	)? RULE_ID
;

// Rule Alternatives
ruleAlternatives :
	ruleGroup (
		(
			'|' ruleGroup
		)+
	)?
;

// Rule Group
ruleGroup :
	ruleAbstractToken (
		ruleAbstractToken+
	)?
;

// Rule AbstractToken
ruleAbstractToken :
	ruleAbstractTokenWithCardinality |
	ruleAction
;

// Rule AbstractTokenWithCardinality
ruleAbstractTokenWithCardinality :
	(
		ruleAssignment |
		ruleAbstractTerminal
	) (
		'?' |
		'*' |
		'+'
	)?
;

// Rule Action
ruleAction :
	'{' ruleTypeRef (
		'.' RULE_ID (
			'=' |
			'+='
		) 'current'
	)? '}'
;

// Rule AbstractTerminal
ruleAbstractTerminal :
	ruleKeyword |
	ruleRuleCall |
	ruleParenthesizedElement
;

// Rule Keyword
ruleKeyword :
	RULE_STRING
;

// Rule RuleCall
ruleRuleCall :
	RULE_ID
;

// Rule Assignment
ruleAssignment :
	RULE_ID (
		'+=' |
		'=' |
		'?='
	) ruleAssignableTerminal
;

// Rule AssignableTerminal
ruleAssignableTerminal :
	ruleKeyword |
	ruleRuleCall |
	ruleParenthesizedAssignableElement |
	ruleCrossReference
;

// Rule ParenthesizedAssignableElement
ruleParenthesizedAssignableElement :
	'(' ruleAssignableAlternatives ')'
;

// Rule AssignableAlternatives
ruleAssignableAlternatives :
	ruleAssignableTerminal (
		(
			'|' ruleAssignableTerminal
		)+
	)?
;

// Rule CrossReference
ruleCrossReference :
	'[' ruleTypeRef (
		'|' ruleCrossReferenceableTerminal
	)? ']'
;

// Rule CrossReferenceableTerminal
ruleCrossReferenceableTerminal :
	ruleKeyword |
	ruleRuleCall
;

// Rule ParenthesizedElement
ruleParenthesizedElement :
	'(' ruleAlternatives ')'
;

// Rule TerminalRule
ruleTerminalRule :
	'terminal' RULE_ID (
		'returns' ruleTypeRef
	)? ':' ruleTerminalAlternatives ';'
;

// Rule TerminalAlternatives
ruleTerminalAlternatives :
	ruleTerminalGroup (
		(
			'|' ruleTerminalGroup
		)+
	)?
;

// Rule TerminalGroup
ruleTerminalGroup :
	ruleTerminalToken (
		ruleTerminalToken+
	)?
;

// Rule TerminalToken
ruleTerminalToken :
	ruleTerminalTokenElement (
		'?' |
		'*' |
		'+'
	)?
;

// Rule TerminalTokenElement
ruleTerminalTokenElement :
	ruleCharacterRange |
	ruleRuleCall |
	ruleParenthesizedTerminalElement |
	ruleAbstractNegatedToken |
	ruleWildcard
;

// Rule ParenthesizedTerminalElement
ruleParenthesizedTerminalElement :
	'(' ruleTerminalAlternatives ')'
;

// Rule AbstractNegatedToken
ruleAbstractNegatedToken :
	ruleNegatedToken |
	ruleUntilToken
;

// Rule NegatedToken
ruleNegatedToken :
	'!' ruleTerminalTokenElement
;

// Rule UntilToken
ruleUntilToken :
	'->' ruleTerminalTokenElement
;

// Rule Wildcard
ruleWildcard :
	'.'
;

// Rule CharacterRange
ruleCharacterRange :
	ruleKeyword (
		'..' ruleKeyword
	)?
;

// Rule EnumRule
ruleEnumRule :
	'enum' RULE_ID (
		'returns' ruleTypeRef
	)? ':' ruleEnumLiterals ';'
;

// Rule EnumLiterals
ruleEnumLiterals :
	ruleEnumLiteralDeclaration (
		(
			'|' ruleEnumLiteralDeclaration
		)+
	)?
;

// Rule EnumLiteralDeclaration
ruleEnumLiteralDeclaration :
	RULE_ID (
		'=' ruleKeyword
	)?
;

RULE_ID :
	'^'? (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_'
	) (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_' |
		'0' .. '9'
	)*
;

RULE_INT :
	'0' .. '9'+
;

RULE_STRING :
	'"' (
		'\\' (
			'b' |
			't' |
			'n' |
			'f' |
			'r' |
			'"' |
			'\'' |
			'\\'
		) |
		~ (
			'\\' |
			'"'
		)
	)* '"' |
	'\'' (
		'\\' (
			'b' |
			't' |
			'n' |
			'f' |
			'r' |
			'"' |
			'\'' |
			'\\'
		) |
		~ (
			'\\' |
			'\''
		)
	)* '\''
;

RULE_ML_COMMENT :
	'/*' (
		options { greedy = false ; } : .
	)* '*/' { skip(); }
;

RULE_SL_COMMENT :
	'//' ~ (
		'\n' |
		'\r'
	)* (
		'\r'? '\n'
	)? { skip(); }
;

RULE_WS :
	(
		' ' |
		'\t' |
		'\r' |
		'\n'
	)+ { skip(); }
;

RULE_ANY_OTHER :
	.
;