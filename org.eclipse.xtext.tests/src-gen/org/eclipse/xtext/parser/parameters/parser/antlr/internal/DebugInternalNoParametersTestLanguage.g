/*
 * generated by Xtext
 */
grammar DebugInternalNoParametersTestLanguage ;

// Rule ParserRuleParameters
ruleParserRuleParameters :
	'#1' ruleScenario1_True |
	'#2' ruleScenario1_False |
	'#3' ruleScenario2_True |
	'#4' ruleScenario2_False |
	( (
	'#5' ruleScenario2_True
	) => (
		'#5' ruleScenario2_True
	) ) |
	( (
	'#6' ruleScenario2_False
	) => (
		'#6' ruleScenario2_False
	) ) |
	'#7' ruleScenario3_True |
	'#8' ruleScenario3_False |
	'#9' (
		( (
		ruleIdOrKeyword_True
		) => ruleScenario4_True ) |
		ruleScenario2_True 'keyword'?
	) |
	'#10' (
		( (
		ruleIdOrKeyword_True
		) => ruleScenario4_True ) |
		ruleScenario2_False 'keyword'?
	) |
	'#11' (
		( (
		ruleIdOrKeyword_False
		) => ruleScenario4_False ) |
		ruleScenario2_True 'keyword'?
	) |
	'#12' (
		( (
		ruleIdOrKeyword_False
		) => ruleScenario4_False ) |
		ruleScenario2_False 'keyword'?
	)
;

// Rule Scenario1_True
ruleScenario1_True :
	RULE_ID
;

// Rule Scenario1_False
ruleScenario1_False :
	RULE_ID
;

// Rule Scenario2_True
ruleScenario2_True :
	ruleIdOrKeyword_True
;

// Rule Scenario2_False
ruleScenario2_False :
	ruleIdOrKeyword_False
;

// Rule Scenario3_True
ruleScenario3_True :
	( (
	ruleIdOrKeyword_True
	) => ruleIdOrKeyword_True ) |
	'keyword'
;

// Rule Scenario3_False
ruleScenario3_False :
	( (
	ruleIdOrKeyword_False
	) => ruleIdOrKeyword_False ) |
	'keyword'
;

// Rule Scenario4_True
ruleScenario4_True :
	( (
	ruleIdOrKeyword_True
	) => ruleIdOrKeyword_True ) 'keyword'
;

// Rule Scenario4_False
ruleScenario4_False :
	( (
	ruleIdOrKeyword_False
	) => ruleIdOrKeyword_False ) 'keyword'
;

// Rule IdOrKeyword_True
ruleIdOrKeyword_True :
	'keyword' |
	RULE_ID
;

// Rule IdOrKeyword_False
ruleIdOrKeyword_False :
	RULE_ID
;

// Rule IdOrKeyword
ruleIdOrKeyword :
	RULE_ID
;

// Rule IdOrKeyword
norm1_IdOrKeyword :
	'keyword' |
	RULE_ID
;

RULE_ID :
	'^'? (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_'
	) (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_' |
		'0' .. '9'
	)*
;

RULE_INT :
	'0' .. '9'+
;

RULE_STRING :
	'"' (
		'\\' . |
		~ (
			'\\' |
			'"'
		)
	)* '"' |
	'\'' (
		'\\' . |
		~ (
			'\\' |
			'\''
		)
	)* '\''
;

RULE_ML_COMMENT :
	'/*' (
		options { greedy = false ; } : .
	)* '*/' { skip(); }
;

RULE_SL_COMMENT :
	'//' ~ (
		'\n' |
		'\r'
	)* (
		'\r'? '\n'
	)? { skip(); }
;

RULE_WS :
	(
		' ' |
		'\t' |
		'\r' |
		'\n'
	)+ { skip(); }
;

RULE_ANY_OTHER :
	.
;