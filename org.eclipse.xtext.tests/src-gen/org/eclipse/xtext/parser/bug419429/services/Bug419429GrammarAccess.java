/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.bug419429.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Bug419429GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.bug419429.Bug419429.EReference");
		private final Assignment cETypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cETypeEClassifierCrossReference_0 = (CrossReference)cETypeAssignment.eContents().get(0);
		private final RuleCall cETypeEClassifierIDTerminalRuleCall_0_1 = (RuleCall)cETypeEClassifierCrossReference_0.eContents().get(1);
		
		//EReference:
		//	eType=[EClassifier];
		@Override public ParserRule getRule() { return rule; }

		//eType=[EClassifier]
		public Assignment getETypeAssignment() { return cETypeAssignment; }

		//[EClassifier]
		public CrossReference getETypeEClassifierCrossReference_0() { return cETypeEClassifierCrossReference_0; }

		//ID
		public RuleCall getETypeEClassifierIDTerminalRuleCall_0_1() { return cETypeEClassifierIDTerminalRuleCall_0_1; }
	}
	
	
	private final EReferenceElements pEReference;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Bug419429GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEReference = new EReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parser.bug419429.Bug419429".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EReference:
	//	eType=[EClassifier];
	public EReferenceElements getEReferenceAccess() {
		return pEReference;
	}
	
	public ParserRule getEReferenceRule() {
		return getEReferenceAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
