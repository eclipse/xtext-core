/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.antlr.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Bug443221TestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.antlr.Bug443221TestLanguage.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDummyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword c_Keyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword c_dummy_Keyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword c__dummy__Keyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword c__dummy__Keyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cDollarSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cDollarSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Model:
		//	{Model}
		//	'dummy' name=ID
		//	'_'
		//	'_dummy_'
		//	'__dummy__'
		//	'$__dummy__'
		//	'$'
		//	'DollarSign';
		@Override public ParserRule getRule() { return rule; }

		//{Model} 'dummy' name=ID '_' '_dummy_' '__dummy__' '$__dummy__' '$' 'DollarSign'
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//'dummy'
		public Keyword getDummyKeyword_1() { return cDummyKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'_'
		public Keyword get_Keyword_3() { return c_Keyword_3; }

		//'_dummy_'
		public Keyword get_dummy_Keyword_4() { return c_dummy_Keyword_4; }

		//'__dummy__'
		public Keyword get__dummy__Keyword_5() { return c__dummy__Keyword_5; }

		//'$__dummy__'
		public Keyword get__dummy__Keyword_6() { return c__dummy__Keyword_6; }

		//'$'
		public Keyword getDollarSignKeyword_7() { return cDollarSignKeyword_7; }

		//'DollarSign'
		public Keyword getDollarSignKeyword_8() { return cDollarSignKeyword_8; }
	}
	
	
	private final ModelElements pModel;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Bug443221TestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parser.antlr.Bug443221TestLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model}
	//	'dummy' name=ID
	//	'_'
	//	'_dummy_'
	//	'__dummy__'
	//	'$__dummy__'
	//	'$'
	//	'DollarSign';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
