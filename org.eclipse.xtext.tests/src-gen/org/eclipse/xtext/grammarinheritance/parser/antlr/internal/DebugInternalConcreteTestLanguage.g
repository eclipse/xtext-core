/*
 * generated by Xtext
 */
grammar DebugInternalConcreteTestLanguage ;

// Rule RootRule
ruleRootRule :
	ruleConcreteParserRule |
	ruleCallOverridenParserRule |
	ruleCallExtendedParserRule |
	ruleOverridableParserRule2
;

// Rule ConcreteParserRule
ruleConcreteParserRule :
	'model' RULE_REAL ':' ruleInheritedParserRule*
;

// Rule OverridableParserRule
ruleOverridableParserRule :
	'overriddenelement' RULE_ID
;

// Rule CallOverridenParserRule
ruleCallOverridenParserRule :
	ruleAbstractCallOverridenParserRule
;

// Rule OverridableParserRule2
ruleOverridableParserRule2 :
	'overridden other element' RULE_ID '-' RULE_INT
;

// Rule ExtendableParserRule
ruleExtendableParserRule :
	ruleSubrule1 |
	ruleSubrule2 |
	ruleSubrule3
;

// Rule Subrule1
ruleSubrule1 :
	'subrule1' RULE_ID RULE_ID
;

// Rule Subrule2
ruleSubrule2 :
	'subrule3' RULE_ID RULE_STRING
;

// Rule Subrule3
ruleSubrule3 :
	'subrule3' RULE_ID RULE_INT
;

// Rule CallExtendedParserRule
ruleCallExtendedParserRule :
	ruleAbstractCallExtendedParserRule
;

// Rule InheritedParserRule
ruleInheritedParserRule :
	'element' RULE_ID
;

// Rule AbstractCallOverridenParserRule
ruleAbstractCallOverridenParserRule :
	'overridemodel' ruleOverridableParserRule*
;

// Rule AbstractCallExtendedParserRule
ruleAbstractCallExtendedParserRule :
	'extendedmodel' ruleExtendableParserRule*
;

RULE_ID :
	SUPER_ID
;

RULE_REAL :
	RULE_INT '.' RULE_INT
;

fragment SUPER_ID :
	'^'? (
		'a' .. 'z' |
		'A' .. 'Z' |
		'\u00F6' |
		'\u00E4' |
		'\u00FC' |
		'_'
	) (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_' |
		'0' .. '9'
	)*
;

RULE_INT :
	'0' .. '9'+
;

RULE_STRING :
	'"' (
		'\\' . |
		~ (
			'\\' |
			'"'
		)
	)* '"' |
	'\'' (
		'\\' . |
		~ (
			'\\' |
			'\''
		)
	)* '\''
;

RULE_ML_COMMENT :
	'/*' (
		options { greedy = false ; } : .
	)* '*/' { skip(); }
;

RULE_SL_COMMENT :
	'//' ~ (
		'\n' |
		'\r'
	)* (
		'\r'? '\n'
	)? { skip(); }
;

RULE_WS :
	(
		' ' |
		'\t' |
		'\r' |
		'\n'
	)+ { skip(); }
;

RULE_ANY_OTHER :
	.
;