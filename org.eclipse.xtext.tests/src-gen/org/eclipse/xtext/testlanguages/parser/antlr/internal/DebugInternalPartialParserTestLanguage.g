/*
 * generated by Xtext
 */
grammar DebugInternalPartialParserTestLanguage ;

// Rule SomeContainer
ruleSomeContainer :
	'container' RULE_ID '{' (
		ruleNested |
		ruleContent
	)* '}'
;

// Rule Nested
ruleNested :
	'nested' '{' ruleSomeContainer+ '}'
;

// Rule Content
ruleContent :
	ruleChildren |
	ruleAbstractChildren
;

// Rule Children
ruleChildren :
	'children' '{' ruleChild (
		',' ruleChild
	)* '}'
;

// Rule Child
ruleChild :
	'->' 'C' '(' ruleNamed ')'
;

// Rule AbstractChildren
ruleAbstractChildren :
	'abstract children' '{' ruleAbstractChild+ '}'
;

// Rule AbstractChild
ruleAbstractChild :
	ruleFirstConcrete |
	ruleSecondConcrete
;

// Rule FirstConcrete
ruleFirstConcrete :
	'->' 'F' '(' ruleNamed RULE_ID? ')'
;

// Rule SecondConcrete
ruleSecondConcrete :
	'->' 'F' 'S' '(' ruleNamed RULE_ID? ')'
;

// Rule Named
ruleNamed :
	RULE_ID
;

RULE_ID :
	'^'? (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_'
	) (
		'a' .. 'z' |
		'A' .. 'Z' |
		'_' |
		'0' .. '9'
	)*
;

RULE_INT :
	'0' .. '9'+
;

RULE_STRING :
	'"' (
		'\\' . |
		~ (
			'\\' |
			'"'
		)
	)* '"' |
	'\'' (
		'\\' . |
		~ (
			'\\' |
			'\''
		)
	)* '\''
;

RULE_ML_COMMENT :
	'/*' (
		options { greedy = false ; } : .
	)* '*/' { skip(); }
;

RULE_SL_COMMENT :
	'//' ~ (
		'\n' |
		'\r'
	)* (
		'\r'? '\n'
	)? { skip(); }
;

RULE_WS :
	(
		' ' |
		'\t' |
		'\r' |
		'\n'
	)+ { skip(); }
;

RULE_ANY_OTHER :
	.
;