/**
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.xtext.formatting2.regionaccess.internal;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ITextRegionAccess;
import org.eclipse.xtext.formatting2.regionaccess.ITextRegionDiffBuilder;
import org.eclipse.xtext.formatting2.regionaccess.internal.RegionAccessTestHelper;
import org.eclipse.xtext.formatting2.regionaccess.internal.regionaccesstestlanguage.RegionaccesstestlanguagePackage;
import org.eclipse.xtext.formatting2.regionaccess.internal.tests.RegionAccessTestLanguageInjectorProvider;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * @author Moritz Eysholdt - Initial contribution and API
 */
@InjectWith(RegionAccessTestLanguageInjectorProvider.class)
@RunWith(XtextRunner.class)
@SuppressWarnings("all")
public class RegionAccessCommentsTest {
  @Inject
  @Extension
  private RegionAccessTestHelper _regionAccessTestHelper;
  
  @Test
  public void testDeleteFirstRegion1() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*h*/");
    _builder.newLine();
    _builder.append("/*8*/");
    _builder.newLine();
    _builder.append("8 //8");
    _builder.newLine();
    _builder.append("/*a*/");
    _builder.newLine();
    _builder.append("a");
    _builder.newLine();
    final ITextRegionAccess access = this._regionAccessTestHelper.toTextRegionAccess(_builder);
    final Procedure1<ITextRegionDiffBuilder> _function = (ITextRegionDiffBuilder it) -> {
      final ISemanticRegion foo = access.regionForRootEObject().getAllRegionsFor().keyword("8");
      it.remove(foo);
    };
    ITextRegionAccess _modify = this._regionAccessTestHelper.modify(access, _function);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(" ");
    _builder_1.append("0    1 H \"/*h*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("12   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("B ValueList\'[a]\' Root");
    _builder_1.newLine();
    _builder_1.append("12  1    S \"a\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("E ValueList\'[a]\' Root");
    _builder_1.newLine();
    _builder_1.append("13  0   H");
    _builder_1.newLine();
    _builder_1.append("------------ diff 1 ------------");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("0    H \"/*h*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*8*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("12   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("12  1 S \"8\"        Root:\'8\'");
    _builder_1.newLine();
    _builder_1.append("13    H \" \"        Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"//8\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("11   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    this._regionAccessTestHelper.operator_tripleEquals(_modify, _builder_1);
  }
  
  @Test
  public void testDeleteFirstRegion2() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*h*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*81*/");
    _builder.newLine();
    _builder.append("/*82*/");
    _builder.newLine();
    _builder.append("8 //8");
    _builder.newLine();
    _builder.append("/*a*/");
    _builder.newLine();
    _builder.append("a");
    _builder.newLine();
    final ITextRegionAccess access = this._regionAccessTestHelper.toTextRegionAccess(_builder);
    final Procedure1<ITextRegionDiffBuilder> _function = (ITextRegionDiffBuilder it) -> {
      final ISemanticRegion foo = access.regionForRootEObject().getAllRegionsFor().keyword("8");
      it.remove(foo);
    };
    ITextRegionAccess _modify = this._regionAccessTestHelper.modify(access, _function);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(" ");
    _builder_1.append("0    1 H \"/*h*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\\n\"     Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("13   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("B ValueList\'[a]\' Root");
    _builder_1.newLine();
    _builder_1.append("13  1    S \"a\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("E ValueList\'[a]\' Root");
    _builder_1.newLine();
    _builder_1.append("14  0   H");
    _builder_1.newLine();
    _builder_1.append("------------ diff 1 ------------");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("0    H \"/*h*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\\n\"     Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*81*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*82*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("21   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("21  1 S \"8\"        Root:\'8\'");
    _builder_1.newLine();
    _builder_1.append("22    H \" \"        Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"//8\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("11   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    this._regionAccessTestHelper.operator_tripleEquals(_modify, _builder_1);
  }
  
  @Test
  public void testDeleteFirstRegion3() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*h*/");
    _builder.newLine();
    _builder.append("/*81*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*82*/");
    _builder.newLine();
    _builder.append("8 //8");
    _builder.newLine();
    _builder.append("/*a*/");
    _builder.newLine();
    _builder.append("a");
    _builder.newLine();
    final ITextRegionAccess access = this._regionAccessTestHelper.toTextRegionAccess(_builder);
    final Procedure1<ITextRegionDiffBuilder> _function = (ITextRegionDiffBuilder it) -> {
      final ISemanticRegion foo = access.regionForRootEObject().getAllRegionsFor().keyword("8");
      it.remove(foo);
    };
    ITextRegionAccess _modify = this._regionAccessTestHelper.modify(access, _function);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(" ");
    _builder_1.append("0    1 H \"/*h*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*81*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\\n\"     Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("20   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("B ValueList\'[a]\' Root");
    _builder_1.newLine();
    _builder_1.append("20  1    S \"a\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("E ValueList\'[a]\' Root");
    _builder_1.newLine();
    _builder_1.append("21  0   H");
    _builder_1.newLine();
    _builder_1.append("------------ diff 1 ------------");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("0    H \"/*h*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*81*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\\n\"     Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*82*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("21   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("21  1 S \"8\"        Root:\'8\'");
    _builder_1.newLine();
    _builder_1.append("22    H \" \"        Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"//8\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("11   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    this._regionAccessTestHelper.operator_tripleEquals(_modify, _builder_1);
  }
  
  @Test
  public void testDeleteFirstRegion4() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*h*/");
    _builder.newLine();
    _builder.append("/*81*/");
    _builder.newLine();
    _builder.append("/*82*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("8 //8");
    _builder.newLine();
    _builder.append("/*a*/");
    _builder.newLine();
    _builder.append("a");
    _builder.newLine();
    final ITextRegionAccess access = this._regionAccessTestHelper.toTextRegionAccess(_builder);
    final Procedure1<ITextRegionDiffBuilder> _function = (ITextRegionDiffBuilder it) -> {
      final ISemanticRegion foo = access.regionForRootEObject().getAllRegionsFor().keyword("8");
      it.remove(foo);
    };
    ITextRegionAccess _modify = this._regionAccessTestHelper.modify(access, _function);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(" ");
    _builder_1.append("0    1 H \"/*h*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*81*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*82*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\\n\"     Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("27   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("B ValueList\'[a]\' Root");
    _builder_1.newLine();
    _builder_1.append("27  1    S \"a\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("E ValueList\'[a]\' Root");
    _builder_1.newLine();
    _builder_1.append("28  0   H");
    _builder_1.newLine();
    _builder_1.append("------------ diff 1 ------------");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("0    H \"/*h*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*81*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*82*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("21   \"\\n\\n\"     Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("21  1 S \"8\"        Root:\'8\'");
    _builder_1.newLine();
    _builder_1.append("22    H \" \"        Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"//8\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("11   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    this._regionAccessTestHelper.operator_tripleEquals(_modify, _builder_1);
  }
  
  @Test
  public void testDeleteMiddleRegion() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("8");
    _builder.newLine();
    _builder.append("a /*a*/ //a");
    _builder.newLine();
    _builder.append("/*b1*/");
    _builder.newLine();
    _builder.append("/*b2*/");
    _builder.newLine();
    _builder.append("b");
    _builder.newLine();
    final ITextRegionAccess access = this._regionAccessTestHelper.toTextRegionAccess(_builder);
    final Procedure1<ITextRegionDiffBuilder> _function = (ITextRegionDiffBuilder it) -> {
      final ISemanticRegion foo = IterableExtensions.<ISemanticRegion>head(access.regionForRootEObject().getAllRegionsFor().features(RegionaccesstestlanguagePackage.Literals.VALUE_LIST__NAME));
      it.remove(foo);
    };
    ITextRegionAccess _modify = this._regionAccessTestHelper.modify(access, _function);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(" ");
    _builder_1.append("0  0   H");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("B ValueList\'[a, b]\' Root");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("0  1    S \"8\"        Root:\'8\'");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("1    1  H \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("\"/*b1*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("\"/*b2*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("15    \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("16  1    S \"b\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("E ValueList\'[a, b]\' Root");
    _builder_1.newLine();
    _builder_1.append("17  0   H");
    _builder_1.newLine();
    _builder_1.append("------------ diff 1 ------------");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("1  1 H \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("2  1 S \"a\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("3    H \" \"        Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\" \"        Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"//a\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*b1*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*b2*/\"   Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("25   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    this._regionAccessTestHelper.operator_tripleEquals(_modify, _builder_1);
  }
  
  @Test
  public void testMove() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("8//8");
    _builder.newLine();
    _builder.append("/*a*/");
    _builder.newLine();
    _builder.append("a//a");
    _builder.newLine();
    _builder.append("/*b*/");
    _builder.newLine();
    _builder.append("b//b");
    _builder.newLine();
    _builder.append("/*c*/");
    _builder.newLine();
    _builder.append("c");
    _builder.newLine();
    final ITextRegionAccess access = this._regionAccessTestHelper.toTextRegionAccess(_builder);
    final Procedure1<ITextRegionDiffBuilder> _function = (ITextRegionDiffBuilder it) -> {
      final List<ISemanticRegion> regions = access.regionForRootEObject().getAllRegionsFor().features(RegionaccesstestlanguagePackage.Literals.VALUE_LIST__NAME);
      final ISemanticRegion a = regions.get(0);
      final ISemanticRegion b = regions.get(1);
      it.move(b.getNextHiddenRegion(), a.getPreviousHiddenRegion(), a.getNextHiddenRegion());
    };
    ITextRegionAccess _modify = this._regionAccessTestHelper.modify(access, _function);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(" ");
    _builder_1.append("0  0   H");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("B ValueList\'[a, b, c]\' Root");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("0  1    S \"8\"        Root:\'8\'");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("1    1  H \"//8\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("\"/*b*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("10    \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("11  1    S \"b\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("12    2  H \"//b\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("10    \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("22  1 2  S \"a\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("23    2  H \"//a\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("         ");
    _builder_1.append("\"/*c*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("10    \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("33  1    S \"c\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("E ValueList\'[a, b, c]\' Root");
    _builder_1.newLine();
    _builder_1.append("34  0   H");
    _builder_1.newLine();
    _builder_1.append("------------ diff 1 ------------");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("1    H \"//8\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*a*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("10   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("11  1 S \"a\"        ValueList:name+=ID");
    _builder_1.newLine();
    _builder_1.append("12    H \"//a\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*b*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("10   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    _builder_1.append("------------ diff 2 ------------");
    _builder_1.newLine();
    _builder_1.append("23    H \"//b\\n\"    Comment:TerminalRule\'SL_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("\"/*c*/\"    Comment:TerminalRule\'ML_COMMENT\'");
    _builder_1.newLine();
    _builder_1.append("   ");
    _builder_1.append("10   \"\\n\"       Whitespace:TerminalRule\'WS\'");
    _builder_1.newLine();
    this._regionAccessTestHelper.operator_tripleEquals(_modify, _builder_1);
  }
}
